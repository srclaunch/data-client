var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

// node_modules/pg-connection-string/index.js
var require_pg_connection_string = __commonJS({
  "node_modules/pg-connection-string/index.js"(exports, module) {
    "use strict";
    var url = __require("url");
    var fs = __require("fs");
    function parse(str) {
      if (str.charAt(0) === "/") {
        var config = str.split(" ");
        return { host: config[0], database: config[1] };
      }
      var result = url.parse(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str) ? encodeURI(str).replace(/\%25(\d\d)/g, "%$1") : str, true);
      var config = result.query;
      for (var k in config) {
        if (Array.isArray(config[k])) {
          config[k] = config[k][config[k].length - 1];
        }
      }
      var auth = (result.auth || ":").split(":");
      config.user = auth[0];
      config.password = auth.splice(1).join(":");
      config.port = result.port;
      if (result.protocol == "socket:") {
        config.host = decodeURI(result.pathname);
        config.database = result.query.db;
        config.client_encoding = result.query.encoding;
        return config;
      }
      if (!config.host) {
        config.host = result.hostname;
      }
      var pathname = result.pathname;
      if (!config.host && pathname && /^%2f/i.test(pathname)) {
        var pathnameSplit = pathname.split("/");
        config.host = decodeURIComponent(pathnameSplit[0]);
        pathname = pathnameSplit.splice(1).join("/");
      }
      if (pathname && pathname.charAt(0) === "/") {
        pathname = pathname.slice(1) || null;
      }
      config.database = pathname && decodeURI(pathname);
      if (config.ssl === "true" || config.ssl === "1") {
        config.ssl = true;
      }
      if (config.ssl === "0") {
        config.ssl = false;
      }
      if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {
        config.ssl = {};
      }
      if (config.sslcert) {
        config.ssl.cert = fs.readFileSync(config.sslcert).toString();
      }
      if (config.sslkey) {
        config.ssl.key = fs.readFileSync(config.sslkey).toString();
      }
      if (config.sslrootcert) {
        config.ssl.ca = fs.readFileSync(config.sslrootcert).toString();
      }
      switch (config.sslmode) {
        case "disable": {
          config.ssl = false;
          break;
        }
        case "prefer":
        case "require":
        case "verify-ca":
        case "verify-full": {
          break;
        }
        case "no-verify": {
          config.ssl.rejectUnauthorized = false;
          break;
        }
      }
      return config;
    }
    module.exports = parse;
    parse.parse = parse;
  }
});

// node_modules/retry-as-promised/index.js
var require_retry_as_promised = __commonJS({
  "node_modules/retry-as-promised/index.js"(exports, module) {
    "use strict";
    var util = __require("util");
    var format = util.format;
    function TimeoutError2(message, err) {
      Error.call(this);
      Error.captureStackTrace(this, TimeoutError2);
      this.name = "TimeoutError";
      this.message = message;
      this.previous = err;
    }
    util.inherits(TimeoutError2, Error);
    function matches(match, err) {
      if (match === true)
        return true;
      if (typeof match === "function") {
        try {
          if (err instanceof match)
            return true;
        } catch (_) {
          return !!match(err);
        }
      }
      if (match === err.toString())
        return true;
      if (match === err.message)
        return true;
      return match instanceof RegExp && (match.test(err.message) || match.test(err.toString()));
    }
    module.exports = function retryAsPromised(callback, options) {
      if (!callback || !options) {
        throw new Error("retry-as-promised must be passed a callback and a options set or a number");
      }
      if (typeof options === "number") {
        options = {
          max: options
        };
      }
      options = {
        $current: options.$current || 1,
        max: options.max,
        timeout: options.timeout || void 0,
        match: options.match || [],
        backoffBase: options.backoffBase === void 0 ? 100 : options.backoffBase,
        backoffExponent: options.backoffExponent || 1.1,
        report: options.report || function() {
        },
        name: options.name || callback.name || "unknown"
      };
      if (!Array.isArray(options.match))
        options.match = [options.match];
      options.report("Trying " + options.name + " #" + options.$current + " at " + new Date().toLocaleTimeString(), options);
      return new Promise(function(resolve, reject) {
        var timeout, backoffTimeout, lastError;
        if (options.timeout) {
          timeout = setTimeout(function() {
            if (backoffTimeout)
              clearTimeout(backoffTimeout);
            reject(new TimeoutError2(options.name + " timed out", lastError));
          }, options.timeout);
        }
        Promise.resolve(callback({ current: options.$current })).then(resolve).then(function() {
          if (timeout)
            clearTimeout(timeout);
          if (backoffTimeout)
            clearTimeout(backoffTimeout);
        }).catch(function(err) {
          if (timeout)
            clearTimeout(timeout);
          if (backoffTimeout)
            clearTimeout(backoffTimeout);
          lastError = err;
          options.report(err && err.toString() || err, options);
          var shouldRetry = options.$current < options.max;
          if (!shouldRetry)
            return reject(err);
          shouldRetry = options.match.length === 0 || options.match.some(function(match) {
            return matches(match, err);
          });
          if (!shouldRetry)
            return reject(err);
          var retryDelay = options.backoffBase * Math.pow(options.backoffExponent, options.$current - 1);
          options.$current++;
          options.report(format("Retrying %s (%s)", options.name, options.$current), options);
          if (retryDelay) {
            options.report(format("Delaying retry of %s by %s", options.name, retryDelay), options);
            backoffTimeout = setTimeout(function() {
              retryAsPromised(callback, options).then(resolve).catch(reject);
            }, retryDelay);
          } else {
            retryAsPromised(callback, options).then(resolve).catch(reject);
          }
        });
      });
    };
    module.exports.TimeoutError = TimeoutError2;
  }
});

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports, module) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error3 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          "escape": reEscape,
          "evaluate": reEvaluate,
          "interpolate": reInterpolate,
          "variable": "",
          "imports": {
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString2(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn2.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString2(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
            }
            var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn2, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
            }
            var thisBinding = isBind ? thisArg : this, fn2 = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn2 = Ctor || createCtor(fn2);
            }
            return fn2.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn2, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString2(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString2(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error3(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString2(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString2(string).toLowerCase());
        }
        function deburr(string) {
          string = toString2(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString2(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString2(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString2(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString2(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString2(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString2(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString2(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString2(string), n);
        }
        function replace() {
          var args = arguments, string = toString2(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString2(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString2(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString2(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error3(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString2(value).toLowerCase();
        }
        function toUpper(value) {
          return toString2(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString2(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString2(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString2(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString2(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString2(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape2(string) {
          string = toString2(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString2(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error3(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString2(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString2(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString2;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape2;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _ = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _;
        define(function() {
          return _;
        });
      } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
    }).call(exports);
  }
});

// node_modules/wkx/lib/types.js
var require_types = __commonJS({
  "node_modules/wkx/lib/types.js"(exports, module) {
    module.exports = {
      wkt: {
        Point: "POINT",
        LineString: "LINESTRING",
        Polygon: "POLYGON",
        MultiPoint: "MULTIPOINT",
        MultiLineString: "MULTILINESTRING",
        MultiPolygon: "MULTIPOLYGON",
        GeometryCollection: "GEOMETRYCOLLECTION"
      },
      wkb: {
        Point: 1,
        LineString: 2,
        Polygon: 3,
        MultiPoint: 4,
        MultiLineString: 5,
        MultiPolygon: 6,
        GeometryCollection: 7
      },
      geoJSON: {
        Point: "Point",
        LineString: "LineString",
        Polygon: "Polygon",
        MultiPoint: "MultiPoint",
        MultiLineString: "MultiLineString",
        MultiPolygon: "MultiPolygon",
        GeometryCollection: "GeometryCollection"
      }
    };
  }
});

// node_modules/wkx/lib/binarywriter.js
var require_binarywriter = __commonJS({
  "node_modules/wkx/lib/binarywriter.js"(exports, module) {
    module.exports = BinaryWriter;
    function BinaryWriter(size, allowResize) {
      this.buffer = new Buffer(size);
      this.position = 0;
      this.allowResize = allowResize;
    }
    function _write(write, size) {
      return function(value, noAssert) {
        this.ensureSize(size);
        write.call(this.buffer, value, this.position, noAssert);
        this.position += size;
      };
    }
    BinaryWriter.prototype.writeUInt8 = _write(Buffer.prototype.writeUInt8, 1);
    BinaryWriter.prototype.writeUInt16LE = _write(Buffer.prototype.writeUInt16LE, 2);
    BinaryWriter.prototype.writeUInt16BE = _write(Buffer.prototype.writeUInt16BE, 2);
    BinaryWriter.prototype.writeUInt32LE = _write(Buffer.prototype.writeUInt32LE, 4);
    BinaryWriter.prototype.writeUInt32BE = _write(Buffer.prototype.writeUInt32BE, 4);
    BinaryWriter.prototype.writeInt8 = _write(Buffer.prototype.writeInt8, 1);
    BinaryWriter.prototype.writeInt16LE = _write(Buffer.prototype.writeInt16LE, 2);
    BinaryWriter.prototype.writeInt16BE = _write(Buffer.prototype.writeInt16BE, 2);
    BinaryWriter.prototype.writeInt32LE = _write(Buffer.prototype.writeInt32LE, 4);
    BinaryWriter.prototype.writeInt32BE = _write(Buffer.prototype.writeInt32BE, 4);
    BinaryWriter.prototype.writeFloatLE = _write(Buffer.prototype.writeFloatLE, 4);
    BinaryWriter.prototype.writeFloatBE = _write(Buffer.prototype.writeFloatBE, 4);
    BinaryWriter.prototype.writeDoubleLE = _write(Buffer.prototype.writeDoubleLE, 8);
    BinaryWriter.prototype.writeDoubleBE = _write(Buffer.prototype.writeDoubleBE, 8);
    BinaryWriter.prototype.writeBuffer = function(buffer) {
      this.ensureSize(buffer.length);
      buffer.copy(this.buffer, this.position, 0, buffer.length);
      this.position += buffer.length;
    };
    BinaryWriter.prototype.writeVarInt = function(value) {
      var length = 1;
      while ((value & 4294967168) !== 0) {
        this.writeUInt8(value & 127 | 128);
        value >>>= 7;
        length++;
      }
      this.writeUInt8(value & 127);
      return length;
    };
    BinaryWriter.prototype.ensureSize = function(size) {
      if (this.buffer.length < this.position + size) {
        if (this.allowResize) {
          var tempBuffer = new Buffer(this.position + size);
          this.buffer.copy(tempBuffer, 0, 0, this.buffer.length);
          this.buffer = tempBuffer;
        } else {
          throw new RangeError("index out of range");
        }
      }
    };
  }
});

// node_modules/wkx/lib/zigzag.js
var require_zigzag = __commonJS({
  "node_modules/wkx/lib/zigzag.js"(exports, module) {
    module.exports = {
      encode: function(value) {
        return value << 1 ^ value >> 31;
      },
      decode: function(value) {
        return value >> 1 ^ -(value & 1);
      }
    };
  }
});

// node_modules/wkx/lib/point.js
var require_point = __commonJS({
  "node_modules/wkx/lib/point.js"(exports, module) {
    module.exports = Point;
    var util = __require("util");
    var Geometry = require_geometry();
    var Types = require_types();
    var BinaryWriter = require_binarywriter();
    var ZigZag = require_zigzag();
    function Point(x, y, z, m, srid) {
      Geometry.call(this);
      this.x = x;
      this.y = y;
      this.z = z;
      this.m = m;
      this.srid = srid;
      this.hasZ = typeof this.z !== "undefined";
      this.hasM = typeof this.m !== "undefined";
    }
    util.inherits(Point, Geometry);
    Point.Z = function(x, y, z, srid) {
      var point = new Point(x, y, z, void 0, srid);
      point.hasZ = true;
      return point;
    };
    Point.M = function(x, y, m, srid) {
      var point = new Point(x, y, void 0, m, srid);
      point.hasM = true;
      return point;
    };
    Point.ZM = function(x, y, z, m, srid) {
      var point = new Point(x, y, z, m, srid);
      point.hasZ = true;
      point.hasM = true;
      return point;
    };
    Point._parseWkt = function(value, options) {
      var point = new Point();
      point.srid = options.srid;
      point.hasZ = options.hasZ;
      point.hasM = options.hasM;
      if (value.isMatch(["EMPTY"]))
        return point;
      value.expectGroupStart();
      var coordinate = value.matchCoordinate(options);
      point.x = coordinate.x;
      point.y = coordinate.y;
      point.z = coordinate.z;
      point.m = coordinate.m;
      value.expectGroupEnd();
      return point;
    };
    Point._parseWkb = function(value, options) {
      var point = Point._readWkbPoint(value, options);
      point.srid = options.srid;
      return point;
    };
    Point._readWkbPoint = function(value, options) {
      return new Point(value.readDouble(), value.readDouble(), options.hasZ ? value.readDouble() : void 0, options.hasM ? value.readDouble() : void 0);
    };
    Point._parseTwkb = function(value, options) {
      var point = new Point();
      point.hasZ = options.hasZ;
      point.hasM = options.hasM;
      if (options.isEmpty)
        return point;
      point.x = ZigZag.decode(value.readVarInt()) / options.precisionFactor;
      point.y = ZigZag.decode(value.readVarInt()) / options.precisionFactor;
      point.z = options.hasZ ? ZigZag.decode(value.readVarInt()) / options.zPrecisionFactor : void 0;
      point.m = options.hasM ? ZigZag.decode(value.readVarInt()) / options.mPrecisionFactor : void 0;
      return point;
    };
    Point._readTwkbPoint = function(value, options, previousPoint) {
      previousPoint.x += ZigZag.decode(value.readVarInt()) / options.precisionFactor;
      previousPoint.y += ZigZag.decode(value.readVarInt()) / options.precisionFactor;
      if (options.hasZ)
        previousPoint.z += ZigZag.decode(value.readVarInt()) / options.zPrecisionFactor;
      if (options.hasM)
        previousPoint.m += ZigZag.decode(value.readVarInt()) / options.mPrecisionFactor;
      return new Point(previousPoint.x, previousPoint.y, previousPoint.z, previousPoint.m);
    };
    Point._parseGeoJSON = function(value) {
      return Point._readGeoJSONPoint(value.coordinates);
    };
    Point._readGeoJSONPoint = function(coordinates) {
      if (coordinates.length === 0)
        return new Point();
      if (coordinates.length > 2)
        return new Point(coordinates[0], coordinates[1], coordinates[2]);
      return new Point(coordinates[0], coordinates[1]);
    };
    Point.prototype.toWkt = function() {
      if (typeof this.x === "undefined" && typeof this.y === "undefined" && typeof this.z === "undefined" && typeof this.m === "undefined")
        return this._getWktType(Types.wkt.Point, true);
      return this._getWktType(Types.wkt.Point, false) + "(" + this._getWktCoordinate(this) + ")";
    };
    Point.prototype.toWkb = function(parentOptions) {
      var wkb = new BinaryWriter(this._getWkbSize());
      wkb.writeInt8(1);
      this._writeWkbType(wkb, Types.wkb.Point, parentOptions);
      if (typeof this.x === "undefined" && typeof this.y === "undefined") {
        wkb.writeDoubleLE(NaN);
        wkb.writeDoubleLE(NaN);
        if (this.hasZ)
          wkb.writeDoubleLE(NaN);
        if (this.hasM)
          wkb.writeDoubleLE(NaN);
      } else {
        this._writeWkbPoint(wkb);
      }
      return wkb.buffer;
    };
    Point.prototype._writeWkbPoint = function(wkb) {
      wkb.writeDoubleLE(this.x);
      wkb.writeDoubleLE(this.y);
      if (this.hasZ)
        wkb.writeDoubleLE(this.z);
      if (this.hasM)
        wkb.writeDoubleLE(this.m);
    };
    Point.prototype.toTwkb = function() {
      var twkb = new BinaryWriter(0, true);
      var precision = Geometry.getTwkbPrecision(5, 0, 0);
      var isEmpty = typeof this.x === "undefined" && typeof this.y === "undefined";
      this._writeTwkbHeader(twkb, Types.wkb.Point, precision, isEmpty);
      if (!isEmpty)
        this._writeTwkbPoint(twkb, precision, new Point(0, 0, 0, 0));
      return twkb.buffer;
    };
    Point.prototype._writeTwkbPoint = function(twkb, precision, previousPoint) {
      var x = this.x * precision.xyFactor;
      var y = this.y * precision.xyFactor;
      var z = this.z * precision.zFactor;
      var m = this.m * precision.mFactor;
      twkb.writeVarInt(ZigZag.encode(x - previousPoint.x));
      twkb.writeVarInt(ZigZag.encode(y - previousPoint.y));
      if (this.hasZ)
        twkb.writeVarInt(ZigZag.encode(z - previousPoint.z));
      if (this.hasM)
        twkb.writeVarInt(ZigZag.encode(m - previousPoint.m));
      previousPoint.x = x;
      previousPoint.y = y;
      previousPoint.z = z;
      previousPoint.m = m;
    };
    Point.prototype._getWkbSize = function() {
      var size = 1 + 4 + 8 + 8;
      if (this.hasZ)
        size += 8;
      if (this.hasM)
        size += 8;
      return size;
    };
    Point.prototype.toGeoJSON = function(options) {
      var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
      geoJSON.type = Types.geoJSON.Point;
      if (typeof this.x === "undefined" && typeof this.y === "undefined")
        geoJSON.coordinates = [];
      else if (typeof this.z !== "undefined")
        geoJSON.coordinates = [this.x, this.y, this.z];
      else
        geoJSON.coordinates = [this.x, this.y];
      return geoJSON;
    };
  }
});

// node_modules/wkx/lib/linestring.js
var require_linestring = __commonJS({
  "node_modules/wkx/lib/linestring.js"(exports, module) {
    module.exports = LineString;
    var util = __require("util");
    var Geometry = require_geometry();
    var Types = require_types();
    var Point = require_point();
    var BinaryWriter = require_binarywriter();
    function LineString(points, srid) {
      Geometry.call(this);
      this.points = points || [];
      this.srid = srid;
      if (this.points.length > 0) {
        this.hasZ = this.points[0].hasZ;
        this.hasM = this.points[0].hasM;
      }
    }
    util.inherits(LineString, Geometry);
    LineString.Z = function(points, srid) {
      var lineString = new LineString(points, srid);
      lineString.hasZ = true;
      return lineString;
    };
    LineString.M = function(points, srid) {
      var lineString = new LineString(points, srid);
      lineString.hasM = true;
      return lineString;
    };
    LineString.ZM = function(points, srid) {
      var lineString = new LineString(points, srid);
      lineString.hasZ = true;
      lineString.hasM = true;
      return lineString;
    };
    LineString._parseWkt = function(value, options) {
      var lineString = new LineString();
      lineString.srid = options.srid;
      lineString.hasZ = options.hasZ;
      lineString.hasM = options.hasM;
      if (value.isMatch(["EMPTY"]))
        return lineString;
      value.expectGroupStart();
      lineString.points.push.apply(lineString.points, value.matchCoordinates(options));
      value.expectGroupEnd();
      return lineString;
    };
    LineString._parseWkb = function(value, options) {
      var lineString = new LineString();
      lineString.srid = options.srid;
      lineString.hasZ = options.hasZ;
      lineString.hasM = options.hasM;
      var pointCount = value.readUInt32();
      for (var i = 0; i < pointCount; i++)
        lineString.points.push(Point._readWkbPoint(value, options));
      return lineString;
    };
    LineString._parseTwkb = function(value, options) {
      var lineString = new LineString();
      lineString.hasZ = options.hasZ;
      lineString.hasM = options.hasM;
      if (options.isEmpty)
        return lineString;
      var previousPoint = new Point(0, 0, options.hasZ ? 0 : void 0, options.hasM ? 0 : void 0);
      var pointCount = value.readVarInt();
      for (var i = 0; i < pointCount; i++)
        lineString.points.push(Point._readTwkbPoint(value, options, previousPoint));
      return lineString;
    };
    LineString._parseGeoJSON = function(value) {
      var lineString = new LineString();
      if (value.coordinates.length > 0)
        lineString.hasZ = value.coordinates[0].length > 2;
      for (var i = 0; i < value.coordinates.length; i++)
        lineString.points.push(Point._readGeoJSONPoint(value.coordinates[i]));
      return lineString;
    };
    LineString.prototype.toWkt = function() {
      if (this.points.length === 0)
        return this._getWktType(Types.wkt.LineString, true);
      return this._getWktType(Types.wkt.LineString, false) + this._toInnerWkt();
    };
    LineString.prototype._toInnerWkt = function() {
      var innerWkt = "(";
      for (var i = 0; i < this.points.length; i++)
        innerWkt += this._getWktCoordinate(this.points[i]) + ",";
      innerWkt = innerWkt.slice(0, -1);
      innerWkt += ")";
      return innerWkt;
    };
    LineString.prototype.toWkb = function(parentOptions) {
      var wkb = new BinaryWriter(this._getWkbSize());
      wkb.writeInt8(1);
      this._writeWkbType(wkb, Types.wkb.LineString, parentOptions);
      wkb.writeUInt32LE(this.points.length);
      for (var i = 0; i < this.points.length; i++)
        this.points[i]._writeWkbPoint(wkb);
      return wkb.buffer;
    };
    LineString.prototype.toTwkb = function() {
      var twkb = new BinaryWriter(0, true);
      var precision = Geometry.getTwkbPrecision(5, 0, 0);
      var isEmpty = this.points.length === 0;
      this._writeTwkbHeader(twkb, Types.wkb.LineString, precision, isEmpty);
      if (this.points.length > 0) {
        twkb.writeVarInt(this.points.length);
        var previousPoint = new Point(0, 0, 0, 0);
        for (var i = 0; i < this.points.length; i++)
          this.points[i]._writeTwkbPoint(twkb, precision, previousPoint);
      }
      return twkb.buffer;
    };
    LineString.prototype._getWkbSize = function() {
      var coordinateSize = 16;
      if (this.hasZ)
        coordinateSize += 8;
      if (this.hasM)
        coordinateSize += 8;
      return 1 + 4 + 4 + this.points.length * coordinateSize;
    };
    LineString.prototype.toGeoJSON = function(options) {
      var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
      geoJSON.type = Types.geoJSON.LineString;
      geoJSON.coordinates = [];
      for (var i = 0; i < this.points.length; i++) {
        if (this.hasZ)
          geoJSON.coordinates.push([this.points[i].x, this.points[i].y, this.points[i].z]);
        else
          geoJSON.coordinates.push([this.points[i].x, this.points[i].y]);
      }
      return geoJSON;
    };
  }
});

// node_modules/wkx/lib/polygon.js
var require_polygon = __commonJS({
  "node_modules/wkx/lib/polygon.js"(exports, module) {
    module.exports = Polygon;
    var util = __require("util");
    var Geometry = require_geometry();
    var Types = require_types();
    var Point = require_point();
    var BinaryWriter = require_binarywriter();
    function Polygon(exteriorRing, interiorRings, srid) {
      Geometry.call(this);
      this.exteriorRing = exteriorRing || [];
      this.interiorRings = interiorRings || [];
      this.srid = srid;
      if (this.exteriorRing.length > 0) {
        this.hasZ = this.exteriorRing[0].hasZ;
        this.hasM = this.exteriorRing[0].hasM;
      }
    }
    util.inherits(Polygon, Geometry);
    Polygon.Z = function(exteriorRing, interiorRings, srid) {
      var polygon = new Polygon(exteriorRing, interiorRings, srid);
      polygon.hasZ = true;
      return polygon;
    };
    Polygon.M = function(exteriorRing, interiorRings, srid) {
      var polygon = new Polygon(exteriorRing, interiorRings, srid);
      polygon.hasM = true;
      return polygon;
    };
    Polygon.ZM = function(exteriorRing, interiorRings, srid) {
      var polygon = new Polygon(exteriorRing, interiorRings, srid);
      polygon.hasZ = true;
      polygon.hasM = true;
      return polygon;
    };
    Polygon._parseWkt = function(value, options) {
      var polygon = new Polygon();
      polygon.srid = options.srid;
      polygon.hasZ = options.hasZ;
      polygon.hasM = options.hasM;
      if (value.isMatch(["EMPTY"]))
        return polygon;
      value.expectGroupStart();
      value.expectGroupStart();
      polygon.exteriorRing.push.apply(polygon.exteriorRing, value.matchCoordinates(options));
      value.expectGroupEnd();
      while (value.isMatch([","])) {
        value.expectGroupStart();
        polygon.interiorRings.push(value.matchCoordinates(options));
        value.expectGroupEnd();
      }
      value.expectGroupEnd();
      return polygon;
    };
    Polygon._parseWkb = function(value, options) {
      var polygon = new Polygon();
      polygon.srid = options.srid;
      polygon.hasZ = options.hasZ;
      polygon.hasM = options.hasM;
      var ringCount = value.readUInt32();
      if (ringCount > 0) {
        var exteriorRingCount = value.readUInt32();
        for (var i = 0; i < exteriorRingCount; i++)
          polygon.exteriorRing.push(Point._readWkbPoint(value, options));
        for (i = 1; i < ringCount; i++) {
          var interiorRing = [];
          var interiorRingCount = value.readUInt32();
          for (var j = 0; j < interiorRingCount; j++)
            interiorRing.push(Point._readWkbPoint(value, options));
          polygon.interiorRings.push(interiorRing);
        }
      }
      return polygon;
    };
    Polygon._parseTwkb = function(value, options) {
      var polygon = new Polygon();
      polygon.hasZ = options.hasZ;
      polygon.hasM = options.hasM;
      if (options.isEmpty)
        return polygon;
      var previousPoint = new Point(0, 0, options.hasZ ? 0 : void 0, options.hasM ? 0 : void 0);
      var ringCount = value.readVarInt();
      var exteriorRingCount = value.readVarInt();
      for (var i = 0; i < exteriorRingCount; i++)
        polygon.exteriorRing.push(Point._readTwkbPoint(value, options, previousPoint));
      for (i = 1; i < ringCount; i++) {
        var interiorRing = [];
        var interiorRingCount = value.readVarInt();
        for (var j = 0; j < interiorRingCount; j++)
          interiorRing.push(Point._readTwkbPoint(value, options, previousPoint));
        polygon.interiorRings.push(interiorRing);
      }
      return polygon;
    };
    Polygon._parseGeoJSON = function(value) {
      var polygon = new Polygon();
      if (value.coordinates.length > 0 && value.coordinates[0].length > 0)
        polygon.hasZ = value.coordinates[0][0].length > 2;
      for (var i = 0; i < value.coordinates.length; i++) {
        if (i > 0)
          polygon.interiorRings.push([]);
        for (var j = 0; j < value.coordinates[i].length; j++) {
          if (i === 0)
            polygon.exteriorRing.push(Point._readGeoJSONPoint(value.coordinates[i][j]));
          else
            polygon.interiorRings[i - 1].push(Point._readGeoJSONPoint(value.coordinates[i][j]));
        }
      }
      return polygon;
    };
    Polygon.prototype.toWkt = function() {
      if (this.exteriorRing.length === 0)
        return this._getWktType(Types.wkt.Polygon, true);
      return this._getWktType(Types.wkt.Polygon, false) + this._toInnerWkt();
    };
    Polygon.prototype._toInnerWkt = function() {
      var innerWkt = "((";
      for (var i = 0; i < this.exteriorRing.length; i++)
        innerWkt += this._getWktCoordinate(this.exteriorRing[i]) + ",";
      innerWkt = innerWkt.slice(0, -1);
      innerWkt += ")";
      for (i = 0; i < this.interiorRings.length; i++) {
        innerWkt += ",(";
        for (var j = 0; j < this.interiorRings[i].length; j++) {
          innerWkt += this._getWktCoordinate(this.interiorRings[i][j]) + ",";
        }
        innerWkt = innerWkt.slice(0, -1);
        innerWkt += ")";
      }
      innerWkt += ")";
      return innerWkt;
    };
    Polygon.prototype.toWkb = function(parentOptions) {
      var wkb = new BinaryWriter(this._getWkbSize());
      wkb.writeInt8(1);
      this._writeWkbType(wkb, Types.wkb.Polygon, parentOptions);
      if (this.exteriorRing.length > 0) {
        wkb.writeUInt32LE(1 + this.interiorRings.length);
        wkb.writeUInt32LE(this.exteriorRing.length);
      } else {
        wkb.writeUInt32LE(0);
      }
      for (var i = 0; i < this.exteriorRing.length; i++)
        this.exteriorRing[i]._writeWkbPoint(wkb);
      for (i = 0; i < this.interiorRings.length; i++) {
        wkb.writeUInt32LE(this.interiorRings[i].length);
        for (var j = 0; j < this.interiorRings[i].length; j++)
          this.interiorRings[i][j]._writeWkbPoint(wkb);
      }
      return wkb.buffer;
    };
    Polygon.prototype.toTwkb = function() {
      var twkb = new BinaryWriter(0, true);
      var precision = Geometry.getTwkbPrecision(5, 0, 0);
      var isEmpty = this.exteriorRing.length === 0;
      this._writeTwkbHeader(twkb, Types.wkb.Polygon, precision, isEmpty);
      if (this.exteriorRing.length > 0) {
        twkb.writeVarInt(1 + this.interiorRings.length);
        twkb.writeVarInt(this.exteriorRing.length);
        var previousPoint = new Point(0, 0, 0, 0);
        for (var i = 0; i < this.exteriorRing.length; i++)
          this.exteriorRing[i]._writeTwkbPoint(twkb, precision, previousPoint);
        for (i = 0; i < this.interiorRings.length; i++) {
          twkb.writeVarInt(this.interiorRings[i].length);
          for (var j = 0; j < this.interiorRings[i].length; j++)
            this.interiorRings[i][j]._writeTwkbPoint(twkb, precision, previousPoint);
        }
      }
      return twkb.buffer;
    };
    Polygon.prototype._getWkbSize = function() {
      var coordinateSize = 16;
      if (this.hasZ)
        coordinateSize += 8;
      if (this.hasM)
        coordinateSize += 8;
      var size = 1 + 4 + 4;
      if (this.exteriorRing.length > 0)
        size += 4 + this.exteriorRing.length * coordinateSize;
      for (var i = 0; i < this.interiorRings.length; i++)
        size += 4 + this.interiorRings[i].length * coordinateSize;
      return size;
    };
    Polygon.prototype.toGeoJSON = function(options) {
      var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
      geoJSON.type = Types.geoJSON.Polygon;
      geoJSON.coordinates = [];
      if (this.exteriorRing.length > 0) {
        var exteriorRing = [];
        for (var i = 0; i < this.exteriorRing.length; i++) {
          if (this.hasZ)
            exteriorRing.push([this.exteriorRing[i].x, this.exteriorRing[i].y, this.exteriorRing[i].z]);
          else
            exteriorRing.push([this.exteriorRing[i].x, this.exteriorRing[i].y]);
        }
        geoJSON.coordinates.push(exteriorRing);
      }
      for (var j = 0; j < this.interiorRings.length; j++) {
        var interiorRing = [];
        for (var k = 0; k < this.interiorRings[j].length; k++) {
          if (this.hasZ)
            interiorRing.push([this.interiorRings[j][k].x, this.interiorRings[j][k].y, this.interiorRings[j][k].z]);
          else
            interiorRing.push([this.interiorRings[j][k].x, this.interiorRings[j][k].y]);
        }
        geoJSON.coordinates.push(interiorRing);
      }
      return geoJSON;
    };
  }
});

// node_modules/wkx/lib/multipoint.js
var require_multipoint = __commonJS({
  "node_modules/wkx/lib/multipoint.js"(exports, module) {
    module.exports = MultiPoint;
    var util = __require("util");
    var Types = require_types();
    var Geometry = require_geometry();
    var Point = require_point();
    var BinaryWriter = require_binarywriter();
    function MultiPoint(points, srid) {
      Geometry.call(this);
      this.points = points || [];
      this.srid = srid;
      if (this.points.length > 0) {
        this.hasZ = this.points[0].hasZ;
        this.hasM = this.points[0].hasM;
      }
    }
    util.inherits(MultiPoint, Geometry);
    MultiPoint.Z = function(points, srid) {
      var multiPoint = new MultiPoint(points, srid);
      multiPoint.hasZ = true;
      return multiPoint;
    };
    MultiPoint.M = function(points, srid) {
      var multiPoint = new MultiPoint(points, srid);
      multiPoint.hasM = true;
      return multiPoint;
    };
    MultiPoint.ZM = function(points, srid) {
      var multiPoint = new MultiPoint(points, srid);
      multiPoint.hasZ = true;
      multiPoint.hasM = true;
      return multiPoint;
    };
    MultiPoint._parseWkt = function(value, options) {
      var multiPoint = new MultiPoint();
      multiPoint.srid = options.srid;
      multiPoint.hasZ = options.hasZ;
      multiPoint.hasM = options.hasM;
      if (value.isMatch(["EMPTY"]))
        return multiPoint;
      value.expectGroupStart();
      multiPoint.points.push.apply(multiPoint.points, value.matchCoordinates(options));
      value.expectGroupEnd();
      return multiPoint;
    };
    MultiPoint._parseWkb = function(value, options) {
      var multiPoint = new MultiPoint();
      multiPoint.srid = options.srid;
      multiPoint.hasZ = options.hasZ;
      multiPoint.hasM = options.hasM;
      var pointCount = value.readUInt32();
      for (var i = 0; i < pointCount; i++)
        multiPoint.points.push(Geometry.parse(value, options));
      return multiPoint;
    };
    MultiPoint._parseTwkb = function(value, options) {
      var multiPoint = new MultiPoint();
      multiPoint.hasZ = options.hasZ;
      multiPoint.hasM = options.hasM;
      if (options.isEmpty)
        return multiPoint;
      var previousPoint = new Point(0, 0, options.hasZ ? 0 : void 0, options.hasM ? 0 : void 0);
      var pointCount = value.readVarInt();
      for (var i = 0; i < pointCount; i++)
        multiPoint.points.push(Point._readTwkbPoint(value, options, previousPoint));
      return multiPoint;
    };
    MultiPoint._parseGeoJSON = function(value) {
      var multiPoint = new MultiPoint();
      if (value.coordinates.length > 0)
        multiPoint.hasZ = value.coordinates[0].length > 2;
      for (var i = 0; i < value.coordinates.length; i++)
        multiPoint.points.push(Point._parseGeoJSON({ coordinates: value.coordinates[i] }));
      return multiPoint;
    };
    MultiPoint.prototype.toWkt = function() {
      if (this.points.length === 0)
        return this._getWktType(Types.wkt.MultiPoint, true);
      var wkt = this._getWktType(Types.wkt.MultiPoint, false) + "(";
      for (var i = 0; i < this.points.length; i++)
        wkt += this._getWktCoordinate(this.points[i]) + ",";
      wkt = wkt.slice(0, -1);
      wkt += ")";
      return wkt;
    };
    MultiPoint.prototype.toWkb = function() {
      var wkb = new BinaryWriter(this._getWkbSize());
      wkb.writeInt8(1);
      this._writeWkbType(wkb, Types.wkb.MultiPoint);
      wkb.writeUInt32LE(this.points.length);
      for (var i = 0; i < this.points.length; i++)
        wkb.writeBuffer(this.points[i].toWkb({ srid: this.srid }));
      return wkb.buffer;
    };
    MultiPoint.prototype.toTwkb = function() {
      var twkb = new BinaryWriter(0, true);
      var precision = Geometry.getTwkbPrecision(5, 0, 0);
      var isEmpty = this.points.length === 0;
      this._writeTwkbHeader(twkb, Types.wkb.MultiPoint, precision, isEmpty);
      if (this.points.length > 0) {
        twkb.writeVarInt(this.points.length);
        var previousPoint = new Point(0, 0, 0, 0);
        for (var i = 0; i < this.points.length; i++)
          this.points[i]._writeTwkbPoint(twkb, precision, previousPoint);
      }
      return twkb.buffer;
    };
    MultiPoint.prototype._getWkbSize = function() {
      var coordinateSize = 16;
      if (this.hasZ)
        coordinateSize += 8;
      if (this.hasM)
        coordinateSize += 8;
      coordinateSize += 5;
      return 1 + 4 + 4 + this.points.length * coordinateSize;
    };
    MultiPoint.prototype.toGeoJSON = function(options) {
      var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
      geoJSON.type = Types.geoJSON.MultiPoint;
      geoJSON.coordinates = [];
      for (var i = 0; i < this.points.length; i++)
        geoJSON.coordinates.push(this.points[i].toGeoJSON().coordinates);
      return geoJSON;
    };
  }
});

// node_modules/wkx/lib/multilinestring.js
var require_multilinestring = __commonJS({
  "node_modules/wkx/lib/multilinestring.js"(exports, module) {
    module.exports = MultiLineString;
    var util = __require("util");
    var Types = require_types();
    var Geometry = require_geometry();
    var Point = require_point();
    var LineString = require_linestring();
    var BinaryWriter = require_binarywriter();
    function MultiLineString(lineStrings, srid) {
      Geometry.call(this);
      this.lineStrings = lineStrings || [];
      this.srid = srid;
      if (this.lineStrings.length > 0) {
        this.hasZ = this.lineStrings[0].hasZ;
        this.hasM = this.lineStrings[0].hasM;
      }
    }
    util.inherits(MultiLineString, Geometry);
    MultiLineString.Z = function(lineStrings, srid) {
      var multiLineString = new MultiLineString(lineStrings, srid);
      multiLineString.hasZ = true;
      return multiLineString;
    };
    MultiLineString.M = function(lineStrings, srid) {
      var multiLineString = new MultiLineString(lineStrings, srid);
      multiLineString.hasM = true;
      return multiLineString;
    };
    MultiLineString.ZM = function(lineStrings, srid) {
      var multiLineString = new MultiLineString(lineStrings, srid);
      multiLineString.hasZ = true;
      multiLineString.hasM = true;
      return multiLineString;
    };
    MultiLineString._parseWkt = function(value, options) {
      var multiLineString = new MultiLineString();
      multiLineString.srid = options.srid;
      multiLineString.hasZ = options.hasZ;
      multiLineString.hasM = options.hasM;
      if (value.isMatch(["EMPTY"]))
        return multiLineString;
      value.expectGroupStart();
      do {
        value.expectGroupStart();
        multiLineString.lineStrings.push(new LineString(value.matchCoordinates(options)));
        value.expectGroupEnd();
      } while (value.isMatch([","]));
      value.expectGroupEnd();
      return multiLineString;
    };
    MultiLineString._parseWkb = function(value, options) {
      var multiLineString = new MultiLineString();
      multiLineString.srid = options.srid;
      multiLineString.hasZ = options.hasZ;
      multiLineString.hasM = options.hasM;
      var lineStringCount = value.readUInt32();
      for (var i = 0; i < lineStringCount; i++)
        multiLineString.lineStrings.push(Geometry.parse(value, options));
      return multiLineString;
    };
    MultiLineString._parseTwkb = function(value, options) {
      var multiLineString = new MultiLineString();
      multiLineString.hasZ = options.hasZ;
      multiLineString.hasM = options.hasM;
      if (options.isEmpty)
        return multiLineString;
      var previousPoint = new Point(0, 0, options.hasZ ? 0 : void 0, options.hasM ? 0 : void 0);
      var lineStringCount = value.readVarInt();
      for (var i = 0; i < lineStringCount; i++) {
        var lineString = new LineString();
        lineString.hasZ = options.hasZ;
        lineString.hasM = options.hasM;
        var pointCount = value.readVarInt();
        for (var j = 0; j < pointCount; j++)
          lineString.points.push(Point._readTwkbPoint(value, options, previousPoint));
        multiLineString.lineStrings.push(lineString);
      }
      return multiLineString;
    };
    MultiLineString._parseGeoJSON = function(value) {
      var multiLineString = new MultiLineString();
      if (value.coordinates.length > 0 && value.coordinates[0].length > 0)
        multiLineString.hasZ = value.coordinates[0][0].length > 2;
      for (var i = 0; i < value.coordinates.length; i++)
        multiLineString.lineStrings.push(LineString._parseGeoJSON({ coordinates: value.coordinates[i] }));
      return multiLineString;
    };
    MultiLineString.prototype.toWkt = function() {
      if (this.lineStrings.length === 0)
        return this._getWktType(Types.wkt.MultiLineString, true);
      var wkt = this._getWktType(Types.wkt.MultiLineString, false) + "(";
      for (var i = 0; i < this.lineStrings.length; i++)
        wkt += this.lineStrings[i]._toInnerWkt() + ",";
      wkt = wkt.slice(0, -1);
      wkt += ")";
      return wkt;
    };
    MultiLineString.prototype.toWkb = function() {
      var wkb = new BinaryWriter(this._getWkbSize());
      wkb.writeInt8(1);
      this._writeWkbType(wkb, Types.wkb.MultiLineString);
      wkb.writeUInt32LE(this.lineStrings.length);
      for (var i = 0; i < this.lineStrings.length; i++)
        wkb.writeBuffer(this.lineStrings[i].toWkb({ srid: this.srid }));
      return wkb.buffer;
    };
    MultiLineString.prototype.toTwkb = function() {
      var twkb = new BinaryWriter(0, true);
      var precision = Geometry.getTwkbPrecision(5, 0, 0);
      var isEmpty = this.lineStrings.length === 0;
      this._writeTwkbHeader(twkb, Types.wkb.MultiLineString, precision, isEmpty);
      if (this.lineStrings.length > 0) {
        twkb.writeVarInt(this.lineStrings.length);
        var previousPoint = new Point(0, 0, 0, 0);
        for (var i = 0; i < this.lineStrings.length; i++) {
          twkb.writeVarInt(this.lineStrings[i].points.length);
          for (var j = 0; j < this.lineStrings[i].points.length; j++)
            this.lineStrings[i].points[j]._writeTwkbPoint(twkb, precision, previousPoint);
        }
      }
      return twkb.buffer;
    };
    MultiLineString.prototype._getWkbSize = function() {
      var size = 1 + 4 + 4;
      for (var i = 0; i < this.lineStrings.length; i++)
        size += this.lineStrings[i]._getWkbSize();
      return size;
    };
    MultiLineString.prototype.toGeoJSON = function(options) {
      var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
      geoJSON.type = Types.geoJSON.MultiLineString;
      geoJSON.coordinates = [];
      for (var i = 0; i < this.lineStrings.length; i++)
        geoJSON.coordinates.push(this.lineStrings[i].toGeoJSON().coordinates);
      return geoJSON;
    };
  }
});

// node_modules/wkx/lib/multipolygon.js
var require_multipolygon = __commonJS({
  "node_modules/wkx/lib/multipolygon.js"(exports, module) {
    module.exports = MultiPolygon;
    var util = __require("util");
    var Types = require_types();
    var Geometry = require_geometry();
    var Point = require_point();
    var Polygon = require_polygon();
    var BinaryWriter = require_binarywriter();
    function MultiPolygon(polygons, srid) {
      Geometry.call(this);
      this.polygons = polygons || [];
      this.srid = srid;
      if (this.polygons.length > 0) {
        this.hasZ = this.polygons[0].hasZ;
        this.hasM = this.polygons[0].hasM;
      }
    }
    util.inherits(MultiPolygon, Geometry);
    MultiPolygon.Z = function(polygons, srid) {
      var multiPolygon = new MultiPolygon(polygons, srid);
      multiPolygon.hasZ = true;
      return multiPolygon;
    };
    MultiPolygon.M = function(polygons, srid) {
      var multiPolygon = new MultiPolygon(polygons, srid);
      multiPolygon.hasM = true;
      return multiPolygon;
    };
    MultiPolygon.ZM = function(polygons, srid) {
      var multiPolygon = new MultiPolygon(polygons, srid);
      multiPolygon.hasZ = true;
      multiPolygon.hasM = true;
      return multiPolygon;
    };
    MultiPolygon._parseWkt = function(value, options) {
      var multiPolygon = new MultiPolygon();
      multiPolygon.srid = options.srid;
      multiPolygon.hasZ = options.hasZ;
      multiPolygon.hasM = options.hasM;
      if (value.isMatch(["EMPTY"]))
        return multiPolygon;
      value.expectGroupStart();
      do {
        value.expectGroupStart();
        var exteriorRing = [];
        var interiorRings = [];
        value.expectGroupStart();
        exteriorRing.push.apply(exteriorRing, value.matchCoordinates(options));
        value.expectGroupEnd();
        while (value.isMatch([","])) {
          value.expectGroupStart();
          interiorRings.push(value.matchCoordinates(options));
          value.expectGroupEnd();
        }
        multiPolygon.polygons.push(new Polygon(exteriorRing, interiorRings));
        value.expectGroupEnd();
      } while (value.isMatch([","]));
      value.expectGroupEnd();
      return multiPolygon;
    };
    MultiPolygon._parseWkb = function(value, options) {
      var multiPolygon = new MultiPolygon();
      multiPolygon.srid = options.srid;
      multiPolygon.hasZ = options.hasZ;
      multiPolygon.hasM = options.hasM;
      var polygonCount = value.readUInt32();
      for (var i = 0; i < polygonCount; i++)
        multiPolygon.polygons.push(Geometry.parse(value, options));
      return multiPolygon;
    };
    MultiPolygon._parseTwkb = function(value, options) {
      var multiPolygon = new MultiPolygon();
      multiPolygon.hasZ = options.hasZ;
      multiPolygon.hasM = options.hasM;
      if (options.isEmpty)
        return multiPolygon;
      var previousPoint = new Point(0, 0, options.hasZ ? 0 : void 0, options.hasM ? 0 : void 0);
      var polygonCount = value.readVarInt();
      for (var i = 0; i < polygonCount; i++) {
        var polygon = new Polygon();
        polygon.hasZ = options.hasZ;
        polygon.hasM = options.hasM;
        var ringCount = value.readVarInt();
        var exteriorRingCount = value.readVarInt();
        for (var j = 0; j < exteriorRingCount; j++)
          polygon.exteriorRing.push(Point._readTwkbPoint(value, options, previousPoint));
        for (j = 1; j < ringCount; j++) {
          var interiorRing = [];
          var interiorRingCount = value.readVarInt();
          for (var k = 0; k < interiorRingCount; k++)
            interiorRing.push(Point._readTwkbPoint(value, options, previousPoint));
          polygon.interiorRings.push(interiorRing);
        }
        multiPolygon.polygons.push(polygon);
      }
      return multiPolygon;
    };
    MultiPolygon._parseGeoJSON = function(value) {
      var multiPolygon = new MultiPolygon();
      if (value.coordinates.length > 0 && value.coordinates[0].length > 0 && value.coordinates[0][0].length > 0)
        multiPolygon.hasZ = value.coordinates[0][0][0].length > 2;
      for (var i = 0; i < value.coordinates.length; i++)
        multiPolygon.polygons.push(Polygon._parseGeoJSON({ coordinates: value.coordinates[i] }));
      return multiPolygon;
    };
    MultiPolygon.prototype.toWkt = function() {
      if (this.polygons.length === 0)
        return this._getWktType(Types.wkt.MultiPolygon, true);
      var wkt = this._getWktType(Types.wkt.MultiPolygon, false) + "(";
      for (var i = 0; i < this.polygons.length; i++)
        wkt += this.polygons[i]._toInnerWkt() + ",";
      wkt = wkt.slice(0, -1);
      wkt += ")";
      return wkt;
    };
    MultiPolygon.prototype.toWkb = function() {
      var wkb = new BinaryWriter(this._getWkbSize());
      wkb.writeInt8(1);
      this._writeWkbType(wkb, Types.wkb.MultiPolygon);
      wkb.writeUInt32LE(this.polygons.length);
      for (var i = 0; i < this.polygons.length; i++)
        wkb.writeBuffer(this.polygons[i].toWkb({ srid: this.srid }));
      return wkb.buffer;
    };
    MultiPolygon.prototype.toTwkb = function() {
      var twkb = new BinaryWriter(0, true);
      var precision = Geometry.getTwkbPrecision(5, 0, 0);
      var isEmpty = this.polygons.length === 0;
      this._writeTwkbHeader(twkb, Types.wkb.MultiPolygon, precision, isEmpty);
      if (this.polygons.length > 0) {
        twkb.writeVarInt(this.polygons.length);
        var previousPoint = new Point(0, 0, 0, 0);
        for (var i = 0; i < this.polygons.length; i++) {
          twkb.writeVarInt(1 + this.polygons[i].interiorRings.length);
          twkb.writeVarInt(this.polygons[i].exteriorRing.length);
          for (var j = 0; j < this.polygons[i].exteriorRing.length; j++)
            this.polygons[i].exteriorRing[j]._writeTwkbPoint(twkb, precision, previousPoint);
          for (j = 0; j < this.polygons[i].interiorRings.length; j++) {
            twkb.writeVarInt(this.polygons[i].interiorRings[j].length);
            for (var k = 0; k < this.polygons[i].interiorRings[j].length; k++)
              this.polygons[i].interiorRings[j][k]._writeTwkbPoint(twkb, precision, previousPoint);
          }
        }
      }
      return twkb.buffer;
    };
    MultiPolygon.prototype._getWkbSize = function() {
      var size = 1 + 4 + 4;
      for (var i = 0; i < this.polygons.length; i++)
        size += this.polygons[i]._getWkbSize();
      return size;
    };
    MultiPolygon.prototype.toGeoJSON = function(options) {
      var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
      geoJSON.type = Types.geoJSON.MultiPolygon;
      geoJSON.coordinates = [];
      for (var i = 0; i < this.polygons.length; i++)
        geoJSON.coordinates.push(this.polygons[i].toGeoJSON().coordinates);
      return geoJSON;
    };
  }
});

// node_modules/wkx/lib/geometrycollection.js
var require_geometrycollection = __commonJS({
  "node_modules/wkx/lib/geometrycollection.js"(exports, module) {
    module.exports = GeometryCollection;
    var util = __require("util");
    var Types = require_types();
    var Geometry = require_geometry();
    var BinaryWriter = require_binarywriter();
    function GeometryCollection(geometries, srid) {
      Geometry.call(this);
      this.geometries = geometries || [];
      this.srid = srid;
      if (this.geometries.length > 0) {
        this.hasZ = this.geometries[0].hasZ;
        this.hasM = this.geometries[0].hasM;
      }
    }
    util.inherits(GeometryCollection, Geometry);
    GeometryCollection.Z = function(geometries, srid) {
      var geometryCollection = new GeometryCollection(geometries, srid);
      geometryCollection.hasZ = true;
      return geometryCollection;
    };
    GeometryCollection.M = function(geometries, srid) {
      var geometryCollection = new GeometryCollection(geometries, srid);
      geometryCollection.hasM = true;
      return geometryCollection;
    };
    GeometryCollection.ZM = function(geometries, srid) {
      var geometryCollection = new GeometryCollection(geometries, srid);
      geometryCollection.hasZ = true;
      geometryCollection.hasM = true;
      return geometryCollection;
    };
    GeometryCollection._parseWkt = function(value, options) {
      var geometryCollection = new GeometryCollection();
      geometryCollection.srid = options.srid;
      geometryCollection.hasZ = options.hasZ;
      geometryCollection.hasM = options.hasM;
      if (value.isMatch(["EMPTY"]))
        return geometryCollection;
      value.expectGroupStart();
      do {
        geometryCollection.geometries.push(Geometry.parse(value));
      } while (value.isMatch([","]));
      value.expectGroupEnd();
      return geometryCollection;
    };
    GeometryCollection._parseWkb = function(value, options) {
      var geometryCollection = new GeometryCollection();
      geometryCollection.srid = options.srid;
      geometryCollection.hasZ = options.hasZ;
      geometryCollection.hasM = options.hasM;
      var geometryCount = value.readUInt32();
      for (var i = 0; i < geometryCount; i++)
        geometryCollection.geometries.push(Geometry.parse(value, options));
      return geometryCollection;
    };
    GeometryCollection._parseTwkb = function(value, options) {
      var geometryCollection = new GeometryCollection();
      geometryCollection.hasZ = options.hasZ;
      geometryCollection.hasM = options.hasM;
      if (options.isEmpty)
        return geometryCollection;
      var geometryCount = value.readVarInt();
      for (var i = 0; i < geometryCount; i++)
        geometryCollection.geometries.push(Geometry.parseTwkb(value));
      return geometryCollection;
    };
    GeometryCollection._parseGeoJSON = function(value) {
      var geometryCollection = new GeometryCollection();
      for (var i = 0; i < value.geometries.length; i++)
        geometryCollection.geometries.push(Geometry._parseGeoJSON(value.geometries[i], true));
      if (geometryCollection.geometries.length > 0)
        geometryCollection.hasZ = geometryCollection.geometries[0].hasZ;
      return geometryCollection;
    };
    GeometryCollection.prototype.toWkt = function() {
      if (this.geometries.length === 0)
        return this._getWktType(Types.wkt.GeometryCollection, true);
      var wkt = this._getWktType(Types.wkt.GeometryCollection, false) + "(";
      for (var i = 0; i < this.geometries.length; i++)
        wkt += this.geometries[i].toWkt() + ",";
      wkt = wkt.slice(0, -1);
      wkt += ")";
      return wkt;
    };
    GeometryCollection.prototype.toWkb = function() {
      var wkb = new BinaryWriter(this._getWkbSize());
      wkb.writeInt8(1);
      this._writeWkbType(wkb, Types.wkb.GeometryCollection);
      wkb.writeUInt32LE(this.geometries.length);
      for (var i = 0; i < this.geometries.length; i++)
        wkb.writeBuffer(this.geometries[i].toWkb({ srid: this.srid }));
      return wkb.buffer;
    };
    GeometryCollection.prototype.toTwkb = function() {
      var twkb = new BinaryWriter(0, true);
      var precision = Geometry.getTwkbPrecision(5, 0, 0);
      var isEmpty = this.geometries.length === 0;
      this._writeTwkbHeader(twkb, Types.wkb.GeometryCollection, precision, isEmpty);
      if (this.geometries.length > 0) {
        twkb.writeVarInt(this.geometries.length);
        for (var i = 0; i < this.geometries.length; i++)
          twkb.writeBuffer(this.geometries[i].toTwkb());
      }
      return twkb.buffer;
    };
    GeometryCollection.prototype._getWkbSize = function() {
      var size = 1 + 4 + 4;
      for (var i = 0; i < this.geometries.length; i++)
        size += this.geometries[i]._getWkbSize();
      return size;
    };
    GeometryCollection.prototype.toGeoJSON = function(options) {
      var geoJSON = Geometry.prototype.toGeoJSON.call(this, options);
      geoJSON.type = Types.geoJSON.GeometryCollection;
      geoJSON.geometries = [];
      for (var i = 0; i < this.geometries.length; i++)
        geoJSON.geometries.push(this.geometries[i].toGeoJSON());
      return geoJSON;
    };
  }
});

// node_modules/wkx/lib/binaryreader.js
var require_binaryreader = __commonJS({
  "node_modules/wkx/lib/binaryreader.js"(exports, module) {
    module.exports = BinaryReader;
    function BinaryReader(buffer, isBigEndian) {
      this.buffer = buffer;
      this.position = 0;
      this.isBigEndian = isBigEndian || false;
    }
    function _read(readLE, readBE, size) {
      return function() {
        var value;
        if (this.isBigEndian)
          value = readBE.call(this.buffer, this.position);
        else
          value = readLE.call(this.buffer, this.position);
        this.position += size;
        return value;
      };
    }
    BinaryReader.prototype.readUInt8 = _read(Buffer.prototype.readUInt8, Buffer.prototype.readUInt8, 1);
    BinaryReader.prototype.readUInt16 = _read(Buffer.prototype.readUInt16LE, Buffer.prototype.readUInt16BE, 2);
    BinaryReader.prototype.readUInt32 = _read(Buffer.prototype.readUInt32LE, Buffer.prototype.readUInt32BE, 4);
    BinaryReader.prototype.readInt8 = _read(Buffer.prototype.readInt8, Buffer.prototype.readInt8, 1);
    BinaryReader.prototype.readInt16 = _read(Buffer.prototype.readInt16LE, Buffer.prototype.readInt16BE, 2);
    BinaryReader.prototype.readInt32 = _read(Buffer.prototype.readInt32LE, Buffer.prototype.readInt32BE, 4);
    BinaryReader.prototype.readFloat = _read(Buffer.prototype.readFloatLE, Buffer.prototype.readFloatBE, 4);
    BinaryReader.prototype.readDouble = _read(Buffer.prototype.readDoubleLE, Buffer.prototype.readDoubleBE, 8);
    BinaryReader.prototype.readVarInt = function() {
      var nextByte, result = 0, bytesRead = 0;
      do {
        nextByte = this.buffer[this.position + bytesRead];
        result += (nextByte & 127) << 7 * bytesRead;
        bytesRead++;
      } while (nextByte >= 128);
      this.position += bytesRead;
      return result;
    };
  }
});

// node_modules/wkx/lib/wktparser.js
var require_wktparser = __commonJS({
  "node_modules/wkx/lib/wktparser.js"(exports, module) {
    module.exports = WktParser;
    var Types = require_types();
    var Point = require_point();
    function WktParser(value) {
      this.value = value;
      this.position = 0;
    }
    WktParser.prototype.match = function(tokens) {
      this.skipWhitespaces();
      for (var i = 0; i < tokens.length; i++) {
        if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {
          this.position += tokens[i].length;
          return tokens[i];
        }
      }
      return null;
    };
    WktParser.prototype.matchRegex = function(tokens) {
      this.skipWhitespaces();
      for (var i = 0; i < tokens.length; i++) {
        var match = this.value.substring(this.position).match(tokens[i]);
        if (match) {
          this.position += match[0].length;
          return match;
        }
      }
      return null;
    };
    WktParser.prototype.isMatch = function(tokens) {
      this.skipWhitespaces();
      for (var i = 0; i < tokens.length; i++) {
        if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {
          this.position += tokens[i].length;
          return true;
        }
      }
      return false;
    };
    WktParser.prototype.matchType = function() {
      var geometryType = this.match([
        Types.wkt.Point,
        Types.wkt.LineString,
        Types.wkt.Polygon,
        Types.wkt.MultiPoint,
        Types.wkt.MultiLineString,
        Types.wkt.MultiPolygon,
        Types.wkt.GeometryCollection
      ]);
      if (!geometryType)
        throw new Error("Expected geometry type");
      return geometryType;
    };
    WktParser.prototype.matchDimension = function() {
      var dimension = this.match(["ZM", "Z", "M"]);
      switch (dimension) {
        case "ZM":
          return { hasZ: true, hasM: true };
        case "Z":
          return { hasZ: true, hasM: false };
        case "M":
          return { hasZ: false, hasM: true };
        default:
          return { hasZ: false, hasM: false };
      }
    };
    WktParser.prototype.expectGroupStart = function() {
      if (!this.isMatch(["("]))
        throw new Error("Expected group start");
    };
    WktParser.prototype.expectGroupEnd = function() {
      if (!this.isMatch([")"]))
        throw new Error("Expected group end");
    };
    WktParser.prototype.matchCoordinate = function(options) {
      var match;
      if (options.hasZ && options.hasM)
        match = this.matchRegex([/^(\S*)\s+(\S*)\s+(\S*)\s+([^\s,)]*)/]);
      else if (options.hasZ || options.hasM)
        match = this.matchRegex([/^(\S*)\s+(\S*)\s+([^\s,)]*)/]);
      else
        match = this.matchRegex([/^(\S*)\s+([^\s,)]*)/]);
      if (!match)
        throw new Error("Expected coordinates");
      if (options.hasZ && options.hasM)
        return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]), parseFloat(match[4]));
      else if (options.hasZ)
        return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]));
      else if (options.hasM)
        return new Point(parseFloat(match[1]), parseFloat(match[2]), void 0, parseFloat(match[3]));
      else
        return new Point(parseFloat(match[1]), parseFloat(match[2]));
    };
    WktParser.prototype.matchCoordinates = function(options) {
      var coordinates = [];
      do {
        var startsWithBracket = this.isMatch(["("]);
        coordinates.push(this.matchCoordinate(options));
        if (startsWithBracket)
          this.expectGroupEnd();
      } while (this.isMatch([","]));
      return coordinates;
    };
    WktParser.prototype.skipWhitespaces = function() {
      while (this.position < this.value.length && this.value[this.position] === " ")
        this.position++;
    };
  }
});

// node_modules/wkx/lib/geometry.js
var require_geometry = __commonJS({
  "node_modules/wkx/lib/geometry.js"(exports, module) {
    module.exports = Geometry;
    var Types = require_types();
    var Point = require_point();
    var LineString = require_linestring();
    var Polygon = require_polygon();
    var MultiPoint = require_multipoint();
    var MultiLineString = require_multilinestring();
    var MultiPolygon = require_multipolygon();
    var GeometryCollection = require_geometrycollection();
    var BinaryReader = require_binaryreader();
    var BinaryWriter = require_binarywriter();
    var WktParser = require_wktparser();
    var ZigZag = require_zigzag();
    function Geometry() {
      this.srid = void 0;
      this.hasZ = false;
      this.hasM = false;
    }
    Geometry.parse = function(value, options) {
      var valueType = typeof value;
      if (valueType === "string" || value instanceof WktParser)
        return Geometry._parseWkt(value);
      else if (Buffer.isBuffer(value) || value instanceof BinaryReader)
        return Geometry._parseWkb(value, options);
      else
        throw new Error("first argument must be a string or Buffer");
    };
    Geometry._parseWkt = function(value) {
      var wktParser, srid;
      if (value instanceof WktParser)
        wktParser = value;
      else
        wktParser = new WktParser(value);
      var match = wktParser.matchRegex([/^SRID=(\d+);/]);
      if (match)
        srid = parseInt(match[1], 10);
      var geometryType = wktParser.matchType();
      var dimension = wktParser.matchDimension();
      var options = {
        srid,
        hasZ: dimension.hasZ,
        hasM: dimension.hasM
      };
      switch (geometryType) {
        case Types.wkt.Point:
          return Point._parseWkt(wktParser, options);
        case Types.wkt.LineString:
          return LineString._parseWkt(wktParser, options);
        case Types.wkt.Polygon:
          return Polygon._parseWkt(wktParser, options);
        case Types.wkt.MultiPoint:
          return MultiPoint._parseWkt(wktParser, options);
        case Types.wkt.MultiLineString:
          return MultiLineString._parseWkt(wktParser, options);
        case Types.wkt.MultiPolygon:
          return MultiPolygon._parseWkt(wktParser, options);
        case Types.wkt.GeometryCollection:
          return GeometryCollection._parseWkt(wktParser, options);
      }
    };
    Geometry._parseWkb = function(value, parentOptions) {
      var binaryReader, wkbType, geometryType, options = {};
      if (value instanceof BinaryReader)
        binaryReader = value;
      else
        binaryReader = new BinaryReader(value);
      binaryReader.isBigEndian = !binaryReader.readInt8();
      wkbType = binaryReader.readUInt32();
      options.hasSrid = (wkbType & 536870912) === 536870912;
      options.isEwkb = wkbType & 536870912 || wkbType & 1073741824 || wkbType & 2147483648;
      if (options.hasSrid)
        options.srid = binaryReader.readUInt32();
      options.hasZ = false;
      options.hasM = false;
      if (!options.isEwkb && (!parentOptions || !parentOptions.isEwkb)) {
        if (wkbType >= 1e3 && wkbType < 2e3) {
          options.hasZ = true;
          geometryType = wkbType - 1e3;
        } else if (wkbType >= 2e3 && wkbType < 3e3) {
          options.hasM = true;
          geometryType = wkbType - 2e3;
        } else if (wkbType >= 3e3 && wkbType < 4e3) {
          options.hasZ = true;
          options.hasM = true;
          geometryType = wkbType - 3e3;
        } else {
          geometryType = wkbType;
        }
      } else {
        if (wkbType & 2147483648)
          options.hasZ = true;
        if (wkbType & 1073741824)
          options.hasM = true;
        geometryType = wkbType & 15;
      }
      switch (geometryType) {
        case Types.wkb.Point:
          return Point._parseWkb(binaryReader, options);
        case Types.wkb.LineString:
          return LineString._parseWkb(binaryReader, options);
        case Types.wkb.Polygon:
          return Polygon._parseWkb(binaryReader, options);
        case Types.wkb.MultiPoint:
          return MultiPoint._parseWkb(binaryReader, options);
        case Types.wkb.MultiLineString:
          return MultiLineString._parseWkb(binaryReader, options);
        case Types.wkb.MultiPolygon:
          return MultiPolygon._parseWkb(binaryReader, options);
        case Types.wkb.GeometryCollection:
          return GeometryCollection._parseWkb(binaryReader, options);
        default:
          throw new Error("GeometryType " + geometryType + " not supported");
      }
    };
    Geometry.parseTwkb = function(value) {
      var binaryReader, options = {};
      if (value instanceof BinaryReader)
        binaryReader = value;
      else
        binaryReader = new BinaryReader(value);
      var type = binaryReader.readUInt8();
      var metadataHeader = binaryReader.readUInt8();
      var geometryType = type & 15;
      options.precision = ZigZag.decode(type >> 4);
      options.precisionFactor = Math.pow(10, options.precision);
      options.hasBoundingBox = metadataHeader >> 0 & 1;
      options.hasSizeAttribute = metadataHeader >> 1 & 1;
      options.hasIdList = metadataHeader >> 2 & 1;
      options.hasExtendedPrecision = metadataHeader >> 3 & 1;
      options.isEmpty = metadataHeader >> 4 & 1;
      if (options.hasExtendedPrecision) {
        var extendedPrecision = binaryReader.readUInt8();
        options.hasZ = (extendedPrecision & 1) === 1;
        options.hasM = (extendedPrecision & 2) === 2;
        options.zPrecision = ZigZag.decode((extendedPrecision & 28) >> 2);
        options.zPrecisionFactor = Math.pow(10, options.zPrecision);
        options.mPrecision = ZigZag.decode((extendedPrecision & 224) >> 5);
        options.mPrecisionFactor = Math.pow(10, options.mPrecision);
      } else {
        options.hasZ = false;
        options.hasM = false;
      }
      if (options.hasSizeAttribute)
        binaryReader.readVarInt();
      if (options.hasBoundingBox) {
        var dimensions = 2;
        if (options.hasZ)
          dimensions++;
        if (options.hasM)
          dimensions++;
        for (var i = 0; i < dimensions; i++) {
          binaryReader.readVarInt();
          binaryReader.readVarInt();
        }
      }
      switch (geometryType) {
        case Types.wkb.Point:
          return Point._parseTwkb(binaryReader, options);
        case Types.wkb.LineString:
          return LineString._parseTwkb(binaryReader, options);
        case Types.wkb.Polygon:
          return Polygon._parseTwkb(binaryReader, options);
        case Types.wkb.MultiPoint:
          return MultiPoint._parseTwkb(binaryReader, options);
        case Types.wkb.MultiLineString:
          return MultiLineString._parseTwkb(binaryReader, options);
        case Types.wkb.MultiPolygon:
          return MultiPolygon._parseTwkb(binaryReader, options);
        case Types.wkb.GeometryCollection:
          return GeometryCollection._parseTwkb(binaryReader, options);
        default:
          throw new Error("GeometryType " + geometryType + " not supported");
      }
    };
    Geometry.parseGeoJSON = function(value) {
      return Geometry._parseGeoJSON(value);
    };
    Geometry._parseGeoJSON = function(value, isSubGeometry) {
      var geometry;
      switch (value.type) {
        case Types.geoJSON.Point:
          geometry = Point._parseGeoJSON(value);
          break;
        case Types.geoJSON.LineString:
          geometry = LineString._parseGeoJSON(value);
          break;
        case Types.geoJSON.Polygon:
          geometry = Polygon._parseGeoJSON(value);
          break;
        case Types.geoJSON.MultiPoint:
          geometry = MultiPoint._parseGeoJSON(value);
          break;
        case Types.geoJSON.MultiLineString:
          geometry = MultiLineString._parseGeoJSON(value);
          break;
        case Types.geoJSON.MultiPolygon:
          geometry = MultiPolygon._parseGeoJSON(value);
          break;
        case Types.geoJSON.GeometryCollection:
          geometry = GeometryCollection._parseGeoJSON(value);
          break;
        default:
          throw new Error("GeometryType " + value.type + " not supported");
      }
      if (value.crs && value.crs.type && value.crs.type === "name" && value.crs.properties && value.crs.properties.name) {
        var crs = value.crs.properties.name;
        if (crs.indexOf("EPSG:") === 0)
          geometry.srid = parseInt(crs.substring(5));
        else if (crs.indexOf("urn:ogc:def:crs:EPSG::") === 0)
          geometry.srid = parseInt(crs.substring(22));
        else
          throw new Error("Unsupported crs: " + crs);
      } else if (!isSubGeometry) {
        geometry.srid = 4326;
      }
      return geometry;
    };
    Geometry.prototype.toEwkt = function() {
      return "SRID=" + this.srid + ";" + this.toWkt();
    };
    Geometry.prototype.toEwkb = function() {
      var ewkb = new BinaryWriter(this._getWkbSize() + 4);
      var wkb = this.toWkb();
      ewkb.writeInt8(1);
      ewkb.writeUInt32LE((wkb.slice(1, 5).readUInt32LE(0) | 536870912) >>> 0, true);
      ewkb.writeUInt32LE(this.srid);
      ewkb.writeBuffer(wkb.slice(5));
      return ewkb.buffer;
    };
    Geometry.prototype._getWktType = function(wktType, isEmpty) {
      var wkt = wktType;
      if (this.hasZ && this.hasM)
        wkt += " ZM ";
      else if (this.hasZ)
        wkt += " Z ";
      else if (this.hasM)
        wkt += " M ";
      if (isEmpty && !this.hasZ && !this.hasM)
        wkt += " ";
      if (isEmpty)
        wkt += "EMPTY";
      return wkt;
    };
    Geometry.prototype._getWktCoordinate = function(point) {
      var coordinates = point.x + " " + point.y;
      if (this.hasZ)
        coordinates += " " + point.z;
      if (this.hasM)
        coordinates += " " + point.m;
      return coordinates;
    };
    Geometry.prototype._writeWkbType = function(wkb, geometryType, parentOptions) {
      var dimensionType = 0;
      if (typeof this.srid === "undefined" && (!parentOptions || typeof parentOptions.srid === "undefined")) {
        if (this.hasZ && this.hasM)
          dimensionType += 3e3;
        else if (this.hasZ)
          dimensionType += 1e3;
        else if (this.hasM)
          dimensionType += 2e3;
      } else {
        if (this.hasZ)
          dimensionType |= 2147483648;
        if (this.hasM)
          dimensionType |= 1073741824;
      }
      wkb.writeUInt32LE(dimensionType + geometryType >>> 0, true);
    };
    Geometry.getTwkbPrecision = function(xyPrecision, zPrecision, mPrecision) {
      return {
        xy: xyPrecision,
        z: zPrecision,
        m: mPrecision,
        xyFactor: Math.pow(10, xyPrecision),
        zFactor: Math.pow(10, zPrecision),
        mFactor: Math.pow(10, mPrecision)
      };
    };
    Geometry.prototype._writeTwkbHeader = function(twkb, geometryType, precision, isEmpty) {
      var type = (ZigZag.encode(precision.xy) << 4) + geometryType;
      var metadataHeader = (this.hasZ || this.hasM) << 3;
      metadataHeader += isEmpty << 4;
      twkb.writeUInt8(type);
      twkb.writeUInt8(metadataHeader);
      if (this.hasZ || this.hasM) {
        var extendedPrecision = 0;
        if (this.hasZ)
          extendedPrecision |= 1;
        if (this.hasM)
          extendedPrecision |= 2;
        twkb.writeUInt8(extendedPrecision);
      }
    };
    Geometry.prototype.toGeoJSON = function(options) {
      var geoJSON = {};
      if (this.srid) {
        if (options) {
          if (options.shortCrs) {
            geoJSON.crs = {
              type: "name",
              properties: {
                name: "EPSG:" + this.srid
              }
            };
          } else if (options.longCrs) {
            geoJSON.crs = {
              type: "name",
              properties: {
                name: "urn:ogc:def:crs:EPSG::" + this.srid
              }
            };
          }
        }
      }
      return geoJSON;
    };
  }
});

// node_modules/wkx/lib/wkx.js
var require_wkx = __commonJS({
  "node_modules/wkx/lib/wkx.js"(exports) {
    exports.Types = require_types();
    exports.Geometry = require_geometry();
    exports.Point = require_point();
    exports.LineString = require_linestring();
    exports.Polygon = require_polygon();
    exports.MultiPoint = require_multipoint();
    exports.MultiLineString = require_multilinestring();
    exports.MultiPolygon = require_multipolygon();
    exports.GeometryCollection = require_geometrycollection();
  }
});

// node_modules/sequelize/lib/errors/base-error.js
var require_base_error = __commonJS({
  "node_modules/sequelize/lib/errors/base-error.js"(exports) {
    var __defProp2 = Object.defineProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    __export(exports, {
      default: () => base_error_default
    });
    var BaseError2 = class extends Error {
      constructor(message) {
        super(message);
        this.name = "SequelizeBaseError";
      }
    };
    var base_error_default = BaseError2;
  }
});

// node_modules/sequelize/lib/errors/database-error.js
var require_database_error = __commonJS({
  "node_modules/sequelize/lib/errors/database-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      default: () => database_error_default
    });
    var import_base_error = __toModule(require_base_error());
    var DatabaseError2 = class extends import_base_error.default {
      constructor(parent, options = {}) {
        super(parent.message);
        __publicField(this, "parent");
        __publicField(this, "original");
        __publicField(this, "sql");
        __publicField(this, "parameters");
        var _a;
        this.name = "SequelizeDatabaseError";
        this.parent = parent;
        this.original = parent;
        this.sql = parent.sql;
        this.parameters = (_a = parent.parameters) != null ? _a : {};
        if (options.stack) {
          this.stack = options.stack;
        }
      }
    };
    var database_error_default = DatabaseError2;
  }
});

// node_modules/sequelize/lib/errors/aggregate-error.js
var require_aggregate_error = __commonJS({
  "node_modules/sequelize/lib/errors/aggregate-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      default: () => aggregate_error_default
    });
    var import_base_error = __toModule(require_base_error());
    var AggregateError2 = class extends import_base_error.default {
      constructor(errors) {
        super();
        __publicField(this, "errors");
        this.errors = errors;
        this.name = "AggregateError";
      }
      toString() {
        const message = `AggregateError of:
${this.errors.map((error) => error === this ? "[Circular AggregateError]" : error instanceof AggregateError2 ? String(error).replace(/\n$/, "").replace(/^/gm, "  ") : String(error).replace(/^/gm, "    ").substring(2)).join("\n")}
`;
        return message;
      }
    };
    var aggregate_error_default = AggregateError2;
  }
});

// node_modules/sequelize/lib/errors/association-error.js
var require_association_error = __commonJS({
  "node_modules/sequelize/lib/errors/association-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => association_error_default
    });
    var import_base_error = __toModule(require_base_error());
    var AssociationError2 = class extends import_base_error.default {
      constructor(message) {
        super(message);
        this.name = "SequelizeAssociationError";
      }
    };
    var association_error_default = AssociationError2;
  }
});

// node_modules/sequelize/lib/errors/bulk-record-error.js
var require_bulk_record_error = __commonJS({
  "node_modules/sequelize/lib/errors/bulk-record-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      default: () => bulk_record_error_default
    });
    var import_base_error = __toModule(require_base_error());
    var BulkRecordError2 = class extends import_base_error.default {
      constructor(error, record) {
        super(error.message);
        __publicField(this, "errors");
        __publicField(this, "record");
        this.name = "SequelizeBulkRecordError";
        this.errors = error;
        this.record = record;
      }
    };
    var bulk_record_error_default = BulkRecordError2;
  }
});

// node_modules/sequelize/lib/errors/connection-error.js
var require_connection_error = __commonJS({
  "node_modules/sequelize/lib/errors/connection-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      default: () => connection_error_default
    });
    var import_base_error = __toModule(require_base_error());
    var ConnectionError2 = class extends import_base_error.default {
      constructor(parent) {
        super(parent ? parent.message : "");
        __publicField(this, "parent");
        __publicField(this, "original");
        this.name = "SequelizeConnectionError";
        this.parent = parent;
        this.original = parent;
      }
    };
    var connection_error_default = ConnectionError2;
  }
});

// node_modules/sequelize/lib/errors/eager-loading-error.js
var require_eager_loading_error = __commonJS({
  "node_modules/sequelize/lib/errors/eager-loading-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => eager_loading_error_default
    });
    var import_base_error = __toModule(require_base_error());
    var EagerLoadingError2 = class extends import_base_error.default {
      constructor(message) {
        super(message);
        this.name = "SequelizeEagerLoadingError";
      }
    };
    var eager_loading_error_default = EagerLoadingError2;
  }
});

// node_modules/sequelize/lib/errors/empty-result-error.js
var require_empty_result_error = __commonJS({
  "node_modules/sequelize/lib/errors/empty-result-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => empty_result_error_default
    });
    var import_base_error = __toModule(require_base_error());
    var EmptyResultError2 = class extends import_base_error.default {
      constructor(message) {
        super(message);
        this.name = "SequelizeEmptyResultError";
      }
    };
    var empty_result_error_default = EmptyResultError2;
  }
});

// node_modules/sequelize/lib/errors/instance-error.js
var require_instance_error = __commonJS({
  "node_modules/sequelize/lib/errors/instance-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => instance_error_default
    });
    var import_base_error = __toModule(require_base_error());
    var InstanceError2 = class extends import_base_error.default {
      constructor(message) {
        super(message);
        this.name = "SequelizeInstanceError";
      }
    };
    var instance_error_default = InstanceError2;
  }
});

// node_modules/sequelize/lib/errors/optimistic-lock-error.js
var require_optimistic_lock_error = __commonJS({
  "node_modules/sequelize/lib/errors/optimistic-lock-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      default: () => optimistic_lock_error_default
    });
    var import_base_error = __toModule(require_base_error());
    var OptimisticLockError2 = class extends import_base_error.default {
      constructor(options) {
        options = options || {};
        options.message = options.message || `Attempting to update a stale model instance: ${options.modelName}`;
        super(options.message);
        __publicField(this, "modelName");
        __publicField(this, "values");
        __publicField(this, "where");
        this.name = "SequelizeOptimisticLockError";
        this.modelName = options.modelName;
        this.values = options.values;
        this.where = options.where;
      }
    };
    var optimistic_lock_error_default = OptimisticLockError2;
  }
});

// node_modules/sequelize/lib/errors/query-error.js
var require_query_error = __commonJS({
  "node_modules/sequelize/lib/errors/query-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => query_error_default
    });
    var import_base_error = __toModule(require_base_error());
    var QueryError2 = class extends import_base_error.default {
      constructor(message) {
        super(message);
        this.name = "SequelizeQueryError";
      }
    };
    var query_error_default = QueryError2;
  }
});

// node_modules/sequelize/lib/errors/sequelize-scope-error.js
var require_sequelize_scope_error = __commonJS({
  "node_modules/sequelize/lib/errors/sequelize-scope-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => sequelize_scope_error_default
    });
    var import_base_error = __toModule(require_base_error());
    var SequelizeScopeError2 = class extends import_base_error.default {
      constructor(message) {
        super(message);
        this.name = "SequelizeScopeError";
      }
    };
    var sequelize_scope_error_default = SequelizeScopeError2;
  }
});

// node_modules/sequelize/lib/errors/validation-error.js
var require_validation_error = __commonJS({
  "node_modules/sequelize/lib/errors/validation-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      ValidationErrorItem: () => ValidationErrorItem2,
      ValidationErrorItemOrigin: () => ValidationErrorItemOrigin2,
      ValidationErrorItemType: () => ValidationErrorItemType2,
      default: () => validation_error_default
    });
    var import_base_error = __toModule(require_base_error());
    var ValidationErrorItemType2 = /* @__PURE__ */ ((ValidationErrorItemType22) => {
      ValidationErrorItemType22["notnull violation"] = "CORE";
      ValidationErrorItemType22["string violation"] = "CORE";
      ValidationErrorItemType22["unique violation"] = "DB";
      ValidationErrorItemType22["validation error"] = "FUNCTION";
      return ValidationErrorItemType22;
    })(ValidationErrorItemType2 || {});
    var ValidationErrorItemOrigin2 = /* @__PURE__ */ ((ValidationErrorItemOrigin22) => {
      ValidationErrorItemOrigin22["CORE"] = "CORE";
      ValidationErrorItemOrigin22["DB"] = "DB";
      ValidationErrorItemOrigin22["FUNCTION"] = "FUNCTION";
      return ValidationErrorItemOrigin22;
    })(ValidationErrorItemOrigin2 || {});
    var ValidationErrorItem2 = class {
      constructor(message, type, path, value, instance, validatorKey, fnName, fnArgs) {
        __publicField(this, "message");
        __publicField(this, "type");
        __publicField(this, "path");
        __publicField(this, "value");
        __publicField(this, "origin");
        __publicField(this, "instance");
        __publicField(this, "validatorKey");
        __publicField(this, "validatorName");
        __publicField(this, "validatorArgs");
        this.message = message || "";
        this.type = null;
        this.path = path || null;
        this.value = value !== void 0 ? value : null;
        this.origin = null;
        this.instance = instance || null;
        this.validatorKey = validatorKey || null;
        this.validatorName = fnName || null;
        this.validatorArgs = fnArgs || [];
        if (type) {
          if (this.isValidationErrorItemOrigin(type)) {
            this.origin = type;
          } else {
            const lowercaseType = this.normalizeString(type);
            const realType = ValidationErrorItemType2[lowercaseType];
            if (realType && ValidationErrorItemOrigin2[realType]) {
              this.origin = realType;
              this.type = type;
            }
          }
        }
      }
      isValidationErrorItemOrigin(origin) {
        return ValidationErrorItemOrigin2[origin] !== void 0;
      }
      normalizeString(str) {
        return str.toLowerCase().trim();
      }
      getValidatorKey(useTypeAsNS, NSSeparator) {
        const useTANS = useTypeAsNS === void 0 || !!useTypeAsNS;
        const NSSep = NSSeparator === void 0 ? "." : NSSeparator;
        const type = this.origin;
        const key = this.validatorKey || this.validatorName;
        const useNS = useTANS && type && ValidationErrorItemOrigin2[type];
        if (useNS && (typeof NSSep !== "string" || !NSSep.length)) {
          throw new Error("Invalid namespace separator given, must be a non-empty string");
        }
        if (!(typeof key === "string" && key.length)) {
          return "";
        }
        return (useNS ? [this.origin, key].join(NSSep) : key).toLowerCase().trim();
      }
    };
    __publicField(ValidationErrorItem2, "TypeStringMap", ValidationErrorItemType2);
    __publicField(ValidationErrorItem2, "Origins", ValidationErrorItemOrigin2);
    var ValidationError2 = class extends import_base_error.default {
      constructor(message, errors, options = {}) {
        super(message);
        __publicField(this, "errors");
        this.name = "SequelizeValidationError";
        this.message = "Validation Error";
        this.errors = errors || [];
        if (message) {
          this.message = message;
        } else if (this.errors.length > 0 && this.errors[0].message) {
          this.message = this.errors.map((err) => `${err.type || err.origin}: ${err.message}`).join(",\n");
        }
        if (options.stack) {
          this.stack = options.stack;
        }
      }
      get(path) {
        return this.errors.reduce((reduced, error) => {
          if (error.path === path) {
            reduced.push(error);
          }
          return reduced;
        }, []);
      }
    };
    var validation_error_default = ValidationError2;
  }
});

// node_modules/sequelize/lib/errors/connection/access-denied-error.js
var require_access_denied_error = __commonJS({
  "node_modules/sequelize/lib/errors/connection/access-denied-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => access_denied_error_default
    });
    var import_connection_error = __toModule(require_connection_error());
    var AccessDeniedError2 = class extends import_connection_error.default {
      constructor(parent) {
        super(parent);
        this.name = "SequelizeAccessDeniedError";
      }
    };
    var access_denied_error_default = AccessDeniedError2;
  }
});

// node_modules/sequelize/lib/errors/connection/connection-acquire-timeout-error.js
var require_connection_acquire_timeout_error = __commonJS({
  "node_modules/sequelize/lib/errors/connection/connection-acquire-timeout-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => connection_acquire_timeout_error_default
    });
    var import_connection_error = __toModule(require_connection_error());
    var ConnectionAcquireTimeoutError2 = class extends import_connection_error.default {
      constructor(parent) {
        super(parent);
        this.name = "SequelizeConnectionAcquireTimeoutError";
      }
    };
    var connection_acquire_timeout_error_default = ConnectionAcquireTimeoutError2;
  }
});

// node_modules/sequelize/lib/errors/connection/connection-refused-error.js
var require_connection_refused_error = __commonJS({
  "node_modules/sequelize/lib/errors/connection/connection-refused-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => connection_refused_error_default
    });
    var import_connection_error = __toModule(require_connection_error());
    var ConnectionRefusedError2 = class extends import_connection_error.default {
      constructor(parent) {
        super(parent);
        this.name = "SequelizeConnectionRefusedError";
      }
    };
    var connection_refused_error_default = ConnectionRefusedError2;
  }
});

// node_modules/sequelize/lib/errors/connection/connection-timed-out-error.js
var require_connection_timed_out_error = __commonJS({
  "node_modules/sequelize/lib/errors/connection/connection-timed-out-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => connection_timed_out_error_default
    });
    var import_connection_error = __toModule(require_connection_error());
    var ConnectionTimedOutError2 = class extends import_connection_error.default {
      constructor(parent) {
        super(parent);
        this.name = "SequelizeConnectionTimedOutError";
      }
    };
    var connection_timed_out_error_default = ConnectionTimedOutError2;
  }
});

// node_modules/sequelize/lib/errors/connection/host-not-found-error.js
var require_host_not_found_error = __commonJS({
  "node_modules/sequelize/lib/errors/connection/host-not-found-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => host_not_found_error_default
    });
    var import_connection_error = __toModule(require_connection_error());
    var HostNotFoundError2 = class extends import_connection_error.default {
      constructor(parent) {
        super(parent);
        this.name = "SequelizeHostNotFoundError";
      }
    };
    var host_not_found_error_default = HostNotFoundError2;
  }
});

// node_modules/sequelize/lib/errors/connection/host-not-reachable-error.js
var require_host_not_reachable_error = __commonJS({
  "node_modules/sequelize/lib/errors/connection/host-not-reachable-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => host_not_reachable_error_default
    });
    var import_connection_error = __toModule(require_connection_error());
    var HostNotReachableError2 = class extends import_connection_error.default {
      constructor(parent) {
        super(parent);
        this.name = "SequelizeHostNotReachableError";
      }
    };
    var host_not_reachable_error_default = HostNotReachableError2;
  }
});

// node_modules/sequelize/lib/errors/connection/invalid-connection-error.js
var require_invalid_connection_error = __commonJS({
  "node_modules/sequelize/lib/errors/connection/invalid-connection-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => invalid_connection_error_default
    });
    var import_connection_error = __toModule(require_connection_error());
    var InvalidConnectionError2 = class extends import_connection_error.default {
      constructor(parent) {
        super(parent);
        this.name = "SequelizeInvalidConnectionError";
      }
    };
    var invalid_connection_error_default = InvalidConnectionError2;
  }
});

// node_modules/sequelize/lib/errors/database/exclusion-constraint-error.js
var require_exclusion_constraint_error = __commonJS({
  "node_modules/sequelize/lib/errors/database/exclusion-constraint-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      default: () => exclusion_constraint_error_default
    });
    var import_database_error = __toModule(require_database_error());
    var ExclusionConstraintError2 = class extends import_database_error.default {
      constructor(options) {
        options = options || {};
        options.parent = options.parent || { sql: "", name: "", message: "" };
        super(options.parent, { stack: options.stack });
        __publicField(this, "constraint");
        __publicField(this, "fields");
        __publicField(this, "table");
        this.name = "SequelizeExclusionConstraintError";
        this.message = options.message || options.parent.message || "";
        this.constraint = options.constraint;
        this.fields = options.fields;
        this.table = options.table;
      }
    };
    var exclusion_constraint_error_default = ExclusionConstraintError2;
  }
});

// node_modules/sequelize/lib/errors/database/foreign-key-constraint-error.js
var require_foreign_key_constraint_error = __commonJS({
  "node_modules/sequelize/lib/errors/database/foreign-key-constraint-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      RelationshipType: () => RelationshipType,
      default: () => foreign_key_constraint_error_default
    });
    var import_database_error = __toModule(require_database_error());
    var RelationshipType = /* @__PURE__ */ ((RelationshipType2) => {
      RelationshipType2["parent"] = "parent";
      RelationshipType2["child"] = "child";
      return RelationshipType2;
    })(RelationshipType || {});
    var ForeignKeyConstraintError2 = class extends import_database_error.default {
      constructor(options) {
        options = options || {};
        options.parent = options.parent || { sql: "", name: "", message: "" };
        super(options.parent, { stack: options.stack });
        __publicField(this, "table");
        __publicField(this, "fields");
        __publicField(this, "value");
        __publicField(this, "index");
        __publicField(this, "reltype");
        this.name = "SequelizeForeignKeyConstraintError";
        this.message = options.message || options.parent.message || "Database Error";
        this.fields = options.fields;
        this.table = options.table;
        this.value = options.value;
        this.index = options.index;
        this.reltype = options.reltype;
      }
    };
    var foreign_key_constraint_error_default = ForeignKeyConstraintError2;
  }
});

// node_modules/sequelize/lib/errors/database/timeout-error.js
var require_timeout_error = __commonJS({
  "node_modules/sequelize/lib/errors/database/timeout-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      default: () => timeout_error_default
    });
    var import_database_error = __toModule(require_database_error());
    var TimeoutError2 = class extends import_database_error.default {
      constructor(parent, options = {}) {
        super(parent, options);
        this.name = "SequelizeTimeoutError";
      }
    };
    var timeout_error_default = TimeoutError2;
  }
});

// node_modules/sequelize/lib/errors/database/unknown-constraint-error.js
var require_unknown_constraint_error = __commonJS({
  "node_modules/sequelize/lib/errors/database/unknown-constraint-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      default: () => unknown_constraint_error_default
    });
    var import_database_error = __toModule(require_database_error());
    var UnknownConstraintError2 = class extends import_database_error.default {
      constructor(options) {
        options = options || {};
        options.parent = options.parent || { sql: "", name: "", message: "" };
        super(options.parent, { stack: options.stack });
        __publicField(this, "constraint");
        __publicField(this, "fields");
        __publicField(this, "table");
        this.name = "SequelizeUnknownConstraintError";
        this.message = options.message || "The specified constraint does not exist";
        this.constraint = options.constraint;
        this.fields = options.fields;
        this.table = options.table;
      }
    };
    var unknown_constraint_error_default = UnknownConstraintError2;
  }
});

// node_modules/sequelize/lib/errors/validation/unique-constraint-error.js
var require_unique_constraint_error = __commonJS({
  "node_modules/sequelize/lib/errors/validation/unique-constraint-error.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      default: () => unique_constraint_error_default
    });
    var import_validation_error = __toModule(require_validation_error());
    var UniqueConstraintError2 = class extends import_validation_error.default {
      constructor(options) {
        var _a, _b, _c;
        options = options != null ? options : {};
        options.parent = (_a = options.parent) != null ? _a : { sql: "", name: "", message: "" };
        options.message = options.message || options.parent.message || "Validation Error";
        options.errors = (_b = options.errors) != null ? _b : [];
        super(options.message, options.errors, { stack: options.stack });
        __publicField(this, "parent");
        __publicField(this, "original");
        __publicField(this, "fields");
        __publicField(this, "sql");
        this.name = "SequelizeUniqueConstraintError";
        this.fields = (_c = options.fields) != null ? _c : {};
        this.parent = options.parent;
        this.original = options.parent;
        this.sql = options.parent.sql;
      }
    };
    var unique_constraint_error_default = UniqueConstraintError2;
  }
});

// node_modules/sequelize/lib/dialects/mssql/async-queue.js
var require_async_queue = __commonJS({
  "node_modules/sequelize/lib/dialects/mssql/async-queue.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      AsyncQueueError: () => AsyncQueueError2,
      default: () => async_queue_default
    });
    var import_base_error = __toModule(require_base_error());
    var import_connection_error = __toModule(require_connection_error());
    var AsyncQueueError2 = class extends import_base_error.default {
      constructor(message) {
        super(message);
        this.name = "SequelizeAsyncQueueError";
      }
    };
    var AsyncQueue = class {
      constructor() {
        __publicField(this, "previous");
        __publicField(this, "closed");
        __publicField(this, "rejectCurrent");
        this.previous = Promise.resolve();
        this.closed = false;
        this.rejectCurrent = () => {
        };
      }
      close() {
        this.closed = true;
        this.rejectCurrent(new import_connection_error.default(new AsyncQueueError2("the connection was closed before this query could finish executing")));
      }
      enqueue(asyncFunction) {
        return new Promise((resolve, reject) => {
          this.previous = this.previous.then(() => {
            this.rejectCurrent = reject;
            if (this.closed) {
              return reject(new import_connection_error.default(new AsyncQueueError2("the connection was closed before this query could be executed")));
            }
            return asyncFunction().then(resolve, reject);
          });
        });
      }
    };
    var async_queue_default = AsyncQueue;
  }
});

// node_modules/sequelize/lib/errors/index.js
var require_errors = __commonJS({
  "node_modules/sequelize/lib/errors/index.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      AccessDeniedError: () => import_access_denied_error.default,
      AggregateError: () => import_aggregate_error.default,
      AssociationError: () => import_association_error.default,
      AsyncQueueError: () => import_async_queue.AsyncQueueError,
      BaseError: () => import_base_error.default,
      BulkRecordError: () => import_bulk_record_error.default,
      ConnectionAcquireTimeoutError: () => import_connection_acquire_timeout_error.default,
      ConnectionError: () => import_connection_error.default,
      ConnectionRefusedError: () => import_connection_refused_error.default,
      ConnectionTimedOutError: () => import_connection_timed_out_error.default,
      DatabaseError: () => import_database_error.default,
      EagerLoadingError: () => import_eager_loading_error.default,
      EmptyResultError: () => import_empty_result_error.default,
      ExclusionConstraintError: () => import_exclusion_constraint_error.default,
      ForeignKeyConstraintError: () => import_foreign_key_constraint_error.default,
      HostNotFoundError: () => import_host_not_found_error.default,
      HostNotReachableError: () => import_host_not_reachable_error.default,
      InstanceError: () => import_instance_error.default,
      InvalidConnectionError: () => import_invalid_connection_error.default,
      OptimisticLockError: () => import_optimistic_lock_error.default,
      QueryError: () => import_query_error.default,
      SequelizeScopeError: () => import_sequelize_scope_error.default,
      TimeoutError: () => import_timeout_error.default,
      UniqueConstraintError: () => import_unique_constraint_error.default,
      UnknownConstraintError: () => import_unknown_constraint_error.default,
      ValidationError: () => import_validation_error.default,
      ValidationErrorItem: () => import_validation_error.ValidationErrorItem,
      ValidationErrorItemOrigin: () => import_validation_error.ValidationErrorItemOrigin,
      ValidationErrorItemType: () => import_validation_error.ValidationErrorItemType
    });
    var import_base_error = __toModule(require_base_error());
    var import_database_error = __toModule(require_database_error());
    var import_aggregate_error = __toModule(require_aggregate_error());
    var import_association_error = __toModule(require_association_error());
    var import_bulk_record_error = __toModule(require_bulk_record_error());
    var import_connection_error = __toModule(require_connection_error());
    var import_eager_loading_error = __toModule(require_eager_loading_error());
    var import_empty_result_error = __toModule(require_empty_result_error());
    var import_instance_error = __toModule(require_instance_error());
    var import_optimistic_lock_error = __toModule(require_optimistic_lock_error());
    var import_query_error = __toModule(require_query_error());
    var import_sequelize_scope_error = __toModule(require_sequelize_scope_error());
    var import_validation_error = __toModule(require_validation_error());
    var import_access_denied_error = __toModule(require_access_denied_error());
    var import_connection_acquire_timeout_error = __toModule(require_connection_acquire_timeout_error());
    var import_connection_refused_error = __toModule(require_connection_refused_error());
    var import_connection_timed_out_error = __toModule(require_connection_timed_out_error());
    var import_host_not_found_error = __toModule(require_host_not_found_error());
    var import_host_not_reachable_error = __toModule(require_host_not_reachable_error());
    var import_invalid_connection_error = __toModule(require_invalid_connection_error());
    var import_exclusion_constraint_error = __toModule(require_exclusion_constraint_error());
    var import_foreign_key_constraint_error = __toModule(require_foreign_key_constraint_error());
    var import_timeout_error = __toModule(require_timeout_error());
    var import_unknown_constraint_error = __toModule(require_unknown_constraint_error());
    var import_unique_constraint_error = __toModule(require_unique_constraint_error());
    var import_async_queue = __toModule(require_async_queue());
  }
});

// node_modules/validator/lib/util/assertString.js
var require_assertString = __commonJS({
  "node_modules/validator/lib/util/assertString.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = assertString;
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function assertString(input) {
      var isString = typeof input === "string" || input instanceof String;
      if (!isString) {
        var invalidType = _typeof(input);
        if (input === null)
          invalidType = "null";
        else if (invalidType === "object")
          invalidType = input.constructor.name;
        throw new TypeError("Expected a string but received a ".concat(invalidType));
      }
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/toDate.js
var require_toDate = __commonJS({
  "node_modules/validator/lib/toDate.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toDate;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function toDate(date) {
      (0, _assertString.default)(date);
      date = Date.parse(date);
      return !isNaN(date) ? new Date(date) : null;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/alpha.js
var require_alpha = __commonJS({
  "node_modules/validator/lib/alpha.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.commaDecimal = exports.dotDecimal = exports.farsiLocales = exports.arabicLocales = exports.englishLocales = exports.decimal = exports.alphanumeric = exports.alpha = void 0;
    var alpha = {
      "en-US": /^[A-Z]+$/i,
      "az-AZ": /^[A-VXYZÇƏĞİıÖŞÜ]+$/i,
      "bg-BG": /^[А-Я]+$/i,
      "cs-CZ": /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
      "da-DK": /^[A-ZÆØÅ]+$/i,
      "de-DE": /^[A-ZÄÖÜß]+$/i,
      "el-GR": /^[Α-ώ]+$/i,
      "es-ES": /^[A-ZÁÉÍÑÓÚÜ]+$/i,
      "fa-IR": /^[ابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$/i,
      "fi-FI": /^[A-ZÅÄÖ]+$/i,
      "fr-FR": /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
      "it-IT": /^[A-ZÀÉÈÌÎÓÒÙ]+$/i,
      "nb-NO": /^[A-ZÆØÅ]+$/i,
      "nl-NL": /^[A-ZÁÉËÏÓÖÜÚ]+$/i,
      "nn-NO": /^[A-ZÆØÅ]+$/i,
      "hu-HU": /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
      "pl-PL": /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
      "pt-PT": /^[A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,
      "ru-RU": /^[А-ЯЁ]+$/i,
      "sl-SI": /^[A-ZČĆĐŠŽ]+$/i,
      "sk-SK": /^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
      "sr-RS@latin": /^[A-ZČĆŽŠĐ]+$/i,
      "sr-RS": /^[А-ЯЂЈЉЊЋЏ]+$/i,
      "sv-SE": /^[A-ZÅÄÖ]+$/i,
      "th-TH": /^[ก-๐\s]+$/i,
      "tr-TR": /^[A-ZÇĞİıÖŞÜ]+$/i,
      "uk-UA": /^[А-ЩЬЮЯЄIЇҐі]+$/i,
      "vi-VN": /^[A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,
      "ku-IQ": /^[ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
      ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,
      he: /^[א-ת]+$/,
      fa: /^['آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی']+$/i,
      "hi-IN": /^[\u0900-\u0961]+[\u0972-\u097F]*$/i
    };
    exports.alpha = alpha;
    var alphanumeric = {
      "en-US": /^[0-9A-Z]+$/i,
      "az-AZ": /^[0-9A-VXYZÇƏĞİıÖŞÜ]+$/i,
      "bg-BG": /^[0-9А-Я]+$/i,
      "cs-CZ": /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
      "da-DK": /^[0-9A-ZÆØÅ]+$/i,
      "de-DE": /^[0-9A-ZÄÖÜß]+$/i,
      "el-GR": /^[0-9Α-ω]+$/i,
      "es-ES": /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,
      "fi-FI": /^[0-9A-ZÅÄÖ]+$/i,
      "fr-FR": /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
      "it-IT": /^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,
      "hu-HU": /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
      "nb-NO": /^[0-9A-ZÆØÅ]+$/i,
      "nl-NL": /^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,
      "nn-NO": /^[0-9A-ZÆØÅ]+$/i,
      "pl-PL": /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
      "pt-PT": /^[0-9A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,
      "ru-RU": /^[0-9А-ЯЁ]+$/i,
      "sl-SI": /^[0-9A-ZČĆĐŠŽ]+$/i,
      "sk-SK": /^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
      "sr-RS@latin": /^[0-9A-ZČĆŽŠĐ]+$/i,
      "sr-RS": /^[0-9А-ЯЂЈЉЊЋЏ]+$/i,
      "sv-SE": /^[0-9A-ZÅÄÖ]+$/i,
      "th-TH": /^[ก-๙\s]+$/i,
      "tr-TR": /^[0-9A-ZÇĞİıÖŞÜ]+$/i,
      "uk-UA": /^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,
      "ku-IQ": /^[٠١٢٣٤٥٦٧٨٩0-9ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
      "vi-VN": /^[0-9A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,
      ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,
      he: /^[0-9א-ת]+$/,
      fa: /^['0-9آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی۱۲۳۴۵۶۷۸۹۰']+$/i,
      "hi-IN": /^[\u0900-\u0963]+[\u0966-\u097F]*$/i
    };
    exports.alphanumeric = alphanumeric;
    var decimal = {
      "en-US": ".",
      ar: "\u066B"
    };
    exports.decimal = decimal;
    var englishLocales = ["AU", "GB", "HK", "IN", "NZ", "ZA", "ZM"];
    exports.englishLocales = englishLocales;
    for (i = 0; i < englishLocales.length; i++) {
      locale = "en-".concat(englishLocales[i]);
      alpha[locale] = alpha["en-US"];
      alphanumeric[locale] = alphanumeric["en-US"];
      decimal[locale] = decimal["en-US"];
    }
    var locale;
    var i;
    var arabicLocales = ["AE", "BH", "DZ", "EG", "IQ", "JO", "KW", "LB", "LY", "MA", "QM", "QA", "SA", "SD", "SY", "TN", "YE"];
    exports.arabicLocales = arabicLocales;
    for (_i = 0; _i < arabicLocales.length; _i++) {
      _locale = "ar-".concat(arabicLocales[_i]);
      alpha[_locale] = alpha.ar;
      alphanumeric[_locale] = alphanumeric.ar;
      decimal[_locale] = decimal.ar;
    }
    var _locale;
    var _i;
    var farsiLocales = ["IR", "AF"];
    exports.farsiLocales = farsiLocales;
    for (_i2 = 0; _i2 < farsiLocales.length; _i2++) {
      _locale2 = "fa-".concat(farsiLocales[_i2]);
      alphanumeric[_locale2] = alphanumeric.fa;
      decimal[_locale2] = decimal.ar;
    }
    var _locale2;
    var _i2;
    var dotDecimal = ["ar-EG", "ar-LB", "ar-LY"];
    exports.dotDecimal = dotDecimal;
    var commaDecimal = ["bg-BG", "cs-CZ", "da-DK", "de-DE", "el-GR", "en-ZM", "es-ES", "fr-CA", "fr-FR", "id-ID", "it-IT", "ku-IQ", "hi-IN", "hu-HU", "nb-NO", "nn-NO", "nl-NL", "pl-PL", "pt-PT", "ru-RU", "sl-SI", "sr-RS@latin", "sr-RS", "sv-SE", "tr-TR", "uk-UA", "vi-VN"];
    exports.commaDecimal = commaDecimal;
    for (_i3 = 0; _i3 < dotDecimal.length; _i3++) {
      decimal[dotDecimal[_i3]] = decimal["en-US"];
    }
    var _i3;
    for (_i4 = 0; _i4 < commaDecimal.length; _i4++) {
      decimal[commaDecimal[_i4]] = ",";
    }
    var _i4;
    alpha["fr-CA"] = alpha["fr-FR"];
    alphanumeric["fr-CA"] = alphanumeric["fr-FR"];
    alpha["pt-BR"] = alpha["pt-PT"];
    alphanumeric["pt-BR"] = alphanumeric["pt-PT"];
    decimal["pt-BR"] = decimal["pt-PT"];
    alpha["pl-Pl"] = alpha["pl-PL"];
    alphanumeric["pl-Pl"] = alphanumeric["pl-PL"];
    decimal["pl-Pl"] = decimal["pl-PL"];
    alpha["fa-AF"] = alpha.fa;
  }
});

// node_modules/validator/lib/isFloat.js
var require_isFloat = __commonJS({
  "node_modules/validator/lib/isFloat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isFloat;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    var _alpha = require_alpha();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isFloat(str, options) {
      (0, _assertString.default)(str);
      options = options || {};
      var float = new RegExp("^(?:[-+])?(?:[0-9]+)?(?:\\".concat(options.locale ? _alpha.decimal[options.locale] : ".", "[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$"));
      if (str === "" || str === "." || str === "-" || str === "+") {
        return false;
      }
      var value = parseFloat(str.replace(",", "."));
      return float.test(str) && (!options.hasOwnProperty("min") || value >= options.min) && (!options.hasOwnProperty("max") || value <= options.max) && (!options.hasOwnProperty("lt") || value < options.lt) && (!options.hasOwnProperty("gt") || value > options.gt);
    }
    var locales = Object.keys(_alpha.decimal);
    exports.locales = locales;
  }
});

// node_modules/validator/lib/toFloat.js
var require_toFloat = __commonJS({
  "node_modules/validator/lib/toFloat.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toFloat;
    var _isFloat = _interopRequireDefault(require_isFloat());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function toFloat(str) {
      if (!(0, _isFloat.default)(str))
        return NaN;
      return parseFloat(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/toInt.js
var require_toInt = __commonJS({
  "node_modules/validator/lib/toInt.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toInt;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function toInt(str, radix) {
      (0, _assertString.default)(str);
      return parseInt(str, radix || 10);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/toBoolean.js
var require_toBoolean = __commonJS({
  "node_modules/validator/lib/toBoolean.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toBoolean;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function toBoolean(str, strict) {
      (0, _assertString.default)(str);
      if (strict) {
        return str === "1" || /^true$/i.test(str);
      }
      return str !== "0" && !/^false$/i.test(str) && str !== "";
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/equals.js
var require_equals = __commonJS({
  "node_modules/validator/lib/equals.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = equals;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function equals(str, comparison) {
      (0, _assertString.default)(str);
      return str === comparison;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/toString.js
var require_toString = __commonJS({
  "node_modules/validator/lib/util/toString.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toString2;
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function toString2(input) {
      if (_typeof(input) === "object" && input !== null) {
        if (typeof input.toString === "function") {
          input = input.toString();
        } else {
          input = "[object Object]";
        }
      } else if (input === null || typeof input === "undefined" || isNaN(input) && !input.length) {
        input = "";
      }
      return String(input);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/merge.js
var require_merge = __commonJS({
  "node_modules/validator/lib/util/merge.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = merge;
    function merge() {
      var obj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var defaults = arguments.length > 1 ? arguments[1] : void 0;
      for (var key in defaults) {
        if (typeof obj[key] === "undefined") {
          obj[key] = defaults[key];
        }
      }
      return obj;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/contains.js
var require_contains = __commonJS({
  "node_modules/validator/lib/contains.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = contains;
    var _assertString = _interopRequireDefault(require_assertString());
    var _toString = _interopRequireDefault(require_toString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var defaulContainsOptions = {
      ignoreCase: false,
      minOccurrences: 1
    };
    function contains(str, elem, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, defaulContainsOptions);
      if (options.ignoreCase) {
        return str.toLowerCase().split((0, _toString.default)(elem).toLowerCase()).length > options.minOccurrences;
      }
      return str.split((0, _toString.default)(elem)).length > options.minOccurrences;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/matches.js
var require_matches = __commonJS({
  "node_modules/validator/lib/matches.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = matches;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function matches(str, pattern, modifiers) {
      (0, _assertString.default)(str);
      if (Object.prototype.toString.call(pattern) !== "[object RegExp]") {
        pattern = new RegExp(pattern, modifiers);
      }
      return pattern.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isByteLength.js
var require_isByteLength = __commonJS({
  "node_modules/validator/lib/isByteLength.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isByteLength;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function isByteLength(str, options) {
      (0, _assertString.default)(str);
      var min;
      var max;
      if (_typeof(options) === "object") {
        min = options.min || 0;
        max = options.max;
      } else {
        min = arguments[1];
        max = arguments[2];
      }
      var len = encodeURI(str).split(/%..|./).length - 1;
      return len >= min && (typeof max === "undefined" || len <= max);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isFQDN.js
var require_isFQDN = __commonJS({
  "node_modules/validator/lib/isFQDN.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isFQDN;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var default_fqdn_options = {
      require_tld: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_numeric_tld: false,
      allow_wildcard: false
    };
    function isFQDN(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_fqdn_options);
      if (options.allow_trailing_dot && str[str.length - 1] === ".") {
        str = str.substring(0, str.length - 1);
      }
      if (options.allow_wildcard === true && str.indexOf("*.") === 0) {
        str = str.substring(2);
      }
      var parts = str.split(".");
      var tld = parts[parts.length - 1];
      if (options.require_tld) {
        if (parts.length < 2) {
          return false;
        }
        if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
          return false;
        }
        if (/\s/.test(tld)) {
          return false;
        }
      }
      if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
        return false;
      }
      return parts.every(function(part) {
        if (part.length > 63) {
          return false;
        }
        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
          return false;
        }
        if (/[\uff01-\uff5e]/.test(part)) {
          return false;
        }
        if (/^-|-$/.test(part)) {
          return false;
        }
        if (!options.allow_underscores && /_/.test(part)) {
          return false;
        }
        return true;
      });
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIP.js
var require_isIP = __commonJS({
  "node_modules/validator/lib/isIP.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIP;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var IPv4SegmentFormat = "(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
    var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
    var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
    var IPv6SegmentFormat = "(?:[0-9a-fA-F]{1,4})";
    var IPv6AddressRegExp = new RegExp("^(" + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ")(%[0-9a-zA-Z-.:]{1,})?$");
    function isIP(str) {
      var version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      (0, _assertString.default)(str);
      version = String(version);
      if (!version) {
        return isIP(str, 4) || isIP(str, 6);
      }
      if (version === "4") {
        if (!IPv4AddressRegExp.test(str)) {
          return false;
        }
        var parts = str.split(".").sort(function(a, b) {
          return a - b;
        });
        return parts[3] <= 255;
      }
      if (version === "6") {
        return !!IPv6AddressRegExp.test(str);
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isEmail.js
var require_isEmail = __commonJS({
  "node_modules/validator/lib/isEmail.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isEmail;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    var _isByteLength = _interopRequireDefault(require_isByteLength());
    var _isFQDN = _interopRequireDefault(require_isFQDN());
    var _isIP = _interopRequireDefault(require_isIP());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var default_email_options = {
      allow_display_name: false,
      require_display_name: false,
      allow_utf8_local_part: true,
      require_tld: true,
      blacklisted_chars: "",
      ignore_max_length: false,
      host_blacklist: []
    };
    var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
    var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
    var gmailUserPart = /^[a-z\d]+$/;
    var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
    var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
    var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
    var defaultMaxEmailLength = 254;
    function validateDisplayName(display_name) {
      var display_name_without_quotes = display_name.replace(/^"(.+)"$/, "$1");
      if (!display_name_without_quotes.trim()) {
        return false;
      }
      var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);
      if (contains_illegal) {
        if (display_name_without_quotes === display_name) {
          return false;
        }
        var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;
        if (!all_start_with_back_slash) {
          return false;
        }
      }
      return true;
    }
    function isEmail(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_email_options);
      if (options.require_display_name || options.allow_display_name) {
        var display_email = str.match(splitNameAddress);
        if (display_email) {
          var display_name = display_email[1];
          str = str.replace(display_name, "").replace(/(^<|>$)/g, "");
          if (display_name.endsWith(" ")) {
            display_name = display_name.substr(0, display_name.length - 1);
          }
          if (!validateDisplayName(display_name)) {
            return false;
          }
        } else if (options.require_display_name) {
          return false;
        }
      }
      if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
        return false;
      }
      var parts = str.split("@");
      var domain = parts.pop();
      var lower_domain = domain.toLowerCase();
      if (options.host_blacklist.includes(lower_domain)) {
        return false;
      }
      var user = parts.join("@");
      if (options.domain_specific_validation && (lower_domain === "gmail.com" || lower_domain === "googlemail.com")) {
        user = user.toLowerCase();
        var username = user.split("+")[0];
        if (!(0, _isByteLength.default)(username.replace(/\./g, ""), {
          min: 6,
          max: 30
        })) {
          return false;
        }
        var _user_parts = username.split(".");
        for (var i = 0; i < _user_parts.length; i++) {
          if (!gmailUserPart.test(_user_parts[i])) {
            return false;
          }
        }
      }
      if (options.ignore_max_length === false && (!(0, _isByteLength.default)(user, {
        max: 64
      }) || !(0, _isByteLength.default)(domain, {
        max: 254
      }))) {
        return false;
      }
      if (!(0, _isFQDN.default)(domain, {
        require_tld: options.require_tld
      })) {
        if (!options.allow_ip_domain) {
          return false;
        }
        if (!(0, _isIP.default)(domain)) {
          if (!domain.startsWith("[") || !domain.endsWith("]")) {
            return false;
          }
          var noBracketdomain = domain.substr(1, domain.length - 2);
          if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {
            return false;
          }
        }
      }
      if (user[0] === '"') {
        user = user.slice(1, user.length - 1);
        return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
      }
      var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
      var user_parts = user.split(".");
      for (var _i = 0; _i < user_parts.length; _i++) {
        if (!pattern.test(user_parts[_i])) {
          return false;
        }
      }
      if (options.blacklisted_chars) {
        if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), "g")) !== -1)
          return false;
      }
      return true;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isURL.js
var require_isURL = __commonJS({
  "node_modules/validator/lib/isURL.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isURL;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isFQDN = _interopRequireDefault(require_isFQDN());
    var _isIP = _interopRequireDefault(require_isIP());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var default_url_options = {
      protocols: ["http", "https", "ftp"],
      require_tld: true,
      require_protocol: false,
      require_host: true,
      require_port: false,
      require_valid_protocol: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_protocol_relative_urls: false,
      allow_fragments: true,
      allow_query_components: true,
      validate_length: true
    };
    var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;
    function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    }
    function checkHost(host, matches) {
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];
        if (host === match || isRegExp(match) && match.test(host)) {
          return true;
        }
      }
      return false;
    }
    function isURL(url, options) {
      (0, _assertString.default)(url);
      if (!url || /[\s<>]/.test(url)) {
        return false;
      }
      if (url.indexOf("mailto:") === 0) {
        return false;
      }
      options = (0, _merge.default)(options, default_url_options);
      if (options.validate_length && url.length >= 2083) {
        return false;
      }
      if (!options.allow_fragments && url.includes("#")) {
        return false;
      }
      if (!options.allow_query_components && (url.includes("?") || url.includes("&"))) {
        return false;
      }
      var protocol, auth, host, hostname, port, port_str, split, ipv6;
      split = url.split("#");
      url = split.shift();
      split = url.split("?");
      url = split.shift();
      split = url.split("://");
      if (split.length > 1) {
        protocol = split.shift().toLowerCase();
        if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
          return false;
        }
      } else if (options.require_protocol) {
        return false;
      } else if (url.substr(0, 2) === "//") {
        if (!options.allow_protocol_relative_urls) {
          return false;
        }
        split[0] = url.substr(2);
      }
      url = split.join("://");
      if (url === "") {
        return false;
      }
      split = url.split("/");
      url = split.shift();
      if (url === "" && !options.require_host) {
        return true;
      }
      split = url.split("@");
      if (split.length > 1) {
        if (options.disallow_auth) {
          return false;
        }
        if (split[0] === "") {
          return false;
        }
        auth = split.shift();
        if (auth.indexOf(":") >= 0 && auth.split(":").length > 2) {
          return false;
        }
        var _auth$split = auth.split(":"), _auth$split2 = _slicedToArray(_auth$split, 2), user = _auth$split2[0], password = _auth$split2[1];
        if (user === "" && password === "") {
          return false;
        }
      }
      hostname = split.join("@");
      port_str = null;
      ipv6 = null;
      var ipv6_match = hostname.match(wrapped_ipv6);
      if (ipv6_match) {
        host = "";
        ipv6 = ipv6_match[1];
        port_str = ipv6_match[2] || null;
      } else {
        split = hostname.split(":");
        host = split.shift();
        if (split.length) {
          port_str = split.join(":");
        }
      }
      if (port_str !== null && port_str.length > 0) {
        port = parseInt(port_str, 10);
        if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
          return false;
        }
      } else if (options.require_port) {
        return false;
      }
      if (options.host_whitelist) {
        return checkHost(host, options.host_whitelist);
      }
      if (!(0, _isIP.default)(host) && !(0, _isFQDN.default)(host, options) && (!ipv6 || !(0, _isIP.default)(ipv6, 6))) {
        return false;
      }
      host = host || ipv6;
      if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
        return false;
      }
      return true;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMACAddress.js
var require_isMACAddress = __commonJS({
  "node_modules/validator/lib/isMACAddress.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMACAddress;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var macAddress = /^(?:[0-9a-fA-F]{2}([-:\s]))([0-9a-fA-F]{2}\1){4}([0-9a-fA-F]{2})$/;
    var macAddressNoSeparators = /^([0-9a-fA-F]){12}$/;
    var macAddressWithDots = /^([0-9a-fA-F]{4}\.){2}([0-9a-fA-F]{4})$/;
    function isMACAddress(str, options) {
      (0, _assertString.default)(str);
      if (options && (options.no_colons || options.no_separators)) {
        return macAddressNoSeparators.test(str);
      }
      return macAddress.test(str) || macAddressWithDots.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIPRange.js
var require_isIPRange = __commonJS({
  "node_modules/validator/lib/isIPRange.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIPRange;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isIP = _interopRequireDefault(require_isIP());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var subnetMaybe = /^\d{1,3}$/;
    var v4Subnet = 32;
    var v6Subnet = 128;
    function isIPRange(str) {
      var version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      (0, _assertString.default)(str);
      var parts = str.split("/");
      if (parts.length !== 2) {
        return false;
      }
      if (!subnetMaybe.test(parts[1])) {
        return false;
      }
      if (parts[1].length > 1 && parts[1].startsWith("0")) {
        return false;
      }
      var isValidIP = (0, _isIP.default)(parts[0], version);
      if (!isValidIP) {
        return false;
      }
      var expectedSubnet = null;
      switch (String(version)) {
        case "4":
          expectedSubnet = v4Subnet;
          break;
        case "6":
          expectedSubnet = v6Subnet;
          break;
        default:
          expectedSubnet = (0, _isIP.default)(parts[0], "6") ? v6Subnet : v4Subnet;
      }
      return parts[1] <= expectedSubnet && parts[1] >= 0;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isDate.js
var require_isDate = __commonJS({
  "node_modules/validator/lib/isDate.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isDate;
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it;
      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e2) {
            throw _e2;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = o[Symbol.iterator]();
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f() {
        try {
          if (!normalCompletion && it.return != null)
            it.return();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var default_date_options = {
      format: "YYYY/MM/DD",
      delimiters: ["/", "-"],
      strictMode: false
    };
    function isValidFormat(format) {
      return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
    }
    function zip(date, format) {
      var zippedArr = [], len = Math.min(date.length, format.length);
      for (var i = 0; i < len; i++) {
        zippedArr.push([date[i], format[i]]);
      }
      return zippedArr;
    }
    function isDate(input, options) {
      if (typeof options === "string") {
        options = (0, _merge.default)({
          format: options
        }, default_date_options);
      } else {
        options = (0, _merge.default)(options, default_date_options);
      }
      if (typeof input === "string" && isValidFormat(options.format)) {
        var formatDelimiter = options.delimiters.find(function(delimiter) {
          return options.format.indexOf(delimiter) !== -1;
        });
        var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function(delimiter) {
          return input.indexOf(delimiter) !== -1;
        });
        var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
        var dateObj = {};
        var _iterator = _createForOfIteratorHelper(dateAndFormat), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), dateWord = _step$value[0], formatWord = _step$value[1];
            if (dateWord.length !== formatWord.length) {
              return false;
            }
            dateObj[formatWord.charAt(0)] = dateWord;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return new Date("".concat(dateObj.m, "/").concat(dateObj.d, "/").concat(dateObj.y)).getDate() === +dateObj.d;
      }
      if (!options.strictMode) {
        return Object.prototype.toString.call(input) === "[object Date]" && isFinite(input);
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isBoolean.js
var require_isBoolean = __commonJS({
  "node_modules/validator/lib/isBoolean.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBoolean;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var defaultOptions = {
      loose: false
    };
    var strictBooleans = ["true", "false", "1", "0"];
    var looseBooleans = [].concat(strictBooleans, ["yes", "no"]);
    function isBoolean(str) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOptions;
      (0, _assertString.default)(str);
      if (options.loose) {
        return looseBooleans.includes(str.toLowerCase());
      }
      return strictBooleans.includes(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isLocale.js
var require_isLocale = __commonJS({
  "node_modules/validator/lib/isLocale.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLocale;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var localeReg = /^[A-Za-z]{2,4}([_-]([A-Za-z]{4}|[\d]{3}))?([_-]([A-Za-z]{2}|[\d]{3}))?$/;
    function isLocale(str) {
      (0, _assertString.default)(str);
      if (str === "en_US_POSIX" || str === "ca_ES_VALENCIA") {
        return true;
      }
      return localeReg.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isAlpha.js
var require_isAlpha = __commonJS({
  "node_modules/validator/lib/isAlpha.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAlpha;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    var _alpha = require_alpha();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isAlpha(_str) {
      var locale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "en-US";
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      (0, _assertString.default)(_str);
      var str = _str;
      var ignore = options.ignore;
      if (ignore) {
        if (ignore instanceof RegExp) {
          str = str.replace(ignore, "");
        } else if (typeof ignore === "string") {
          str = str.replace(new RegExp("[".concat(ignore.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g, "\\$&"), "]"), "g"), "");
        } else {
          throw new Error("ignore should be instance of a String or RegExp");
        }
      }
      if (locale in _alpha.alpha) {
        return _alpha.alpha[locale].test(str);
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    var locales = Object.keys(_alpha.alpha);
    exports.locales = locales;
  }
});

// node_modules/validator/lib/isAlphanumeric.js
var require_isAlphanumeric = __commonJS({
  "node_modules/validator/lib/isAlphanumeric.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAlphanumeric;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    var _alpha = require_alpha();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isAlphanumeric(_str) {
      var locale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "en-US";
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      (0, _assertString.default)(_str);
      var str = _str;
      var ignore = options.ignore;
      if (ignore) {
        if (ignore instanceof RegExp) {
          str = str.replace(ignore, "");
        } else if (typeof ignore === "string") {
          str = str.replace(new RegExp("[".concat(ignore.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g, "\\$&"), "]"), "g"), "");
        } else {
          throw new Error("ignore should be instance of a String or RegExp");
        }
      }
      if (locale in _alpha.alphanumeric) {
        return _alpha.alphanumeric[locale].test(str);
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    var locales = Object.keys(_alpha.alphanumeric);
    exports.locales = locales;
  }
});

// node_modules/validator/lib/isNumeric.js
var require_isNumeric = __commonJS({
  "node_modules/validator/lib/isNumeric.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isNumeric;
    var _assertString = _interopRequireDefault(require_assertString());
    var _alpha = require_alpha();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var numericNoSymbols = /^[0-9]+$/;
    function isNumeric(str, options) {
      (0, _assertString.default)(str);
      if (options && options.no_symbols) {
        return numericNoSymbols.test(str);
      }
      return new RegExp("^[+-]?([0-9]*[".concat((options || {}).locale ? _alpha.decimal[options.locale] : ".", "])?[0-9]+$")).test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isPassportNumber.js
var require_isPassportNumber = __commonJS({
  "node_modules/validator/lib/isPassportNumber.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPassportNumber;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var passportRegexByCountryCode = {
      AM: /^[A-Z]{2}\d{7}$/,
      AR: /^[A-Z]{3}\d{6}$/,
      AT: /^[A-Z]\d{7}$/,
      AU: /^[A-Z]\d{7}$/,
      BE: /^[A-Z]{2}\d{6}$/,
      BG: /^\d{9}$/,
      BR: /^[A-Z]{2}\d{6}$/,
      BY: /^[A-Z]{2}\d{7}$/,
      CA: /^[A-Z]{2}\d{6}$/,
      CH: /^[A-Z]\d{7}$/,
      CN: /^G\d{8}$|^E(?![IO])[A-Z0-9]\d{7}$/,
      CY: /^[A-Z](\d{6}|\d{8})$/,
      CZ: /^\d{8}$/,
      DE: /^[CFGHJKLMNPRTVWXYZ0-9]{9}$/,
      DK: /^\d{9}$/,
      DZ: /^\d{9}$/,
      EE: /^([A-Z]\d{7}|[A-Z]{2}\d{7})$/,
      ES: /^[A-Z0-9]{2}([A-Z0-9]?)\d{6}$/,
      FI: /^[A-Z]{2}\d{7}$/,
      FR: /^\d{2}[A-Z]{2}\d{5}$/,
      GB: /^\d{9}$/,
      GR: /^[A-Z]{2}\d{7}$/,
      HR: /^\d{9}$/,
      HU: /^[A-Z]{2}(\d{6}|\d{7})$/,
      IE: /^[A-Z0-9]{2}\d{7}$/,
      IN: /^[A-Z]{1}-?\d{7}$/,
      ID: /^[A-C]\d{7}$/,
      IR: /^[A-Z]\d{8}$/,
      IS: /^(A)\d{7}$/,
      IT: /^[A-Z0-9]{2}\d{7}$/,
      JP: /^[A-Z]{2}\d{7}$/,
      KR: /^[MS]\d{8}$/,
      LT: /^[A-Z0-9]{8}$/,
      LU: /^[A-Z0-9]{8}$/,
      LV: /^[A-Z0-9]{2}\d{7}$/,
      LY: /^[A-Z0-9]{8}$/,
      MT: /^\d{7}$/,
      MZ: /^([A-Z]{2}\d{7})|(\d{2}[A-Z]{2}\d{5})$/,
      MY: /^[AHK]\d{8}$/,
      NL: /^[A-Z]{2}[A-Z0-9]{6}\d$/,
      PL: /^[A-Z]{2}\d{7}$/,
      PT: /^[A-Z]\d{6}$/,
      RO: /^\d{8,9}$/,
      RU: /^\d{9}$/,
      SE: /^\d{8}$/,
      SL: /^(P)[A-Z]\d{7}$/,
      SK: /^[0-9A-Z]\d{7}$/,
      TR: /^[A-Z]\d{8}$/,
      UA: /^[A-Z]{2}\d{6}$/,
      US: /^\d{9}$/
    };
    function isPassportNumber(str, countryCode) {
      (0, _assertString.default)(str);
      var normalizedStr = str.replace(/\s/g, "").toUpperCase();
      return countryCode.toUpperCase() in passportRegexByCountryCode && passportRegexByCountryCode[countryCode].test(normalizedStr);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isInt.js
var require_isInt = __commonJS({
  "node_modules/validator/lib/isInt.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isInt;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;
    var intLeadingZeroes = /^[-+]?[0-9]+$/;
    function isInt(str, options) {
      (0, _assertString.default)(str);
      options = options || {};
      var regex = options.hasOwnProperty("allow_leading_zeroes") && !options.allow_leading_zeroes ? int : intLeadingZeroes;
      var minCheckPassed = !options.hasOwnProperty("min") || str >= options.min;
      var maxCheckPassed = !options.hasOwnProperty("max") || str <= options.max;
      var ltCheckPassed = !options.hasOwnProperty("lt") || str < options.lt;
      var gtCheckPassed = !options.hasOwnProperty("gt") || str > options.gt;
      return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isPort.js
var require_isPort = __commonJS({
  "node_modules/validator/lib/isPort.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPort;
    var _isInt = _interopRequireDefault(require_isInt());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isPort(str) {
      return (0, _isInt.default)(str, {
        min: 0,
        max: 65535
      });
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isLowercase.js
var require_isLowercase = __commonJS({
  "node_modules/validator/lib/isLowercase.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLowercase;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isLowercase(str) {
      (0, _assertString.default)(str);
      return str === str.toLowerCase();
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isUppercase.js
var require_isUppercase = __commonJS({
  "node_modules/validator/lib/isUppercase.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isUppercase;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isUppercase(str) {
      (0, _assertString.default)(str);
      return str === str.toUpperCase();
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIMEI.js
var require_isIMEI = __commonJS({
  "node_modules/validator/lib/isIMEI.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIMEI;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var imeiRegexWithoutHypens = /^[0-9]{15}$/;
    var imeiRegexWithHypens = /^\d{2}-\d{6}-\d{6}-\d{1}$/;
    function isIMEI(str, options) {
      (0, _assertString.default)(str);
      options = options || {};
      var imeiRegex = imeiRegexWithoutHypens;
      if (options.allow_hyphens) {
        imeiRegex = imeiRegexWithHypens;
      }
      if (!imeiRegex.test(str)) {
        return false;
      }
      str = str.replace(/-/g, "");
      var sum = 0, mul = 2, l = 14;
      for (var i = 0; i < l; i++) {
        var digit = str.substring(l - i - 1, l - i);
        var tp = parseInt(digit, 10) * mul;
        if (tp >= 10) {
          sum += tp % 10 + 1;
        } else {
          sum += tp;
        }
        if (mul === 1) {
          mul += 1;
        } else {
          mul -= 1;
        }
      }
      var chk = (10 - sum % 10) % 10;
      if (chk !== parseInt(str.substring(14, 15), 10)) {
        return false;
      }
      return true;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isAscii.js
var require_isAscii = __commonJS({
  "node_modules/validator/lib/isAscii.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAscii;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var ascii = /^[\x00-\x7F]+$/;
    function isAscii(str) {
      (0, _assertString.default)(str);
      return ascii.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isFullWidth.js
var require_isFullWidth = __commonJS({
  "node_modules/validator/lib/isFullWidth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isFullWidth;
    exports.fullWidth = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var fullWidth = /[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
    exports.fullWidth = fullWidth;
    function isFullWidth(str) {
      (0, _assertString.default)(str);
      return fullWidth.test(str);
    }
  }
});

// node_modules/validator/lib/isHalfWidth.js
var require_isHalfWidth = __commonJS({
  "node_modules/validator/lib/isHalfWidth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHalfWidth;
    exports.halfWidth = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var halfWidth = /[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
    exports.halfWidth = halfWidth;
    function isHalfWidth(str) {
      (0, _assertString.default)(str);
      return halfWidth.test(str);
    }
  }
});

// node_modules/validator/lib/isVariableWidth.js
var require_isVariableWidth = __commonJS({
  "node_modules/validator/lib/isVariableWidth.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isVariableWidth;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isFullWidth = require_isFullWidth();
    var _isHalfWidth = require_isHalfWidth();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isVariableWidth(str) {
      (0, _assertString.default)(str);
      return _isFullWidth.fullWidth.test(str) && _isHalfWidth.halfWidth.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMultibyte.js
var require_isMultibyte = __commonJS({
  "node_modules/validator/lib/isMultibyte.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMultibyte;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var multibyte = /[^\x00-\x7F]/;
    function isMultibyte(str) {
      (0, _assertString.default)(str);
      return multibyte.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/multilineRegex.js
var require_multilineRegex = __commonJS({
  "node_modules/validator/lib/util/multilineRegex.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = multilineRegexp;
    function multilineRegexp(parts, flags) {
      var regexpAsStringLiteral = parts.join("");
      return new RegExp(regexpAsStringLiteral, flags);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isSemVer.js
var require_isSemVer = __commonJS({
  "node_modules/validator/lib/isSemVer.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isSemVer;
    var _assertString = _interopRequireDefault(require_assertString());
    var _multilineRegex = _interopRequireDefault(require_multilineRegex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var semanticVersioningRegex = (0, _multilineRegex.default)(["^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)", "(?:-((?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*))*))", "?(?:\\+([0-9a-z-]+(?:\\.[0-9a-z-]+)*))?$"], "i");
    function isSemVer(str) {
      (0, _assertString.default)(str);
      return semanticVersioningRegex.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isSurrogatePair.js
var require_isSurrogatePair = __commonJS({
  "node_modules/validator/lib/isSurrogatePair.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isSurrogatePair;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var surrogatePair = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;
    function isSurrogatePair(str) {
      (0, _assertString.default)(str);
      return surrogatePair.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/includes.js
var require_includes = __commonJS({
  "node_modules/validator/lib/util/includes.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var includes = function includes2(arr, val) {
      return arr.some(function(arrVal) {
        return val === arrVal;
      });
    };
    var _default = includes;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isDecimal.js
var require_isDecimal = __commonJS({
  "node_modules/validator/lib/isDecimal.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isDecimal;
    var _merge = _interopRequireDefault(require_merge());
    var _assertString = _interopRequireDefault(require_assertString());
    var _includes = _interopRequireDefault(require_includes());
    var _alpha = require_alpha();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function decimalRegExp(options) {
      var regExp = new RegExp("^[-+]?([0-9]+)?(\\".concat(_alpha.decimal[options.locale], "[0-9]{").concat(options.decimal_digits, "})").concat(options.force_decimal ? "" : "?", "$"));
      return regExp;
    }
    var default_decimal_options = {
      force_decimal: false,
      decimal_digits: "1,",
      locale: "en-US"
    };
    var blacklist = ["", "-", "+"];
    function isDecimal(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_decimal_options);
      if (options.locale in _alpha.decimal) {
        return !(0, _includes.default)(blacklist, str.replace(/ /g, "")) && decimalRegExp(options).test(str);
      }
      throw new Error("Invalid locale '".concat(options.locale, "'"));
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isHexadecimal.js
var require_isHexadecimal = __commonJS({
  "node_modules/validator/lib/isHexadecimal.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHexadecimal;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var hexadecimal = /^(0x|0h)?[0-9A-F]+$/i;
    function isHexadecimal(str) {
      (0, _assertString.default)(str);
      return hexadecimal.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isOctal.js
var require_isOctal = __commonJS({
  "node_modules/validator/lib/isOctal.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isOctal;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var octal = /^(0o)?[0-7]+$/i;
    function isOctal(str) {
      (0, _assertString.default)(str);
      return octal.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isDivisibleBy.js
var require_isDivisibleBy = __commonJS({
  "node_modules/validator/lib/isDivisibleBy.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isDivisibleBy;
    var _assertString = _interopRequireDefault(require_assertString());
    var _toFloat = _interopRequireDefault(require_toFloat());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isDivisibleBy(str, num) {
      (0, _assertString.default)(str);
      return (0, _toFloat.default)(str) % parseInt(num, 10) === 0;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isHexColor.js
var require_isHexColor = __commonJS({
  "node_modules/validator/lib/isHexColor.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHexColor;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i;
    function isHexColor(str) {
      (0, _assertString.default)(str);
      return hexcolor.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isRgbColor.js
var require_isRgbColor = __commonJS({
  "node_modules/validator/lib/isRgbColor.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isRgbColor;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var rgbColor = /^rgb\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\)$/;
    var rgbaColor = /^rgba\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){3}(0?\.\d|1(\.0)?|0(\.0)?)\)$/;
    var rgbColorPercent = /^rgb\((([0-9]%|[1-9][0-9]%|100%),){2}([0-9]%|[1-9][0-9]%|100%)\)/;
    var rgbaColorPercent = /^rgba\((([0-9]%|[1-9][0-9]%|100%),){3}(0?\.\d|1(\.0)?|0(\.0)?)\)/;
    function isRgbColor(str) {
      var includePercentValues = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      (0, _assertString.default)(str);
      if (!includePercentValues) {
        return rgbColor.test(str) || rgbaColor.test(str);
      }
      return rgbColor.test(str) || rgbaColor.test(str) || rgbColorPercent.test(str) || rgbaColorPercent.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isHSL.js
var require_isHSL = __commonJS({
  "node_modules/validator/lib/isHSL.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHSL;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var hslComma = /^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(,(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}(,((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?))?\)$/i;
    var hslSpace = /^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(\s(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}\s?(\/\s((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?)\s?)?\)$/i;
    function isHSL(str) {
      (0, _assertString.default)(str);
      var strippedStr = str.replace(/\s+/g, " ").replace(/\s?(hsla?\(|\)|,)\s?/ig, "$1");
      if (strippedStr.indexOf(",") !== -1) {
        return hslComma.test(strippedStr);
      }
      return hslSpace.test(strippedStr);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISRC.js
var require_isISRC = __commonJS({
  "node_modules/validator/lib/isISRC.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISRC;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var isrc = /^[A-Z]{2}[0-9A-Z]{3}\d{2}\d{5}$/;
    function isISRC(str) {
      (0, _assertString.default)(str);
      return isrc.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIBAN.js
var require_isIBAN = __commonJS({
  "node_modules/validator/lib/isIBAN.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIBAN;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var ibanRegexThroughCountryCode = {
      AD: /^(AD[0-9]{2})\d{8}[A-Z0-9]{12}$/,
      AE: /^(AE[0-9]{2})\d{3}\d{16}$/,
      AL: /^(AL[0-9]{2})\d{8}[A-Z0-9]{16}$/,
      AT: /^(AT[0-9]{2})\d{16}$/,
      AZ: /^(AZ[0-9]{2})[A-Z0-9]{4}\d{20}$/,
      BA: /^(BA[0-9]{2})\d{16}$/,
      BE: /^(BE[0-9]{2})\d{12}$/,
      BG: /^(BG[0-9]{2})[A-Z]{4}\d{6}[A-Z0-9]{8}$/,
      BH: /^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,
      BR: /^(BR[0-9]{2})\d{23}[A-Z]{1}[A-Z0-9]{1}$/,
      BY: /^(BY[0-9]{2})[A-Z0-9]{4}\d{20}$/,
      CH: /^(CH[0-9]{2})\d{5}[A-Z0-9]{12}$/,
      CR: /^(CR[0-9]{2})\d{18}$/,
      CY: /^(CY[0-9]{2})\d{8}[A-Z0-9]{16}$/,
      CZ: /^(CZ[0-9]{2})\d{20}$/,
      DE: /^(DE[0-9]{2})\d{18}$/,
      DK: /^(DK[0-9]{2})\d{14}$/,
      DO: /^(DO[0-9]{2})[A-Z]{4}\d{20}$/,
      EE: /^(EE[0-9]{2})\d{16}$/,
      EG: /^(EG[0-9]{2})\d{25}$/,
      ES: /^(ES[0-9]{2})\d{20}$/,
      FI: /^(FI[0-9]{2})\d{14}$/,
      FO: /^(FO[0-9]{2})\d{14}$/,
      FR: /^(FR[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,
      GB: /^(GB[0-9]{2})[A-Z]{4}\d{14}$/,
      GE: /^(GE[0-9]{2})[A-Z0-9]{2}\d{16}$/,
      GI: /^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,
      GL: /^(GL[0-9]{2})\d{14}$/,
      GR: /^(GR[0-9]{2})\d{7}[A-Z0-9]{16}$/,
      GT: /^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,
      HR: /^(HR[0-9]{2})\d{17}$/,
      HU: /^(HU[0-9]{2})\d{24}$/,
      IE: /^(IE[0-9]{2})[A-Z0-9]{4}\d{14}$/,
      IL: /^(IL[0-9]{2})\d{19}$/,
      IQ: /^(IQ[0-9]{2})[A-Z]{4}\d{15}$/,
      IR: /^(IR[0-9]{2})0\d{2}0\d{18}$/,
      IS: /^(IS[0-9]{2})\d{22}$/,
      IT: /^(IT[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,
      JO: /^(JO[0-9]{2})[A-Z]{4}\d{22}$/,
      KW: /^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,
      KZ: /^(KZ[0-9]{2})\d{3}[A-Z0-9]{13}$/,
      LB: /^(LB[0-9]{2})\d{4}[A-Z0-9]{20}$/,
      LC: /^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,
      LI: /^(LI[0-9]{2})\d{5}[A-Z0-9]{12}$/,
      LT: /^(LT[0-9]{2})\d{16}$/,
      LU: /^(LU[0-9]{2})\d{3}[A-Z0-9]{13}$/,
      LV: /^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,
      MC: /^(MC[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,
      MD: /^(MD[0-9]{2})[A-Z0-9]{20}$/,
      ME: /^(ME[0-9]{2})\d{18}$/,
      MK: /^(MK[0-9]{2})\d{3}[A-Z0-9]{10}\d{2}$/,
      MR: /^(MR[0-9]{2})\d{23}$/,
      MT: /^(MT[0-9]{2})[A-Z]{4}\d{5}[A-Z0-9]{18}$/,
      MU: /^(MU[0-9]{2})[A-Z]{4}\d{19}[A-Z]{3}$/,
      MZ: /^(MZ[0-9]{2})\d{21}$/,
      NL: /^(NL[0-9]{2})[A-Z]{4}\d{10}$/,
      NO: /^(NO[0-9]{2})\d{11}$/,
      PK: /^(PK[0-9]{2})[A-Z0-9]{4}\d{16}$/,
      PL: /^(PL[0-9]{2})\d{24}$/,
      PS: /^(PS[0-9]{2})[A-Z0-9]{4}\d{21}$/,
      PT: /^(PT[0-9]{2})\d{21}$/,
      QA: /^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,
      RO: /^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,
      RS: /^(RS[0-9]{2})\d{18}$/,
      SA: /^(SA[0-9]{2})\d{2}[A-Z0-9]{18}$/,
      SC: /^(SC[0-9]{2})[A-Z]{4}\d{20}[A-Z]{3}$/,
      SE: /^(SE[0-9]{2})\d{20}$/,
      SI: /^(SI[0-9]{2})\d{15}$/,
      SK: /^(SK[0-9]{2})\d{20}$/,
      SM: /^(SM[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,
      SV: /^(SV[0-9]{2})[A-Z0-9]{4}\d{20}$/,
      TL: /^(TL[0-9]{2})\d{19}$/,
      TN: /^(TN[0-9]{2})\d{20}$/,
      TR: /^(TR[0-9]{2})\d{5}[A-Z0-9]{17}$/,
      UA: /^(UA[0-9]{2})\d{6}[A-Z0-9]{19}$/,
      VA: /^(VA[0-9]{2})\d{18}$/,
      VG: /^(VG[0-9]{2})[A-Z0-9]{4}\d{16}$/,
      XK: /^(XK[0-9]{2})\d{16}$/
    };
    function hasValidIbanFormat(str) {
      var strippedStr = str.replace(/[\s\-]+/gi, "").toUpperCase();
      var isoCountryCode = strippedStr.slice(0, 2).toUpperCase();
      return isoCountryCode in ibanRegexThroughCountryCode && ibanRegexThroughCountryCode[isoCountryCode].test(strippedStr);
    }
    function hasValidIbanChecksum(str) {
      var strippedStr = str.replace(/[^A-Z0-9]+/gi, "").toUpperCase();
      var rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);
      var alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, function(char) {
        return char.charCodeAt(0) - 55;
      });
      var remainder = alphaCapsReplacedWithDigits.match(/\d{1,7}/g).reduce(function(acc, value) {
        return Number(acc + value) % 97;
      }, "");
      return remainder === 1;
    }
    function isIBAN(str) {
      (0, _assertString.default)(str);
      return hasValidIbanFormat(str) && hasValidIbanChecksum(str);
    }
    var locales = Object.keys(ibanRegexThroughCountryCode);
    exports.locales = locales;
  }
});

// node_modules/validator/lib/isISO31661Alpha2.js
var require_isISO31661Alpha2 = __commonJS({
  "node_modules/validator/lib/isISO31661Alpha2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISO31661Alpha2;
    exports.CountryCodes = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var validISO31661Alpha2CountriesCodes = /* @__PURE__ */ new Set(["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"]);
    function isISO31661Alpha2(str) {
      (0, _assertString.default)(str);
      return validISO31661Alpha2CountriesCodes.has(str.toUpperCase());
    }
    var CountryCodes = validISO31661Alpha2CountriesCodes;
    exports.CountryCodes = CountryCodes;
  }
});

// node_modules/validator/lib/isBIC.js
var require_isBIC = __commonJS({
  "node_modules/validator/lib/isBIC.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBIC;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isISO31661Alpha = require_isISO31661Alpha2();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var isBICReg = /^[A-Za-z]{6}[A-Za-z0-9]{2}([A-Za-z0-9]{3})?$/;
    function isBIC(str) {
      (0, _assertString.default)(str);
      if (!_isISO31661Alpha.CountryCodes.has(str.slice(4, 6).toUpperCase())) {
        return false;
      }
      return isBICReg.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMD5.js
var require_isMD5 = __commonJS({
  "node_modules/validator/lib/isMD5.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMD5;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var md5 = /^[a-f0-9]{32}$/;
    function isMD5(str) {
      (0, _assertString.default)(str);
      return md5.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isHash.js
var require_isHash = __commonJS({
  "node_modules/validator/lib/isHash.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHash;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var lengths = {
      md5: 32,
      md4: 32,
      sha1: 40,
      sha256: 64,
      sha384: 96,
      sha512: 128,
      ripemd128: 32,
      ripemd160: 40,
      tiger128: 32,
      tiger160: 40,
      tiger192: 48,
      crc32: 8,
      crc32b: 8
    };
    function isHash(str, algorithm) {
      (0, _assertString.default)(str);
      var hash = new RegExp("^[a-fA-F0-9]{".concat(lengths[algorithm], "}$"));
      return hash.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isBase64.js
var require_isBase64 = __commonJS({
  "node_modules/validator/lib/isBase64.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBase64;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var notBase64 = /[^A-Z0-9+\/=]/i;
    var urlSafeBase64 = /^[A-Z0-9_\-]*$/i;
    var defaultBase64Options = {
      urlSafe: false
    };
    function isBase64(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, defaultBase64Options);
      var len = str.length;
      if (options.urlSafe) {
        return urlSafeBase64.test(str);
      }
      if (len % 4 !== 0 || notBase64.test(str)) {
        return false;
      }
      var firstPaddingChar = str.indexOf("=");
      return firstPaddingChar === -1 || firstPaddingChar === len - 1 || firstPaddingChar === len - 2 && str[len - 1] === "=";
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isJWT.js
var require_isJWT = __commonJS({
  "node_modules/validator/lib/isJWT.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isJWT;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isBase = _interopRequireDefault(require_isBase64());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isJWT(str) {
      (0, _assertString.default)(str);
      var dotSplit = str.split(".");
      var len = dotSplit.length;
      if (len > 3 || len < 2) {
        return false;
      }
      return dotSplit.reduce(function(acc, currElem) {
        return acc && (0, _isBase.default)(currElem, {
          urlSafe: true
        });
      }, true);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isJSON.js
var require_isJSON = __commonJS({
  "node_modules/validator/lib/isJSON.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isJSON;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var default_json_options = {
      allow_primitives: false
    };
    function isJSON(str, options) {
      (0, _assertString.default)(str);
      try {
        options = (0, _merge.default)(options, default_json_options);
        var primitives = [];
        if (options.allow_primitives) {
          primitives = [null, false, true];
        }
        var obj = JSON.parse(str);
        return primitives.includes(obj) || !!obj && _typeof(obj) === "object";
      } catch (e) {
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isEmpty.js
var require_isEmpty = __commonJS({
  "node_modules/validator/lib/isEmpty.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isEmpty;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var default_is_empty_options = {
      ignore_whitespace: false
    };
    function isEmpty(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_is_empty_options);
      return (options.ignore_whitespace ? str.trim().length : str.length) === 0;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isLength.js
var require_isLength = __commonJS({
  "node_modules/validator/lib/isLength.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLength;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function isLength(str, options) {
      (0, _assertString.default)(str);
      var min;
      var max;
      if (_typeof(options) === "object") {
        min = options.min || 0;
        max = options.max;
      } else {
        min = arguments[1] || 0;
        max = arguments[2];
      }
      var surrogatePairs = str.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || [];
      var len = str.length - surrogatePairs.length;
      return len >= min && (typeof max === "undefined" || len <= max);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isUUID.js
var require_isUUID = __commonJS({
  "node_modules/validator/lib/isUUID.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isUUID;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var uuid = {
      1: /^[0-9A-F]{8}-[0-9A-F]{4}-1[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
      2: /^[0-9A-F]{8}-[0-9A-F]{4}-2[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
      3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
      4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
      5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
      all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
    };
    function isUUID(str, version) {
      (0, _assertString.default)(str);
      var pattern = uuid[![void 0, null].includes(version) ? version : "all"];
      return !!pattern && pattern.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMongoId.js
var require_isMongoId = __commonJS({
  "node_modules/validator/lib/isMongoId.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMongoId;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isHexadecimal = _interopRequireDefault(require_isHexadecimal());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isMongoId(str) {
      (0, _assertString.default)(str);
      return (0, _isHexadecimal.default)(str) && str.length === 24;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isAfter.js
var require_isAfter = __commonJS({
  "node_modules/validator/lib/isAfter.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAfter;
    var _assertString = _interopRequireDefault(require_assertString());
    var _toDate = _interopRequireDefault(require_toDate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isAfter(str) {
      var date = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : String(new Date());
      (0, _assertString.default)(str);
      var comparison = (0, _toDate.default)(date);
      var original = (0, _toDate.default)(str);
      return !!(original && comparison && original > comparison);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isBefore.js
var require_isBefore = __commonJS({
  "node_modules/validator/lib/isBefore.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBefore;
    var _assertString = _interopRequireDefault(require_assertString());
    var _toDate = _interopRequireDefault(require_toDate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isBefore(str) {
      var date = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : String(new Date());
      (0, _assertString.default)(str);
      var comparison = (0, _toDate.default)(date);
      var original = (0, _toDate.default)(str);
      return !!(original && comparison && original < comparison);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIn.js
var require_isIn = __commonJS({
  "node_modules/validator/lib/isIn.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIn;
    var _assertString = _interopRequireDefault(require_assertString());
    var _toString = _interopRequireDefault(require_toString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function isIn(str, options) {
      (0, _assertString.default)(str);
      var i;
      if (Object.prototype.toString.call(options) === "[object Array]") {
        var array = [];
        for (i in options) {
          if ({}.hasOwnProperty.call(options, i)) {
            array[i] = (0, _toString.default)(options[i]);
          }
        }
        return array.indexOf(str) >= 0;
      } else if (_typeof(options) === "object") {
        return options.hasOwnProperty(str);
      } else if (options && typeof options.indexOf === "function") {
        return options.indexOf(str) >= 0;
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isCreditCard.js
var require_isCreditCard = __commonJS({
  "node_modules/validator/lib/isCreditCard.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isCreditCard;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var creditCard = /^(?:4[0-9]{12}(?:[0-9]{3,6})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12,15}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11}|6[27][0-9]{14}|^(81[0-9]{14,17}))$/;
    function isCreditCard(str) {
      (0, _assertString.default)(str);
      var sanitized = str.replace(/[- ]+/g, "");
      if (!creditCard.test(sanitized)) {
        return false;
      }
      var sum = 0;
      var digit;
      var tmpNum;
      var shouldDouble;
      for (var i = sanitized.length - 1; i >= 0; i--) {
        digit = sanitized.substring(i, i + 1);
        tmpNum = parseInt(digit, 10);
        if (shouldDouble) {
          tmpNum *= 2;
          if (tmpNum >= 10) {
            sum += tmpNum % 10 + 1;
          } else {
            sum += tmpNum;
          }
        } else {
          sum += tmpNum;
        }
        shouldDouble = !shouldDouble;
      }
      return !!(sum % 10 === 0 ? sanitized : false);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIdentityCard.js
var require_isIdentityCard = __commonJS({
  "node_modules/validator/lib/isIdentityCard.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIdentityCard;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isInt = _interopRequireDefault(require_isInt());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var validators = {
      PL: function PL(str) {
        (0, _assertString.default)(str);
        var weightOfDigits = {
          1: 1,
          2: 3,
          3: 7,
          4: 9,
          5: 1,
          6: 3,
          7: 7,
          8: 9,
          9: 1,
          10: 3,
          11: 0
        };
        if (str != null && str.length === 11 && (0, _isInt.default)(str, {
          allow_leading_zeroes: true
        })) {
          var digits = str.split("").slice(0, -1);
          var sum = digits.reduce(function(acc, digit, index) {
            return acc + Number(digit) * weightOfDigits[index + 1];
          }, 0);
          var modulo = sum % 10;
          var lastDigit = Number(str.charAt(str.length - 1));
          if (modulo === 0 && lastDigit === 0 || lastDigit === 10 - modulo) {
            return true;
          }
        }
        return false;
      },
      ES: function ES(str) {
        (0, _assertString.default)(str);
        var DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;
        var charsValue = {
          X: 0,
          Y: 1,
          Z: 2
        };
        var controlDigits = ["T", "R", "W", "A", "G", "M", "Y", "F", "P", "D", "X", "B", "N", "J", "Z", "S", "Q", "V", "H", "L", "C", "K", "E"];
        var sanitized = str.trim().toUpperCase();
        if (!DNI.test(sanitized)) {
          return false;
        }
        var number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, function(char) {
          return charsValue[char];
        });
        return sanitized.endsWith(controlDigits[number % 23]);
      },
      FI: function FI(str) {
        (0, _assertString.default)(str);
        if (str.length !== 11) {
          return false;
        }
        if (!str.match(/^\d{6}[\-A\+]\d{3}[0-9ABCDEFHJKLMNPRSTUVWXY]{1}$/)) {
          return false;
        }
        var checkDigits = "0123456789ABCDEFHJKLMNPRSTUVWXY";
        var idAsNumber = parseInt(str.slice(0, 6), 10) * 1e3 + parseInt(str.slice(7, 10), 10);
        var remainder = idAsNumber % 31;
        var checkDigit = checkDigits[remainder];
        return checkDigit === str.slice(10, 11);
      },
      IN: function IN(str) {
        var DNI = /^[1-9]\d{3}\s?\d{4}\s?\d{4}$/;
        var d = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]];
        var p = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]];
        var sanitized = str.trim();
        if (!DNI.test(sanitized)) {
          return false;
        }
        var c = 0;
        var invertedArray = sanitized.replace(/\s/g, "").split("").map(Number).reverse();
        invertedArray.forEach(function(val, i) {
          c = d[c][p[i % 8][val]];
        });
        return c === 0;
      },
      IR: function IR(str) {
        if (!str.match(/^\d{10}$/))
          return false;
        str = "0000".concat(str).substr(str.length - 6);
        if (parseInt(str.substr(3, 6), 10) === 0)
          return false;
        var lastNumber = parseInt(str.substr(9, 1), 10);
        var sum = 0;
        for (var i = 0; i < 9; i++) {
          sum += parseInt(str.substr(i, 1), 10) * (10 - i);
        }
        sum %= 11;
        return sum < 2 && lastNumber === sum || sum >= 2 && lastNumber === 11 - sum;
      },
      IT: function IT(str) {
        if (str.length !== 9)
          return false;
        if (str === "CA00000AA")
          return false;
        return str.search(/C[A-Z][0-9]{5}[A-Z]{2}/i) > -1;
      },
      NO: function NO(str) {
        var sanitized = str.trim();
        if (isNaN(Number(sanitized)))
          return false;
        if (sanitized.length !== 11)
          return false;
        if (sanitized === "00000000000")
          return false;
        var f = sanitized.split("").map(Number);
        var k1 = (11 - (3 * f[0] + 7 * f[1] + 6 * f[2] + 1 * f[3] + 8 * f[4] + 9 * f[5] + 4 * f[6] + 5 * f[7] + 2 * f[8]) % 11) % 11;
        var k2 = (11 - (5 * f[0] + 4 * f[1] + 3 * f[2] + 2 * f[3] + 7 * f[4] + 6 * f[5] + 5 * f[6] + 4 * f[7] + 3 * f[8] + 2 * k1) % 11) % 11;
        if (k1 !== f[9] || k2 !== f[10])
          return false;
        return true;
      },
      TH: function TH(str) {
        if (!str.match(/^[1-8]\d{12}$/))
          return false;
        var sum = 0;
        for (var i = 0; i < 12; i++) {
          sum += parseInt(str[i], 10) * (13 - i);
        }
        return str[12] === ((11 - sum % 11) % 10).toString();
      },
      LK: function LK(str) {
        var old_nic = /^[1-9]\d{8}[vx]$/i;
        var new_nic = /^[1-9]\d{11}$/i;
        if (str.length === 10 && old_nic.test(str))
          return true;
        else if (str.length === 12 && new_nic.test(str))
          return true;
        return false;
      },
      "he-IL": function heIL(str) {
        var DNI = /^\d{9}$/;
        var sanitized = str.trim();
        if (!DNI.test(sanitized)) {
          return false;
        }
        var id = sanitized;
        var sum = 0, incNum;
        for (var i = 0; i < id.length; i++) {
          incNum = Number(id[i]) * (i % 2 + 1);
          sum += incNum > 9 ? incNum - 9 : incNum;
        }
        return sum % 10 === 0;
      },
      "ar-LY": function arLY(str) {
        var NIN = /^(1|2)\d{11}$/;
        var sanitized = str.trim();
        if (!NIN.test(sanitized)) {
          return false;
        }
        return true;
      },
      "ar-TN": function arTN(str) {
        var DNI = /^\d{8}$/;
        var sanitized = str.trim();
        if (!DNI.test(sanitized)) {
          return false;
        }
        return true;
      },
      "zh-CN": function zhCN(str) {
        var provincesAndCities = [
          "11",
          "12",
          "13",
          "14",
          "15",
          "21",
          "22",
          "23",
          "31",
          "32",
          "33",
          "34",
          "35",
          "36",
          "37",
          "41",
          "42",
          "43",
          "44",
          "45",
          "46",
          "50",
          "51",
          "52",
          "53",
          "54",
          "61",
          "62",
          "63",
          "64",
          "65",
          "71",
          "81",
          "82",
          "91"
        ];
        var powers = ["7", "9", "10", "5", "8", "4", "2", "1", "6", "3", "7", "9", "10", "5", "8", "4", "2"];
        var parityBit = ["1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2"];
        var checkAddressCode = function checkAddressCode2(addressCode) {
          return provincesAndCities.includes(addressCode);
        };
        var checkBirthDayCode = function checkBirthDayCode2(birDayCode) {
          var yyyy = parseInt(birDayCode.substring(0, 4), 10);
          var mm = parseInt(birDayCode.substring(4, 6), 10);
          var dd = parseInt(birDayCode.substring(6), 10);
          var xdata = new Date(yyyy, mm - 1, dd);
          if (xdata > new Date()) {
            return false;
          } else if (xdata.getFullYear() === yyyy && xdata.getMonth() === mm - 1 && xdata.getDate() === dd) {
            return true;
          }
          return false;
        };
        var getParityBit = function getParityBit2(idCardNo) {
          var id17 = idCardNo.substring(0, 17);
          var power = 0;
          for (var i = 0; i < 17; i++) {
            power += parseInt(id17.charAt(i), 10) * parseInt(powers[i], 10);
          }
          var mod = power % 11;
          return parityBit[mod];
        };
        var checkParityBit = function checkParityBit2(idCardNo) {
          return getParityBit(idCardNo) === idCardNo.charAt(17).toUpperCase();
        };
        var check15IdCardNo = function check15IdCardNo2(idCardNo) {
          var check = /^[1-9]\d{7}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}$/.test(idCardNo);
          if (!check)
            return false;
          var addressCode = idCardNo.substring(0, 2);
          check = checkAddressCode(addressCode);
          if (!check)
            return false;
          var birDayCode = "19".concat(idCardNo.substring(6, 12));
          check = checkBirthDayCode(birDayCode);
          if (!check)
            return false;
          return true;
        };
        var check18IdCardNo = function check18IdCardNo2(idCardNo) {
          var check = /^[1-9]\d{5}[1-9]\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}(\d|x|X)$/.test(idCardNo);
          if (!check)
            return false;
          var addressCode = idCardNo.substring(0, 2);
          check = checkAddressCode(addressCode);
          if (!check)
            return false;
          var birDayCode = idCardNo.substring(6, 14);
          check = checkBirthDayCode(birDayCode);
          if (!check)
            return false;
          return checkParityBit(idCardNo);
        };
        var checkIdCardNo = function checkIdCardNo2(idCardNo) {
          var check = /^\d{15}|(\d{17}(\d|x|X))$/.test(idCardNo);
          if (!check)
            return false;
          if (idCardNo.length === 15) {
            return check15IdCardNo(idCardNo);
          }
          return check18IdCardNo(idCardNo);
        };
        return checkIdCardNo(str);
      },
      "zh-TW": function zhTW(str) {
        var ALPHABET_CODES = {
          A: 10,
          B: 11,
          C: 12,
          D: 13,
          E: 14,
          F: 15,
          G: 16,
          H: 17,
          I: 34,
          J: 18,
          K: 19,
          L: 20,
          M: 21,
          N: 22,
          O: 35,
          P: 23,
          Q: 24,
          R: 25,
          S: 26,
          T: 27,
          U: 28,
          V: 29,
          W: 32,
          X: 30,
          Y: 31,
          Z: 33
        };
        var sanitized = str.trim().toUpperCase();
        if (!/^[A-Z][0-9]{9}$/.test(sanitized))
          return false;
        return Array.from(sanitized).reduce(function(sum, number, index) {
          if (index === 0) {
            var code = ALPHABET_CODES[number];
            return code % 10 * 9 + Math.floor(code / 10);
          }
          if (index === 9) {
            return (10 - sum % 10 - Number(number)) % 10 === 0;
          }
          return sum + Number(number) * (9 - index);
        }, 0);
      }
    };
    function isIdentityCard(str, locale) {
      (0, _assertString.default)(str);
      if (locale in validators) {
        return validators[locale](str);
      } else if (locale === "any") {
        for (var key in validators) {
          if (validators.hasOwnProperty(key)) {
            var validator = validators[key];
            if (validator(str)) {
              return true;
            }
          }
        }
        return false;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isEAN.js
var require_isEAN = __commonJS({
  "node_modules/validator/lib/isEAN.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isEAN;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var LENGTH_EAN_8 = 8;
    var LENGTH_EAN_14 = 14;
    var validEanRegex = /^(\d{8}|\d{13}|\d{14})$/;
    function getPositionWeightThroughLengthAndIndex(length, index) {
      if (length === LENGTH_EAN_8 || length === LENGTH_EAN_14) {
        return index % 2 === 0 ? 3 : 1;
      }
      return index % 2 === 0 ? 1 : 3;
    }
    function calculateCheckDigit(ean) {
      var checksum = ean.slice(0, -1).split("").map(function(char, index) {
        return Number(char) * getPositionWeightThroughLengthAndIndex(ean.length, index);
      }).reduce(function(acc, partialSum) {
        return acc + partialSum;
      }, 0);
      var remainder = 10 - checksum % 10;
      return remainder < 10 ? remainder : 0;
    }
    function isEAN(str) {
      (0, _assertString.default)(str);
      var actualCheckDigit = Number(str.slice(-1));
      return validEanRegex.test(str) && actualCheckDigit === calculateCheckDigit(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISIN.js
var require_isISIN = __commonJS({
  "node_modules/validator/lib/isISIN.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISIN;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;
    function isISIN(str) {
      (0, _assertString.default)(str);
      if (!isin.test(str)) {
        return false;
      }
      var double = true;
      var sum = 0;
      for (var i = str.length - 2; i >= 0; i--) {
        if (str[i] >= "A" && str[i] <= "Z") {
          var value = str[i].charCodeAt(0) - 55;
          var lo = value % 10;
          var hi = Math.trunc(value / 10);
          for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {
            var digit = _arr[_i];
            if (double) {
              if (digit >= 5) {
                sum += 1 + (digit - 5) * 2;
              } else {
                sum += digit * 2;
              }
            } else {
              sum += digit;
            }
            double = !double;
          }
        } else {
          var _digit = str[i].charCodeAt(0) - "0".charCodeAt(0);
          if (double) {
            if (_digit >= 5) {
              sum += 1 + (_digit - 5) * 2;
            } else {
              sum += _digit * 2;
            }
          } else {
            sum += _digit;
          }
          double = !double;
        }
      }
      var check = Math.trunc((sum + 9) / 10) * 10 - sum;
      return +str[str.length - 1] === check;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISBN.js
var require_isISBN = __commonJS({
  "node_modules/validator/lib/isISBN.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISBN;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;
    var isbn13Maybe = /^(?:[0-9]{13})$/;
    var factor = [1, 3];
    function isISBN(str) {
      var version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      (0, _assertString.default)(str);
      version = String(version);
      if (!version) {
        return isISBN(str, 10) || isISBN(str, 13);
      }
      var sanitized = str.replace(/[\s-]+/g, "");
      var checksum = 0;
      var i;
      if (version === "10") {
        if (!isbn10Maybe.test(sanitized)) {
          return false;
        }
        for (i = 0; i < 9; i++) {
          checksum += (i + 1) * sanitized.charAt(i);
        }
        if (sanitized.charAt(9) === "X") {
          checksum += 10 * 10;
        } else {
          checksum += 10 * sanitized.charAt(9);
        }
        if (checksum % 11 === 0) {
          return !!sanitized;
        }
      } else if (version === "13") {
        if (!isbn13Maybe.test(sanitized)) {
          return false;
        }
        for (i = 0; i < 12; i++) {
          checksum += factor[i % 2] * sanitized.charAt(i);
        }
        if (sanitized.charAt(12) - (10 - checksum % 10) % 10 === 0) {
          return !!sanitized;
        }
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISSN.js
var require_isISSN = __commonJS({
  "node_modules/validator/lib/isISSN.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISSN;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var issn = "^\\d{4}-?\\d{3}[\\dX]$";
    function isISSN(str) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      (0, _assertString.default)(str);
      var testIssn = issn;
      testIssn = options.require_hyphen ? testIssn.replace("?", "") : testIssn;
      testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, "i");
      if (!testIssn.test(str)) {
        return false;
      }
      var digits = str.replace("-", "").toUpperCase();
      var checksum = 0;
      for (var i = 0; i < digits.length; i++) {
        var digit = digits[i];
        checksum += (digit === "X" ? 10 : +digit) * (8 - i);
      }
      return checksum % 11 === 0;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/algorithms.js
var require_algorithms = __commonJS({
  "node_modules/validator/lib/util/algorithms.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.iso7064Check = iso7064Check;
    exports.luhnCheck = luhnCheck;
    exports.reverseMultiplyAndSum = reverseMultiplyAndSum;
    exports.verhoeffCheck = verhoeffCheck;
    function iso7064Check(str) {
      var checkvalue = 10;
      for (var i = 0; i < str.length - 1; i++) {
        checkvalue = (parseInt(str[i], 10) + checkvalue) % 10 === 0 ? 10 * 2 % 11 : (parseInt(str[i], 10) + checkvalue) % 10 * 2 % 11;
      }
      checkvalue = checkvalue === 1 ? 0 : 11 - checkvalue;
      return checkvalue === parseInt(str[10], 10);
    }
    function luhnCheck(str) {
      var checksum = 0;
      var second = false;
      for (var i = str.length - 1; i >= 0; i--) {
        if (second) {
          var product = parseInt(str[i], 10) * 2;
          if (product > 9) {
            checksum += product.toString().split("").map(function(a) {
              return parseInt(a, 10);
            }).reduce(function(a, b) {
              return a + b;
            }, 0);
          } else {
            checksum += product;
          }
        } else {
          checksum += parseInt(str[i], 10);
        }
        second = !second;
      }
      return checksum % 10 === 0;
    }
    function reverseMultiplyAndSum(digits, base) {
      var total = 0;
      for (var i = 0; i < digits.length; i++) {
        total += digits[i] * (base - i);
      }
      return total;
    }
    function verhoeffCheck(str) {
      var d_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]];
      var p_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]];
      var str_copy = str.split("").reverse().join("");
      var checksum = 0;
      for (var i = 0; i < str_copy.length; i++) {
        checksum = d_table[checksum][p_table[i % 8][parseInt(str_copy[i], 10)]];
      }
      return checksum === 0;
    }
  }
});

// node_modules/validator/lib/isTaxID.js
var require_isTaxID = __commonJS({
  "node_modules/validator/lib/isTaxID.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isTaxID;
    var _assertString = _interopRequireDefault(require_assertString());
    var algorithms = _interopRequireWildcard(require_algorithms());
    var _isDate = _interopRequireDefault(require_isDate());
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function")
        return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function bgBgCheck(tin) {
      var century_year = tin.slice(0, 2);
      var month = parseInt(tin.slice(2, 4), 10);
      if (month > 40) {
        month -= 40;
        century_year = "20".concat(century_year);
      } else if (month > 20) {
        month -= 20;
        century_year = "18".concat(century_year);
      } else {
        century_year = "19".concat(century_year);
      }
      if (month < 10) {
        month = "0".concat(month);
      }
      var date = "".concat(century_year, "/").concat(month, "/").concat(tin.slice(4, 6));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var multip_lookup = [2, 4, 8, 5, 10, 9, 7, 3, 6];
      var checksum = 0;
      for (var i = 0; i < multip_lookup.length; i++) {
        checksum += digits[i] * multip_lookup[i];
      }
      checksum = checksum % 11 === 10 ? 0 : checksum % 11;
      return checksum === digits[9];
    }
    function csCzCheck(tin) {
      tin = tin.replace(/\W/, "");
      var full_year = parseInt(tin.slice(0, 2), 10);
      if (tin.length === 10) {
        if (full_year < 54) {
          full_year = "20".concat(full_year);
        } else {
          full_year = "19".concat(full_year);
        }
      } else {
        if (tin.slice(6) === "000") {
          return false;
        }
        if (full_year < 54) {
          full_year = "19".concat(full_year);
        } else {
          return false;
        }
      }
      if (full_year.length === 3) {
        full_year = [full_year.slice(0, 2), "0", full_year.slice(2)].join("");
      }
      var month = parseInt(tin.slice(2, 4), 10);
      if (month > 50) {
        month -= 50;
      }
      if (month > 20) {
        if (parseInt(full_year, 10) < 2004) {
          return false;
        }
        month -= 20;
      }
      if (month < 10) {
        month = "0".concat(month);
      }
      var date = "".concat(full_year, "/").concat(month, "/").concat(tin.slice(4, 6));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      if (tin.length === 10) {
        if (parseInt(tin, 10) % 11 !== 0) {
          var checkdigit = parseInt(tin.slice(0, 9), 10) % 11;
          if (parseInt(full_year, 10) < 1986 && checkdigit === 10) {
            if (parseInt(tin.slice(9), 10) !== 0) {
              return false;
            }
          } else {
            return false;
          }
        }
      }
      return true;
    }
    function deAtCheck(tin) {
      return algorithms.luhnCheck(tin);
    }
    function deDeCheck(tin) {
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var occurences = [];
      for (var i = 0; i < digits.length - 1; i++) {
        occurences.push("");
        for (var j = 0; j < digits.length - 1; j++) {
          if (digits[i] === digits[j]) {
            occurences[i] += j;
          }
        }
      }
      occurences = occurences.filter(function(a) {
        return a.length > 1;
      });
      if (occurences.length !== 2 && occurences.length !== 3) {
        return false;
      }
      if (occurences[0].length === 3) {
        var trip_locations = occurences[0].split("").map(function(a) {
          return parseInt(a, 10);
        });
        var recurrent = 0;
        for (var _i = 0; _i < trip_locations.length - 1; _i++) {
          if (trip_locations[_i] + 1 === trip_locations[_i + 1]) {
            recurrent += 1;
          }
        }
        if (recurrent === 2) {
          return false;
        }
      }
      return algorithms.iso7064Check(tin);
    }
    function dkDkCheck(tin) {
      tin = tin.replace(/\W/, "");
      var year = parseInt(tin.slice(4, 6), 10);
      var century_digit = tin.slice(6, 7);
      switch (century_digit) {
        case "0":
        case "1":
        case "2":
        case "3":
          year = "19".concat(year);
          break;
        case "4":
        case "9":
          if (year < 37) {
            year = "20".concat(year);
          } else {
            year = "19".concat(year);
          }
          break;
        default:
          if (year < 37) {
            year = "20".concat(year);
          } else if (year > 58) {
            year = "18".concat(year);
          } else {
            return false;
          }
          break;
      }
      if (year.length === 3) {
        year = [year.slice(0, 2), "0", year.slice(2)].join("");
      }
      var date = "".concat(year, "/").concat(tin.slice(2, 4), "/").concat(tin.slice(0, 2));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var checksum = 0;
      var weight = 4;
      for (var i = 0; i < 9; i++) {
        checksum += digits[i] * weight;
        weight -= 1;
        if (weight === 1) {
          weight = 7;
        }
      }
      checksum %= 11;
      if (checksum === 1) {
        return false;
      }
      return checksum === 0 ? digits[9] === 0 : digits[9] === 11 - checksum;
    }
    function elCyCheck(tin) {
      var digits = tin.slice(0, 8).split("").map(function(a) {
        return parseInt(a, 10);
      });
      var checksum = 0;
      for (var i = 1; i < digits.length; i += 2) {
        checksum += digits[i];
      }
      for (var _i2 = 0; _i2 < digits.length; _i2 += 2) {
        if (digits[_i2] < 2) {
          checksum += 1 - digits[_i2];
        } else {
          checksum += 2 * (digits[_i2] - 2) + 5;
          if (digits[_i2] > 4) {
            checksum += 2;
          }
        }
      }
      return String.fromCharCode(checksum % 26 + 65) === tin.charAt(8);
    }
    function elGrCheck(tin) {
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var checksum = 0;
      for (var i = 0; i < 8; i++) {
        checksum += digits[i] * Math.pow(2, 8 - i);
      }
      return checksum % 11 % 10 === digits[8];
    }
    function enIeCheck(tin) {
      var checksum = algorithms.reverseMultiplyAndSum(tin.split("").slice(0, 7).map(function(a) {
        return parseInt(a, 10);
      }), 8);
      if (tin.length === 9 && tin[8] !== "W") {
        checksum += (tin[8].charCodeAt(0) - 64) * 9;
      }
      checksum %= 23;
      if (checksum === 0) {
        return tin[7].toUpperCase() === "W";
      }
      return tin[7].toUpperCase() === String.fromCharCode(64 + checksum);
    }
    var enUsCampusPrefix = {
      andover: ["10", "12"],
      atlanta: ["60", "67"],
      austin: ["50", "53"],
      brookhaven: ["01", "02", "03", "04", "05", "06", "11", "13", "14", "16", "21", "22", "23", "25", "34", "51", "52", "54", "55", "56", "57", "58", "59", "65"],
      cincinnati: ["30", "32", "35", "36", "37", "38", "61"],
      fresno: ["15", "24"],
      internet: ["20", "26", "27", "45", "46", "47"],
      kansas: ["40", "44"],
      memphis: ["94", "95"],
      ogden: ["80", "90"],
      philadelphia: ["33", "39", "41", "42", "43", "46", "48", "62", "63", "64", "66", "68", "71", "72", "73", "74", "75", "76", "77", "81", "82", "83", "84", "85", "86", "87", "88", "91", "92", "93", "98", "99"],
      sba: ["31"]
    };
    function enUsGetPrefixes() {
      var prefixes = [];
      for (var location in enUsCampusPrefix) {
        if (enUsCampusPrefix.hasOwnProperty(location)) {
          prefixes.push.apply(prefixes, _toConsumableArray(enUsCampusPrefix[location]));
        }
      }
      return prefixes;
    }
    function enUsCheck(tin) {
      return enUsGetPrefixes().indexOf(tin.substr(0, 2)) !== -1;
    }
    function esEsCheck(tin) {
      var chars = tin.toUpperCase().split("");
      if (isNaN(parseInt(chars[0], 10)) && chars.length > 1) {
        var lead_replace = 0;
        switch (chars[0]) {
          case "Y":
            lead_replace = 1;
            break;
          case "Z":
            lead_replace = 2;
            break;
          default:
        }
        chars.splice(0, 1, lead_replace);
      } else {
        while (chars.length < 9) {
          chars.unshift(0);
        }
      }
      var lookup = ["T", "R", "W", "A", "G", "M", "Y", "F", "P", "D", "X", "B", "N", "J", "Z", "S", "Q", "V", "H", "L", "C", "K", "E"];
      chars = chars.join("");
      var checksum = parseInt(chars.slice(0, 8), 10) % 23;
      return chars[8] === lookup[checksum];
    }
    function etEeCheck(tin) {
      var full_year = tin.slice(1, 3);
      var century_digit = tin.slice(0, 1);
      switch (century_digit) {
        case "1":
        case "2":
          full_year = "18".concat(full_year);
          break;
        case "3":
        case "4":
          full_year = "19".concat(full_year);
          break;
        default:
          full_year = "20".concat(full_year);
          break;
      }
      var date = "".concat(full_year, "/").concat(tin.slice(3, 5), "/").concat(tin.slice(5, 7));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var checksum = 0;
      var weight = 1;
      for (var i = 0; i < 10; i++) {
        checksum += digits[i] * weight;
        weight += 1;
        if (weight === 10) {
          weight = 1;
        }
      }
      if (checksum % 11 === 10) {
        checksum = 0;
        weight = 3;
        for (var _i3 = 0; _i3 < 10; _i3++) {
          checksum += digits[_i3] * weight;
          weight += 1;
          if (weight === 10) {
            weight = 1;
          }
        }
        if (checksum % 11 === 10) {
          return digits[10] === 0;
        }
      }
      return checksum % 11 === digits[10];
    }
    function fiFiCheck(tin) {
      var full_year = tin.slice(4, 6);
      var century_symbol = tin.slice(6, 7);
      switch (century_symbol) {
        case "+":
          full_year = "18".concat(full_year);
          break;
        case "-":
          full_year = "19".concat(full_year);
          break;
        default:
          full_year = "20".concat(full_year);
          break;
      }
      var date = "".concat(full_year, "/").concat(tin.slice(2, 4), "/").concat(tin.slice(0, 2));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      var checksum = parseInt(tin.slice(0, 6) + tin.slice(7, 10), 10) % 31;
      if (checksum < 10) {
        return checksum === parseInt(tin.slice(10), 10);
      }
      checksum -= 10;
      var letters_lookup = ["A", "B", "C", "D", "E", "F", "H", "J", "K", "L", "M", "N", "P", "R", "S", "T", "U", "V", "W", "X", "Y"];
      return letters_lookup[checksum] === tin.slice(10);
    }
    function frBeCheck(tin) {
      if (tin.slice(2, 4) !== "00" || tin.slice(4, 6) !== "00") {
        var date = "".concat(tin.slice(0, 2), "/").concat(tin.slice(2, 4), "/").concat(tin.slice(4, 6));
        if (!(0, _isDate.default)(date, "YY/MM/DD")) {
          return false;
        }
      }
      var checksum = 97 - parseInt(tin.slice(0, 9), 10) % 97;
      var checkdigits = parseInt(tin.slice(9, 11), 10);
      if (checksum !== checkdigits) {
        checksum = 97 - parseInt("2".concat(tin.slice(0, 9)), 10) % 97;
        if (checksum !== checkdigits) {
          return false;
        }
      }
      return true;
    }
    function frFrCheck(tin) {
      tin = tin.replace(/\s/g, "");
      var checksum = parseInt(tin.slice(0, 10), 10) % 511;
      var checkdigits = parseInt(tin.slice(10, 13), 10);
      return checksum === checkdigits;
    }
    function frLuCheck(tin) {
      var date = "".concat(tin.slice(0, 4), "/").concat(tin.slice(4, 6), "/").concat(tin.slice(6, 8));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      if (!algorithms.luhnCheck(tin.slice(0, 12))) {
        return false;
      }
      return algorithms.verhoeffCheck("".concat(tin.slice(0, 11)).concat(tin[12]));
    }
    function hrHrCheck(tin) {
      return algorithms.iso7064Check(tin);
    }
    function huHuCheck(tin) {
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var checksum = 8;
      for (var i = 1; i < 9; i++) {
        checksum += digits[i] * (i + 1);
      }
      return checksum % 11 === digits[9];
    }
    function itItNameCheck(name) {
      var vowelflag = false;
      var xflag = false;
      for (var i = 0; i < 3; i++) {
        if (!vowelflag && /[AEIOU]/.test(name[i])) {
          vowelflag = true;
        } else if (!xflag && vowelflag && name[i] === "X") {
          xflag = true;
        } else if (i > 0) {
          if (vowelflag && !xflag) {
            if (!/[AEIOU]/.test(name[i])) {
              return false;
            }
          }
          if (xflag) {
            if (!/X/.test(name[i])) {
              return false;
            }
          }
        }
      }
      return true;
    }
    function itItCheck(tin) {
      var chars = tin.toUpperCase().split("");
      if (!itItNameCheck(chars.slice(0, 3))) {
        return false;
      }
      if (!itItNameCheck(chars.slice(3, 6))) {
        return false;
      }
      var number_locations = [6, 7, 9, 10, 12, 13, 14];
      var number_replace = {
        L: "0",
        M: "1",
        N: "2",
        P: "3",
        Q: "4",
        R: "5",
        S: "6",
        T: "7",
        U: "8",
        V: "9"
      };
      for (var _i4 = 0, _number_locations = number_locations; _i4 < _number_locations.length; _i4++) {
        var i = _number_locations[_i4];
        if (chars[i] in number_replace) {
          chars.splice(i, 1, number_replace[chars[i]]);
        }
      }
      var month_replace = {
        A: "01",
        B: "02",
        C: "03",
        D: "04",
        E: "05",
        H: "06",
        L: "07",
        M: "08",
        P: "09",
        R: "10",
        S: "11",
        T: "12"
      };
      var month = month_replace[chars[8]];
      var day = parseInt(chars[9] + chars[10], 10);
      if (day > 40) {
        day -= 40;
      }
      if (day < 10) {
        day = "0".concat(day);
      }
      var date = "".concat(chars[6]).concat(chars[7], "/").concat(month, "/").concat(day);
      if (!(0, _isDate.default)(date, "YY/MM/DD")) {
        return false;
      }
      var checksum = 0;
      for (var _i5 = 1; _i5 < chars.length - 1; _i5 += 2) {
        var char_to_int = parseInt(chars[_i5], 10);
        if (isNaN(char_to_int)) {
          char_to_int = chars[_i5].charCodeAt(0) - 65;
        }
        checksum += char_to_int;
      }
      var odd_convert = {
        A: 1,
        B: 0,
        C: 5,
        D: 7,
        E: 9,
        F: 13,
        G: 15,
        H: 17,
        I: 19,
        J: 21,
        K: 2,
        L: 4,
        M: 18,
        N: 20,
        O: 11,
        P: 3,
        Q: 6,
        R: 8,
        S: 12,
        T: 14,
        U: 16,
        V: 10,
        W: 22,
        X: 25,
        Y: 24,
        Z: 23,
        0: 1,
        1: 0
      };
      for (var _i6 = 0; _i6 < chars.length - 1; _i6 += 2) {
        var _char_to_int = 0;
        if (chars[_i6] in odd_convert) {
          _char_to_int = odd_convert[chars[_i6]];
        } else {
          var multiplier = parseInt(chars[_i6], 10);
          _char_to_int = 2 * multiplier + 1;
          if (multiplier > 4) {
            _char_to_int += 2;
          }
        }
        checksum += _char_to_int;
      }
      if (String.fromCharCode(65 + checksum % 26) !== chars[15]) {
        return false;
      }
      return true;
    }
    function lvLvCheck(tin) {
      tin = tin.replace(/\W/, "");
      var day = tin.slice(0, 2);
      if (day !== "32") {
        var month = tin.slice(2, 4);
        if (month !== "00") {
          var full_year = tin.slice(4, 6);
          switch (tin[6]) {
            case "0":
              full_year = "18".concat(full_year);
              break;
            case "1":
              full_year = "19".concat(full_year);
              break;
            default:
              full_year = "20".concat(full_year);
              break;
          }
          var date = "".concat(full_year, "/").concat(tin.slice(2, 4), "/").concat(day);
          if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
            return false;
          }
        }
        var checksum = 1101;
        var multip_lookup = [1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
        for (var i = 0; i < tin.length - 1; i++) {
          checksum -= parseInt(tin[i], 10) * multip_lookup[i];
        }
        return parseInt(tin[10], 10) === checksum % 11;
      }
      return true;
    }
    function mtMtCheck(tin) {
      if (tin.length !== 9) {
        var chars = tin.toUpperCase().split("");
        while (chars.length < 8) {
          chars.unshift(0);
        }
        switch (tin[7]) {
          case "A":
          case "P":
            if (parseInt(chars[6], 10) === 0) {
              return false;
            }
            break;
          default: {
            var first_part = parseInt(chars.join("").slice(0, 5), 10);
            if (first_part > 32e3) {
              return false;
            }
            var second_part = parseInt(chars.join("").slice(5, 7), 10);
            if (first_part === second_part) {
              return false;
            }
          }
        }
      }
      return true;
    }
    function nlNlCheck(tin) {
      return algorithms.reverseMultiplyAndSum(tin.split("").slice(0, 8).map(function(a) {
        return parseInt(a, 10);
      }), 9) % 11 === parseInt(tin[8], 10);
    }
    function plPlCheck(tin) {
      if (tin.length === 10) {
        var lookup = [6, 5, 7, 2, 3, 4, 5, 6, 7];
        var _checksum = 0;
        for (var i = 0; i < lookup.length; i++) {
          _checksum += parseInt(tin[i], 10) * lookup[i];
        }
        _checksum %= 11;
        if (_checksum === 10) {
          return false;
        }
        return _checksum === parseInt(tin[9], 10);
      }
      var full_year = tin.slice(0, 2);
      var month = parseInt(tin.slice(2, 4), 10);
      if (month > 80) {
        full_year = "18".concat(full_year);
        month -= 80;
      } else if (month > 60) {
        full_year = "22".concat(full_year);
        month -= 60;
      } else if (month > 40) {
        full_year = "21".concat(full_year);
        month -= 40;
      } else if (month > 20) {
        full_year = "20".concat(full_year);
        month -= 20;
      } else {
        full_year = "19".concat(full_year);
      }
      if (month < 10) {
        month = "0".concat(month);
      }
      var date = "".concat(full_year, "/").concat(month, "/").concat(tin.slice(4, 6));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      var checksum = 0;
      var multiplier = 1;
      for (var _i7 = 0; _i7 < tin.length - 1; _i7++) {
        checksum += parseInt(tin[_i7], 10) * multiplier % 10;
        multiplier += 2;
        if (multiplier > 10) {
          multiplier = 1;
        } else if (multiplier === 5) {
          multiplier += 2;
        }
      }
      checksum = 10 - checksum % 10;
      return checksum === parseInt(tin[10], 10);
    }
    function ptBrCheck(tin) {
      if (tin.length === 11) {
        var _sum;
        var remainder;
        _sum = 0;
        if (tin === "11111111111" || tin === "22222222222" || tin === "33333333333" || tin === "44444444444" || tin === "55555555555" || tin === "66666666666" || tin === "77777777777" || tin === "88888888888" || tin === "99999999999" || tin === "00000000000")
          return false;
        for (var i = 1; i <= 9; i++) {
          _sum += parseInt(tin.substring(i - 1, i), 10) * (11 - i);
        }
        remainder = _sum * 10 % 11;
        if (remainder === 10)
          remainder = 0;
        if (remainder !== parseInt(tin.substring(9, 10), 10))
          return false;
        _sum = 0;
        for (var _i8 = 1; _i8 <= 10; _i8++) {
          _sum += parseInt(tin.substring(_i8 - 1, _i8), 10) * (12 - _i8);
        }
        remainder = _sum * 10 % 11;
        if (remainder === 10)
          remainder = 0;
        if (remainder !== parseInt(tin.substring(10, 11), 10))
          return false;
        return true;
      }
      if (tin === "00000000000000" || tin === "11111111111111" || tin === "22222222222222" || tin === "33333333333333" || tin === "44444444444444" || tin === "55555555555555" || tin === "66666666666666" || tin === "77777777777777" || tin === "88888888888888" || tin === "99999999999999") {
        return false;
      }
      var length = tin.length - 2;
      var identifiers = tin.substring(0, length);
      var verificators = tin.substring(length);
      var sum = 0;
      var pos = length - 7;
      for (var _i9 = length; _i9 >= 1; _i9--) {
        sum += identifiers.charAt(length - _i9) * pos;
        pos -= 1;
        if (pos < 2) {
          pos = 9;
        }
      }
      var result = sum % 11 < 2 ? 0 : 11 - sum % 11;
      if (result !== parseInt(verificators.charAt(0), 10)) {
        return false;
      }
      length += 1;
      identifiers = tin.substring(0, length);
      sum = 0;
      pos = length - 7;
      for (var _i10 = length; _i10 >= 1; _i10--) {
        sum += identifiers.charAt(length - _i10) * pos;
        pos -= 1;
        if (pos < 2) {
          pos = 9;
        }
      }
      result = sum % 11 < 2 ? 0 : 11 - sum % 11;
      if (result !== parseInt(verificators.charAt(1), 10)) {
        return false;
      }
      return true;
    }
    function ptPtCheck(tin) {
      var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split("").slice(0, 8).map(function(a) {
        return parseInt(a, 10);
      }), 9) % 11;
      if (checksum > 9) {
        return parseInt(tin[8], 10) === 0;
      }
      return checksum === parseInt(tin[8], 10);
    }
    function roRoCheck(tin) {
      if (tin.slice(0, 4) !== "9000") {
        var full_year = tin.slice(1, 3);
        switch (tin[0]) {
          case "1":
          case "2":
            full_year = "19".concat(full_year);
            break;
          case "3":
          case "4":
            full_year = "18".concat(full_year);
            break;
          case "5":
          case "6":
            full_year = "20".concat(full_year);
            break;
          default:
        }
        var date = "".concat(full_year, "/").concat(tin.slice(3, 5), "/").concat(tin.slice(5, 7));
        if (date.length === 8) {
          if (!(0, _isDate.default)(date, "YY/MM/DD")) {
            return false;
          }
        } else if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
          return false;
        }
        var digits = tin.split("").map(function(a) {
          return parseInt(a, 10);
        });
        var multipliers = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];
        var checksum = 0;
        for (var i = 0; i < multipliers.length; i++) {
          checksum += digits[i] * multipliers[i];
        }
        if (checksum % 11 === 10) {
          return digits[12] === 1;
        }
        return digits[12] === checksum % 11;
      }
      return true;
    }
    function skSkCheck(tin) {
      if (tin.length === 9) {
        tin = tin.replace(/\W/, "");
        if (tin.slice(6) === "000") {
          return false;
        }
        var full_year = parseInt(tin.slice(0, 2), 10);
        if (full_year > 53) {
          return false;
        }
        if (full_year < 10) {
          full_year = "190".concat(full_year);
        } else {
          full_year = "19".concat(full_year);
        }
        var month = parseInt(tin.slice(2, 4), 10);
        if (month > 50) {
          month -= 50;
        }
        if (month < 10) {
          month = "0".concat(month);
        }
        var date = "".concat(full_year, "/").concat(month, "/").concat(tin.slice(4, 6));
        if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
          return false;
        }
      }
      return true;
    }
    function slSiCheck(tin) {
      var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split("").slice(0, 7).map(function(a) {
        return parseInt(a, 10);
      }), 8) % 11;
      if (checksum === 10) {
        return parseInt(tin[7], 10) === 0;
      }
      return checksum === parseInt(tin[7], 10);
    }
    function svSeCheck(tin) {
      var tin_copy = tin.slice(0);
      if (tin.length > 11) {
        tin_copy = tin_copy.slice(2);
      }
      var full_year = "";
      var month = tin_copy.slice(2, 4);
      var day = parseInt(tin_copy.slice(4, 6), 10);
      if (tin.length > 11) {
        full_year = tin.slice(0, 4);
      } else {
        full_year = tin.slice(0, 2);
        if (tin.length === 11 && day < 60) {
          var current_year = new Date().getFullYear().toString();
          var current_century = parseInt(current_year.slice(0, 2), 10);
          current_year = parseInt(current_year, 10);
          if (tin[6] === "-") {
            if (parseInt("".concat(current_century).concat(full_year), 10) > current_year) {
              full_year = "".concat(current_century - 1).concat(full_year);
            } else {
              full_year = "".concat(current_century).concat(full_year);
            }
          } else {
            full_year = "".concat(current_century - 1).concat(full_year);
            if (current_year - parseInt(full_year, 10) < 100) {
              return false;
            }
          }
        }
      }
      if (day > 60) {
        day -= 60;
      }
      if (day < 10) {
        day = "0".concat(day);
      }
      var date = "".concat(full_year, "/").concat(month, "/").concat(day);
      if (date.length === 8) {
        if (!(0, _isDate.default)(date, "YY/MM/DD")) {
          return false;
        }
      } else if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      return algorithms.luhnCheck(tin.replace(/\W/, ""));
    }
    var taxIdFormat = {
      "bg-BG": /^\d{10}$/,
      "cs-CZ": /^\d{6}\/{0,1}\d{3,4}$/,
      "de-AT": /^\d{9}$/,
      "de-DE": /^[1-9]\d{10}$/,
      "dk-DK": /^\d{6}-{0,1}\d{4}$/,
      "el-CY": /^[09]\d{7}[A-Z]$/,
      "el-GR": /^([0-4]|[7-9])\d{8}$/,
      "en-GB": /^\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\d{6}[ABCD ]$/i,
      "en-IE": /^\d{7}[A-W][A-IW]{0,1}$/i,
      "en-US": /^\d{2}[- ]{0,1}\d{7}$/,
      "es-ES": /^(\d{0,8}|[XYZKLM]\d{7})[A-HJ-NP-TV-Z]$/i,
      "et-EE": /^[1-6]\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\d$/,
      "fi-FI": /^\d{6}[-+A]\d{3}[0-9A-FHJ-NPR-Y]$/i,
      "fr-BE": /^\d{11}$/,
      "fr-FR": /^[0-3]\d{12}$|^[0-3]\d\s\d{2}(\s\d{3}){3}$/,
      "fr-LU": /^\d{13}$/,
      "hr-HR": /^\d{11}$/,
      "hu-HU": /^8\d{9}$/,
      "it-IT": /^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,
      "lv-LV": /^\d{6}-{0,1}\d{5}$/,
      "mt-MT": /^\d{3,7}[APMGLHBZ]$|^([1-8])\1\d{7}$/i,
      "nl-NL": /^\d{9}$/,
      "pl-PL": /^\d{10,11}$/,
      "pt-BR": /(?:^\d{11}$)|(?:^\d{14}$)/,
      "pt-PT": /^\d{9}$/,
      "ro-RO": /^\d{13}$/,
      "sk-SK": /^\d{6}\/{0,1}\d{3,4}$/,
      "sl-SI": /^[1-9]\d{7}$/,
      "sv-SE": /^(\d{6}[-+]{0,1}\d{4}|(18|19|20)\d{6}[-+]{0,1}\d{4})$/
    };
    taxIdFormat["lb-LU"] = taxIdFormat["fr-LU"];
    taxIdFormat["lt-LT"] = taxIdFormat["et-EE"];
    taxIdFormat["nl-BE"] = taxIdFormat["fr-BE"];
    var taxIdCheck = {
      "bg-BG": bgBgCheck,
      "cs-CZ": csCzCheck,
      "de-AT": deAtCheck,
      "de-DE": deDeCheck,
      "dk-DK": dkDkCheck,
      "el-CY": elCyCheck,
      "el-GR": elGrCheck,
      "en-IE": enIeCheck,
      "en-US": enUsCheck,
      "es-ES": esEsCheck,
      "et-EE": etEeCheck,
      "fi-FI": fiFiCheck,
      "fr-BE": frBeCheck,
      "fr-FR": frFrCheck,
      "fr-LU": frLuCheck,
      "hr-HR": hrHrCheck,
      "hu-HU": huHuCheck,
      "it-IT": itItCheck,
      "lv-LV": lvLvCheck,
      "mt-MT": mtMtCheck,
      "nl-NL": nlNlCheck,
      "pl-PL": plPlCheck,
      "pt-BR": ptBrCheck,
      "pt-PT": ptPtCheck,
      "ro-RO": roRoCheck,
      "sk-SK": skSkCheck,
      "sl-SI": slSiCheck,
      "sv-SE": svSeCheck
    };
    taxIdCheck["lb-LU"] = taxIdCheck["fr-LU"];
    taxIdCheck["lt-LT"] = taxIdCheck["et-EE"];
    taxIdCheck["nl-BE"] = taxIdCheck["fr-BE"];
    var allsymbols = /[-\\\/!@#$%\^&\*\(\)\+\=\[\]]+/g;
    var sanitizeRegexes = {
      "de-AT": allsymbols,
      "de-DE": /[\/\\]/g,
      "fr-BE": allsymbols
    };
    sanitizeRegexes["nl-BE"] = sanitizeRegexes["fr-BE"];
    function isTaxID(str) {
      var locale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "en-US";
      (0, _assertString.default)(str);
      var strcopy = str.slice(0);
      if (locale in taxIdFormat) {
        if (locale in sanitizeRegexes) {
          strcopy = strcopy.replace(sanitizeRegexes[locale], "");
        }
        if (!taxIdFormat[locale].test(strcopy)) {
          return false;
        }
        if (locale in taxIdCheck) {
          return taxIdCheck[locale](strcopy);
        }
        return true;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMobilePhone.js
var require_isMobilePhone = __commonJS({
  "node_modules/validator/lib/isMobilePhone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMobilePhone;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var phones = {
      "am-AM": /^(\+?374|0)((10|[9|7][0-9])\d{6}$|[2-4]\d{7}$)/,
      "ar-AE": /^((\+?971)|0)?5[024568]\d{7}$/,
      "ar-BH": /^(\+?973)?(3|6)\d{7}$/,
      "ar-DZ": /^(\+?213|0)(5|6|7)\d{8}$/,
      "ar-LB": /^(\+?961)?((3|81)\d{6}|7\d{7})$/,
      "ar-EG": /^((\+?20)|0)?1[0125]\d{8}$/,
      "ar-IQ": /^(\+?964|0)?7[0-9]\d{8}$/,
      "ar-JO": /^(\+?962|0)?7[789]\d{7}$/,
      "ar-KW": /^(\+?965)[569]\d{7}$/,
      "ar-LY": /^((\+?218)|0)?(9[1-6]\d{7}|[1-8]\d{7,9})$/,
      "ar-MA": /^(?:(?:\+|00)212|0)[5-7]\d{8}$/,
      "ar-OM": /^((\+|00)968)?(9[1-9])\d{6}$/,
      "ar-PS": /^(\+?970|0)5[6|9](\d{7})$/,
      "ar-SA": /^(!?(\+?966)|0)?5\d{8}$/,
      "ar-SY": /^(!?(\+?963)|0)?9\d{8}$/,
      "ar-TN": /^(\+?216)?[2459]\d{7}$/,
      "az-AZ": /^(\+994|0)(5[015]|7[07]|99)\d{7}$/,
      "bs-BA": /^((((\+|00)3876)|06))((([0-3]|[5-6])\d{6})|(4\d{7}))$/,
      "be-BY": /^(\+?375)?(24|25|29|33|44)\d{7}$/,
      "bg-BG": /^(\+?359|0)?8[789]\d{7}$/,
      "bn-BD": /^(\+?880|0)1[13456789][0-9]{8}$/,
      "ca-AD": /^(\+376)?[346]\d{5}$/,
      "cs-CZ": /^(\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
      "da-DK": /^(\+?45)?\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{2}$/,
      "de-DE": /^((\+49|0)[1|3])([0|5][0-45-9]\d|6([23]|0\d?)|7([0-57-9]|6\d))\d{7,9}$/,
      "de-AT": /^(\+43|0)\d{1,4}\d{3,12}$/,
      "de-CH": /^(\+41|0)([1-9])\d{1,9}$/,
      "de-LU": /^(\+352)?((6\d1)\d{6})$/,
      "dv-MV": /^(\+?960)?(7[2-9]|91|9[3-9])\d{7}$/,
      "el-GR": /^(\+?30|0)?(69\d{8})$/,
      "en-AU": /^(\+?61|0)4\d{8}$/,
      "en-BM": /^(\+?1)?441(((3|7)\d{6}$)|(5[0-3][0-9]\d{4}$)|(59\d{5}))/,
      "en-GB": /^(\+?44|0)7\d{9}$/,
      "en-GG": /^(\+?44|0)1481\d{6}$/,
      "en-GH": /^(\+233|0)(20|50|24|54|27|57|26|56|23|28|55|59)\d{7}$/,
      "en-GY": /^(\+592|0)6\d{6}$/,
      "en-HK": /^(\+?852[-\s]?)?[456789]\d{3}[-\s]?\d{4}$/,
      "en-MO": /^(\+?853[-\s]?)?[6]\d{3}[-\s]?\d{4}$/,
      "en-IE": /^(\+?353|0)8[356789]\d{7}$/,
      "en-IN": /^(\+?91|0)?[6789]\d{9}$/,
      "en-KE": /^(\+?254|0)(7|1)\d{8}$/,
      "en-KI": /^((\+686|686)?)?( )?((6|7)(2|3|8)[0-9]{6})$/,
      "en-MT": /^(\+?356|0)?(99|79|77|21|27|22|25)[0-9]{6}$/,
      "en-MU": /^(\+?230|0)?\d{8}$/,
      "en-NA": /^(\+?264|0)(6|8)\d{7}$/,
      "en-NG": /^(\+?234|0)?[789]\d{9}$/,
      "en-NZ": /^(\+?64|0)[28]\d{7,9}$/,
      "en-PK": /^((00|\+)?92|0)3[0-6]\d{8}$/,
      "en-PH": /^(09|\+639)\d{9}$/,
      "en-RW": /^(\+?250|0)?[7]\d{8}$/,
      "en-SG": /^(\+65)?[3689]\d{7}$/,
      "en-SL": /^(\+?232|0)\d{8}$/,
      "en-TZ": /^(\+?255|0)?[67]\d{8}$/,
      "en-UG": /^(\+?256|0)?[7]\d{8}$/,
      "en-US": /^((\+1|1)?( |-)?)?(\([2-9][0-9]{2}\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$/,
      "en-ZA": /^(\+?27|0)\d{9}$/,
      "en-ZM": /^(\+?26)?09[567]\d{7}$/,
      "en-ZW": /^(\+263)[0-9]{9}$/,
      "en-BW": /^(\+?267)?(7[1-8]{1})\d{6}$/,
      "es-AR": /^\+?549(11|[2368]\d)\d{8}$/,
      "es-BO": /^(\+?591)?(6|7)\d{7}$/,
      "es-CO": /^(\+?57)?3(0(0|1|2|4|5)|1\d|2[0-4]|5(0|1))\d{7}$/,
      "es-CL": /^(\+?56|0)[2-9]\d{1}\d{7}$/,
      "es-CR": /^(\+506)?[2-8]\d{7}$/,
      "es-CU": /^(\+53|0053)?5\d{7}/,
      "es-DO": /^(\+?1)?8[024]9\d{7}$/,
      "es-HN": /^(\+?504)?[9|8]\d{7}$/,
      "es-EC": /^(\+?593|0)([2-7]|9[2-9])\d{7}$/,
      "es-ES": /^(\+?34)?[6|7]\d{8}$/,
      "es-PE": /^(\+?51)?9\d{8}$/,
      "es-MX": /^(\+?52)?(1|01)?\d{10,11}$/,
      "es-PA": /^(\+?507)\d{7,8}$/,
      "es-PY": /^(\+?595|0)9[9876]\d{7}$/,
      "es-SV": /^(\+?503)?[67]\d{7}$/,
      "es-UY": /^(\+598|0)9[1-9][\d]{6}$/,
      "es-VE": /^(\+?58)?(2|4)\d{9}$/,
      "et-EE": /^(\+?372)?\s?(5|8[1-4])\s?([0-9]\s?){6,7}$/,
      "fa-IR": /^(\+?98[\-\s]?|0)9[0-39]\d[\-\s]?\d{3}[\-\s]?\d{4}$/,
      "fi-FI": /^(\+?358|0)\s?(4(0|1|2|4|5|6)?|50)\s?(\d\s?){4,8}\d$/,
      "fj-FJ": /^(\+?679)?\s?\d{3}\s?\d{4}$/,
      "fo-FO": /^(\+?298)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
      "fr-BF": /^(\+226|0)[67]\d{7}$/,
      "fr-CM": /^(\+?237)6[0-9]{8}$/,
      "fr-FR": /^(\+?33|0)[67]\d{8}$/,
      "fr-GF": /^(\+?594|0|00594)[67]\d{8}$/,
      "fr-GP": /^(\+?590|0|00590)[67]\d{8}$/,
      "fr-MQ": /^(\+?596|0|00596)[67]\d{8}$/,
      "fr-PF": /^(\+?689)?8[789]\d{6}$/,
      "fr-RE": /^(\+?262|0|00262)[67]\d{8}$/,
      "he-IL": /^(\+972|0)([23489]|5[012345689]|77)[1-9]\d{6}$/,
      "hu-HU": /^(\+?36|06)(20|30|31|50|70)\d{7}$/,
      "id-ID": /^(\+?62|0)8(1[123456789]|2[1238]|3[1238]|5[12356789]|7[78]|9[56789]|8[123456789])([\s?|\d]{5,11})$/,
      "it-IT": /^(\+?39)?\s?3\d{2} ?\d{6,7}$/,
      "it-SM": /^((\+378)|(0549)|(\+390549)|(\+3780549))?6\d{5,9}$/,
      "ja-JP": /^(\+81[ \-]?(\(0\))?|0)[6789]0[ \-]?\d{4}[ \-]?\d{4}$/,
      "ka-GE": /^(\+?995)?(5|79)\d{7}$/,
      "kk-KZ": /^(\+?7|8)?7\d{9}$/,
      "kl-GL": /^(\+?299)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
      "ko-KR": /^((\+?82)[ \-]?)?0?1([0|1|6|7|8|9]{1})[ \-]?\d{3,4}[ \-]?\d{4}$/,
      "lt-LT": /^(\+370|8)\d{8}$/,
      "lv-LV": /^(\+?371)2\d{7}$/,
      "ms-MY": /^(\+?6?01){1}(([0145]{1}(\-|\s)?\d{7,8})|([236789]{1}(\s|\-)?\d{7}))$/,
      "mz-MZ": /^(\+?258)?8[234567]\d{7}$/,
      "nb-NO": /^(\+?47)?[49]\d{7}$/,
      "ne-NP": /^(\+?977)?9[78]\d{8}$/,
      "nl-BE": /^(\+?32|0)4\d{8}$/,
      "nl-NL": /^(((\+|00)?31\(0\))|((\+|00)?31)|0)6{1}\d{8}$/,
      "nn-NO": /^(\+?47)?[49]\d{7}$/,
      "pl-PL": /^(\+?48)? ?[5-8]\d ?\d{3} ?\d{2} ?\d{2}$/,
      "pt-BR": /^((\+?55\ ?[1-9]{2}\ ?)|(\+?55\ ?\([1-9]{2}\)\ ?)|(0[1-9]{2}\ ?)|(\([1-9]{2}\)\ ?)|([1-9]{2}\ ?))((\d{4}\-?\d{4})|(9[2-9]{1}\d{3}\-?\d{4}))$/,
      "pt-PT": /^(\+?351)?9[1236]\d{7}$/,
      "pt-AO": /^(\+244)\d{9}$/,
      "ro-RO": /^(\+?4?0)\s?7\d{2}(\/|\s|\.|\-)?\d{3}(\s|\.|\-)?\d{3}$/,
      "ru-RU": /^(\+?7|8)?9\d{9}$/,
      "si-LK": /^(?:0|94|\+94)?(7(0|1|2|4|5|6|7|8)( |-)?)\d{7}$/,
      "sl-SI": /^(\+386\s?|0)(\d{1}\s?\d{3}\s?\d{2}\s?\d{2}|\d{2}\s?\d{3}\s?\d{3})$/,
      "sk-SK": /^(\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
      "sq-AL": /^(\+355|0)6[789]\d{6}$/,
      "sr-RS": /^(\+3816|06)[- \d]{5,9}$/,
      "sv-SE": /^(\+?46|0)[\s\-]?7[\s\-]?[02369]([\s\-]?\d){7}$/,
      "tg-TJ": /^(\+?992)?[5][5]\d{7}$/,
      "th-TH": /^(\+66|66|0)\d{9}$/,
      "tr-TR": /^(\+?90|0)?5\d{9}$/,
      "tk-TM": /^(\+993|993|8)\d{8}$/,
      "uk-UA": /^(\+?38|8)?0\d{9}$/,
      "uz-UZ": /^(\+?998)?(6[125-79]|7[1-69]|88|9\d)\d{7}$/,
      "vi-VN": /^((\+?84)|0)((3([2-9]))|(5([25689]))|(7([0|6-9]))|(8([1-9]))|(9([0-9])))([0-9]{7})$/,
      "zh-CN": /^((\+|00)86)?(1[3-9]|9[28])\d{9}$/,
      "zh-TW": /^(\+?886\-?|0)?9\d{8}$/,
      "dz-BT": /^(\+?975|0)?(17|16|77|02)\d{6}$/
    };
    phones["en-CA"] = phones["en-US"];
    phones["fr-CA"] = phones["en-CA"];
    phones["fr-BE"] = phones["nl-BE"];
    phones["zh-HK"] = phones["en-HK"];
    phones["zh-MO"] = phones["en-MO"];
    phones["ga-IE"] = phones["en-IE"];
    phones["fr-CH"] = phones["de-CH"];
    phones["it-CH"] = phones["fr-CH"];
    function isMobilePhone(str, locale, options) {
      (0, _assertString.default)(str);
      if (options && options.strictMode && !str.startsWith("+")) {
        return false;
      }
      if (Array.isArray(locale)) {
        return locale.some(function(key2) {
          if (phones.hasOwnProperty(key2)) {
            var phone2 = phones[key2];
            if (phone2.test(str)) {
              return true;
            }
          }
          return false;
        });
      } else if (locale in phones) {
        return phones[locale].test(str);
      } else if (!locale || locale === "any") {
        for (var key in phones) {
          if (phones.hasOwnProperty(key)) {
            var phone = phones[key];
            if (phone.test(str)) {
              return true;
            }
          }
        }
        return false;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    var locales = Object.keys(phones);
    exports.locales = locales;
  }
});

// node_modules/validator/lib/isEthereumAddress.js
var require_isEthereumAddress = __commonJS({
  "node_modules/validator/lib/isEthereumAddress.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isEthereumAddress;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var eth = /^(0x)[0-9a-f]{40}$/i;
    function isEthereumAddress(str) {
      (0, _assertString.default)(str);
      return eth.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isCurrency.js
var require_isCurrency = __commonJS({
  "node_modules/validator/lib/isCurrency.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isCurrency;
    var _merge = _interopRequireDefault(require_merge());
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function currencyRegex(options) {
      var decimal_digits = "\\d{".concat(options.digits_after_decimal[0], "}");
      options.digits_after_decimal.forEach(function(digit, index) {
        if (index !== 0)
          decimal_digits = "".concat(decimal_digits, "|\\d{").concat(digit, "}");
      });
      var symbol = "(".concat(options.symbol.replace(/\W/, function(m) {
        return "\\".concat(m);
      }), ")").concat(options.require_symbol ? "" : "?"), negative = "-?", whole_dollar_amount_without_sep = "[1-9]\\d*", whole_dollar_amount_with_sep = "[1-9]\\d{0,2}(\\".concat(options.thousands_separator, "\\d{3})*"), valid_whole_dollar_amounts = ["0", whole_dollar_amount_without_sep, whole_dollar_amount_with_sep], whole_dollar_amount = "(".concat(valid_whole_dollar_amounts.join("|"), ")?"), decimal_amount = "(\\".concat(options.decimal_separator, "(").concat(decimal_digits, "))").concat(options.require_decimal ? "" : "?");
      var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : "");
      if (options.allow_negatives && !options.parens_for_negatives) {
        if (options.negative_sign_after_digits) {
          pattern += negative;
        } else if (options.negative_sign_before_digits) {
          pattern = negative + pattern;
        }
      }
      if (options.allow_negative_sign_placeholder) {
        pattern = "( (?!\\-))?".concat(pattern);
      } else if (options.allow_space_after_symbol) {
        pattern = " ?".concat(pattern);
      } else if (options.allow_space_after_digits) {
        pattern += "( (?!$))?";
      }
      if (options.symbol_after_digits) {
        pattern += symbol;
      } else {
        pattern = symbol + pattern;
      }
      if (options.allow_negatives) {
        if (options.parens_for_negatives) {
          pattern = "(\\(".concat(pattern, "\\)|").concat(pattern, ")");
        } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {
          pattern = negative + pattern;
        }
      }
      return new RegExp("^(?!-? )(?=.*\\d)".concat(pattern, "$"));
    }
    var default_currency_options = {
      symbol: "$",
      require_symbol: false,
      allow_space_after_symbol: false,
      symbol_after_digits: false,
      allow_negatives: true,
      parens_for_negatives: false,
      negative_sign_before_digits: false,
      negative_sign_after_digits: false,
      allow_negative_sign_placeholder: false,
      thousands_separator: ",",
      decimal_separator: ".",
      allow_decimal: true,
      require_decimal: false,
      digits_after_decimal: [2],
      allow_space_after_digits: false
    };
    function isCurrency(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_currency_options);
      return currencyRegex(options).test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isBtcAddress.js
var require_isBtcAddress = __commonJS({
  "node_modules/validator/lib/isBtcAddress.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBtcAddress;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var bech32 = /^(bc1)[a-z0-9]{25,39}$/;
    var base58 = /^(1|3)[A-HJ-NP-Za-km-z1-9]{25,39}$/;
    function isBtcAddress(str) {
      (0, _assertString.default)(str);
      if (str.startsWith("bc1")) {
        return bech32.test(str);
      }
      return base58.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISO8601.js
var require_isISO8601 = __commonJS({
  "node_modules/validator/lib/isISO8601.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISO8601;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var iso8601 = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
    var iso8601StrictSeparator = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
    var isValidDate = function isValidDate2(str) {
      var ordinalMatch = str.match(/^(\d{4})-?(\d{3})([ T]{1}\.*|$)/);
      if (ordinalMatch) {
        var oYear = Number(ordinalMatch[1]);
        var oDay = Number(ordinalMatch[2]);
        if (oYear % 4 === 0 && oYear % 100 !== 0 || oYear % 400 === 0)
          return oDay <= 366;
        return oDay <= 365;
      }
      var match = str.match(/(\d{4})-?(\d{0,2})-?(\d*)/).map(Number);
      var year = match[1];
      var month = match[2];
      var day = match[3];
      var monthString = month ? "0".concat(month).slice(-2) : month;
      var dayString = day ? "0".concat(day).slice(-2) : day;
      var d = new Date("".concat(year, "-").concat(monthString || "01", "-").concat(dayString || "01"));
      if (month && day) {
        return d.getUTCFullYear() === year && d.getUTCMonth() + 1 === month && d.getUTCDate() === day;
      }
      return true;
    };
    function isISO8601(str) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      (0, _assertString.default)(str);
      var check = options.strictSeparator ? iso8601StrictSeparator.test(str) : iso8601.test(str);
      if (check && options.strict)
        return isValidDate(str);
      return check;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isRFC3339.js
var require_isRFC3339 = __commonJS({
  "node_modules/validator/lib/isRFC3339.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isRFC3339;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var dateFullYear = /[0-9]{4}/;
    var dateMonth = /(0[1-9]|1[0-2])/;
    var dateMDay = /([12]\d|0[1-9]|3[01])/;
    var timeHour = /([01][0-9]|2[0-3])/;
    var timeMinute = /[0-5][0-9]/;
    var timeSecond = /([0-5][0-9]|60)/;
    var timeSecFrac = /(\.[0-9]+)?/;
    var timeNumOffset = new RegExp("[-+]".concat(timeHour.source, ":").concat(timeMinute.source));
    var timeOffset = new RegExp("([zZ]|".concat(timeNumOffset.source, ")"));
    var partialTime = new RegExp("".concat(timeHour.source, ":").concat(timeMinute.source, ":").concat(timeSecond.source).concat(timeSecFrac.source));
    var fullDate = new RegExp("".concat(dateFullYear.source, "-").concat(dateMonth.source, "-").concat(dateMDay.source));
    var fullTime = new RegExp("".concat(partialTime.source).concat(timeOffset.source));
    var rfc3339 = new RegExp("^".concat(fullDate.source, "[ tT]").concat(fullTime.source, "$"));
    function isRFC3339(str) {
      (0, _assertString.default)(str);
      return rfc3339.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISO31661Alpha3.js
var require_isISO31661Alpha3 = __commonJS({
  "node_modules/validator/lib/isISO31661Alpha3.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISO31661Alpha3;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var validISO31661Alpha3CountriesCodes = /* @__PURE__ */ new Set(["AFG", "ALA", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "KHM", "CMR", "CAN", "CPV", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COG", "COD", "COK", "CRI", "CIV", "HRV", "CUB", "CUW", "CYP", "CZE", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MKD", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "REU", "ROU", "RUS", "RWA", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWZ", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "USA", "UMI", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE"]);
    function isISO31661Alpha3(str) {
      (0, _assertString.default)(str);
      return validISO31661Alpha3CountriesCodes.has(str.toUpperCase());
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISO4217.js
var require_isISO4217 = __commonJS({
  "node_modules/validator/lib/isISO4217.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISO4217;
    exports.CurrencyCodes = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var validISO4217CurrencyCodes = /* @__PURE__ */ new Set(["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"]);
    function isISO4217(str) {
      (0, _assertString.default)(str);
      return validISO4217CurrencyCodes.has(str.toUpperCase());
    }
    var CurrencyCodes = validISO4217CurrencyCodes;
    exports.CurrencyCodes = CurrencyCodes;
  }
});

// node_modules/validator/lib/isBase32.js
var require_isBase32 = __commonJS({
  "node_modules/validator/lib/isBase32.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBase32;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var base32 = /^[A-Z2-7]+=*$/;
    function isBase32(str) {
      (0, _assertString.default)(str);
      var len = str.length;
      if (len % 8 === 0 && base32.test(str)) {
        return true;
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isBase58.js
var require_isBase58 = __commonJS({
  "node_modules/validator/lib/isBase58.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBase58;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var base58Reg = /^[A-HJ-NP-Za-km-z1-9]*$/;
    function isBase58(str) {
      (0, _assertString.default)(str);
      if (base58Reg.test(str)) {
        return true;
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isDataURI.js
var require_isDataURI = __commonJS({
  "node_modules/validator/lib/isDataURI.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isDataURI;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var validMediaType = /^[a-z]+\/[a-z0-9\-\+]+$/i;
    var validAttribute = /^[a-z\-]+=[a-z0-9\-]+$/i;
    var validData = /^[a-z0-9!\$&'\(\)\*\+,;=\-\._~:@\/\?%\s]*$/i;
    function isDataURI(str) {
      (0, _assertString.default)(str);
      var data = str.split(",");
      if (data.length < 2) {
        return false;
      }
      var attributes = data.shift().trim().split(";");
      var schemeAndMediaType = attributes.shift();
      if (schemeAndMediaType.substr(0, 5) !== "data:") {
        return false;
      }
      var mediaType = schemeAndMediaType.substr(5);
      if (mediaType !== "" && !validMediaType.test(mediaType)) {
        return false;
      }
      for (var i = 0; i < attributes.length; i++) {
        if (!(i === attributes.length - 1 && attributes[i].toLowerCase() === "base64") && !validAttribute.test(attributes[i])) {
          return false;
        }
      }
      for (var _i = 0; _i < data.length; _i++) {
        if (!validData.test(data[_i])) {
          return false;
        }
      }
      return true;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMagnetURI.js
var require_isMagnetURI = __commonJS({
  "node_modules/validator/lib/isMagnetURI.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMagnetURI;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var magnetURI = /^magnet:\?xt(?:\.1)?=urn:(?:aich|bitprint|btih|ed2k|ed2khash|kzhash|md5|sha1|tree:tiger):[a-z0-9]{32}(?:[a-z0-9]{8})?($|&)/i;
    function isMagnetURI(url) {
      (0, _assertString.default)(url);
      return magnetURI.test(url.trim());
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMimeType.js
var require_isMimeType = __commonJS({
  "node_modules/validator/lib/isMimeType.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMimeType;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var mimeTypeSimple = /^(application|audio|font|image|message|model|multipart|text|video)\/[a-zA-Z0-9\.\-\+]{1,100}$/i;
    var mimeTypeText = /^text\/[a-zA-Z0-9\.\-\+]{1,100};\s?charset=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?$/i;
    var mimeTypeMultipart = /^multipart\/[a-zA-Z0-9\.\-\+]{1,100}(;\s?(boundary|charset)=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?){0,2}$/i;
    function isMimeType(str) {
      (0, _assertString.default)(str);
      return mimeTypeSimple.test(str) || mimeTypeText.test(str) || mimeTypeMultipart.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isLatLong.js
var require_isLatLong = __commonJS({
  "node_modules/validator/lib/isLatLong.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLatLong;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var lat = /^\(?[+-]?(90(\.0+)?|[1-8]?\d(\.\d+)?)$/;
    var long = /^\s?[+-]?(180(\.0+)?|1[0-7]\d(\.\d+)?|\d{1,2}(\.\d+)?)\)?$/;
    var latDMS = /^(([1-8]?\d)\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|90\D+0\D+0)\D+[NSns]?$/i;
    var longDMS = /^\s*([1-7]?\d{1,2}\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|180\D+0\D+0)\D+[EWew]?$/i;
    var defaultLatLongOptions = {
      checkDMS: false
    };
    function isLatLong(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, defaultLatLongOptions);
      if (!str.includes(","))
        return false;
      var pair = str.split(",");
      if (pair[0].startsWith("(") && !pair[1].endsWith(")") || pair[1].endsWith(")") && !pair[0].startsWith("("))
        return false;
      if (options.checkDMS) {
        return latDMS.test(pair[0]) && longDMS.test(pair[1]);
      }
      return lat.test(pair[0]) && long.test(pair[1]);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isPostalCode.js
var require_isPostalCode = __commonJS({
  "node_modules/validator/lib/isPostalCode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPostalCode;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var threeDigit = /^\d{3}$/;
    var fourDigit = /^\d{4}$/;
    var fiveDigit = /^\d{5}$/;
    var sixDigit = /^\d{6}$/;
    var patterns = {
      AD: /^AD\d{3}$/,
      AT: fourDigit,
      AU: fourDigit,
      AZ: /^AZ\d{4}$/,
      BE: fourDigit,
      BG: fourDigit,
      BR: /^\d{5}-\d{3}$/,
      BY: /2[1-4]{1}\d{4}$/,
      CA: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,
      CH: fourDigit,
      CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\d{4}$/,
      CZ: /^\d{3}\s?\d{2}$/,
      DE: fiveDigit,
      DK: fourDigit,
      DO: fiveDigit,
      DZ: fiveDigit,
      EE: fiveDigit,
      ES: /^(5[0-2]{1}|[0-4]{1}\d{1})\d{3}$/,
      FI: fiveDigit,
      FR: /^\d{2}\s?\d{3}$/,
      GB: /^(gir\s?0aa|[a-z]{1,2}\d[\da-z]?\s?(\d[a-z]{2})?)$/i,
      GR: /^\d{3}\s?\d{2}$/,
      HR: /^([1-5]\d{4}$)/,
      HT: /^HT\d{4}$/,
      HU: fourDigit,
      ID: fiveDigit,
      IE: /^(?!.*(?:o))[A-Za-z]\d[\dw]\s\w{4}$/i,
      IL: /^(\d{5}|\d{7})$/,
      IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,
      IR: /\b(?!(\d)\1{3})[13-9]{4}[1346-9][013-9]{5}\b/,
      IS: threeDigit,
      IT: fiveDigit,
      JP: /^\d{3}\-\d{4}$/,
      KE: fiveDigit,
      KR: /^(\d{5}|\d{6})$/,
      LI: /^(948[5-9]|949[0-7])$/,
      LT: /^LT\-\d{5}$/,
      LU: fourDigit,
      LV: /^LV\-\d{4}$/,
      LK: fiveDigit,
      MX: fiveDigit,
      MT: /^[A-Za-z]{3}\s{0,1}\d{4}$/,
      MY: fiveDigit,
      NL: /^\d{4}\s?[a-z]{2}$/i,
      NO: fourDigit,
      NP: /^(10|21|22|32|33|34|44|45|56|57)\d{3}$|^(977)$/i,
      NZ: fourDigit,
      PL: /^\d{2}\-\d{3}$/,
      PR: /^00[679]\d{2}([ -]\d{4})?$/,
      PT: /^\d{4}\-\d{3}?$/,
      RO: sixDigit,
      RU: sixDigit,
      SA: fiveDigit,
      SE: /^[1-9]\d{2}\s?\d{2}$/,
      SG: sixDigit,
      SI: fourDigit,
      SK: /^\d{3}\s?\d{2}$/,
      TH: fiveDigit,
      TN: fourDigit,
      TW: /^\d{3}(\d{2})?$/,
      UA: fiveDigit,
      US: /^\d{5}(-\d{4})?$/,
      ZA: fourDigit,
      ZM: fiveDigit
    };
    var locales = Object.keys(patterns);
    exports.locales = locales;
    function isPostalCode(str, locale) {
      (0, _assertString.default)(str);
      if (locale in patterns) {
        return patterns[locale].test(str);
      } else if (locale === "any") {
        for (var key in patterns) {
          if (patterns.hasOwnProperty(key)) {
            var pattern = patterns[key];
            if (pattern.test(str)) {
              return true;
            }
          }
        }
        return false;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
  }
});

// node_modules/validator/lib/ltrim.js
var require_ltrim = __commonJS({
  "node_modules/validator/lib/ltrim.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = ltrim;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function ltrim(str, chars) {
      (0, _assertString.default)(str);
      var pattern = chars ? new RegExp("^[".concat(chars.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "]+"), "g") : /^\s+/g;
      return str.replace(pattern, "");
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/rtrim.js
var require_rtrim = __commonJS({
  "node_modules/validator/lib/rtrim.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rtrim;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function rtrim(str, chars) {
      (0, _assertString.default)(str);
      if (chars) {
        var pattern = new RegExp("[".concat(chars.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "]+$"), "g");
        return str.replace(pattern, "");
      }
      var strIndex = str.length - 1;
      while (/\s/.test(str.charAt(strIndex))) {
        strIndex -= 1;
      }
      return str.slice(0, strIndex + 1);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/trim.js
var require_trim = __commonJS({
  "node_modules/validator/lib/trim.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = trim;
    var _rtrim = _interopRequireDefault(require_rtrim());
    var _ltrim = _interopRequireDefault(require_ltrim());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function trim(str, chars) {
      return (0, _rtrim.default)((0, _ltrim.default)(str, chars), chars);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/escape.js
var require_escape = __commonJS({
  "node_modules/validator/lib/escape.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = escape;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function escape(str) {
      (0, _assertString.default)(str);
      return str.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\//g, "&#x2F;").replace(/\\/g, "&#x5C;").replace(/`/g, "&#96;");
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/unescape.js
var require_unescape = __commonJS({
  "node_modules/validator/lib/unescape.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = unescape2;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function unescape2(str) {
      (0, _assertString.default)(str);
      return str.replace(/&quot;/g, '"').replace(/&#x27;/g, "'").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&#x2F;/g, "/").replace(/&#x5C;/g, "\\").replace(/&#96;/g, "`").replace(/&amp;/g, "&");
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/blacklist.js
var require_blacklist = __commonJS({
  "node_modules/validator/lib/blacklist.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = blacklist;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function blacklist(str, chars) {
      (0, _assertString.default)(str);
      return str.replace(new RegExp("[".concat(chars, "]+"), "g"), "");
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/stripLow.js
var require_stripLow = __commonJS({
  "node_modules/validator/lib/stripLow.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = stripLow;
    var _assertString = _interopRequireDefault(require_assertString());
    var _blacklist = _interopRequireDefault(require_blacklist());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stripLow(str, keep_new_lines) {
      (0, _assertString.default)(str);
      var chars = keep_new_lines ? "\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F" : "\\x00-\\x1F\\x7F";
      return (0, _blacklist.default)(str, chars);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/whitelist.js
var require_whitelist = __commonJS({
  "node_modules/validator/lib/whitelist.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = whitelist;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function whitelist(str, chars) {
      (0, _assertString.default)(str);
      return str.replace(new RegExp("[^".concat(chars, "]+"), "g"), "");
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isWhitelisted.js
var require_isWhitelisted = __commonJS({
  "node_modules/validator/lib/isWhitelisted.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isWhitelisted;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isWhitelisted(str, chars) {
      (0, _assertString.default)(str);
      for (var i = str.length - 1; i >= 0; i--) {
        if (chars.indexOf(str[i]) === -1) {
          return false;
        }
      }
      return true;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/normalizeEmail.js
var require_normalizeEmail = __commonJS({
  "node_modules/validator/lib/normalizeEmail.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = normalizeEmail;
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var default_normalize_email_options = {
      all_lowercase: true,
      gmail_lowercase: true,
      gmail_remove_dots: true,
      gmail_remove_subaddress: true,
      gmail_convert_googlemaildotcom: true,
      outlookdotcom_lowercase: true,
      outlookdotcom_remove_subaddress: true,
      yahoo_lowercase: true,
      yahoo_remove_subaddress: true,
      yandex_lowercase: true,
      icloud_lowercase: true,
      icloud_remove_subaddress: true
    };
    var icloud_domains = ["icloud.com", "me.com"];
    var outlookdotcom_domains = ["hotmail.at", "hotmail.be", "hotmail.ca", "hotmail.cl", "hotmail.co.il", "hotmail.co.nz", "hotmail.co.th", "hotmail.co.uk", "hotmail.com", "hotmail.com.ar", "hotmail.com.au", "hotmail.com.br", "hotmail.com.gr", "hotmail.com.mx", "hotmail.com.pe", "hotmail.com.tr", "hotmail.com.vn", "hotmail.cz", "hotmail.de", "hotmail.dk", "hotmail.es", "hotmail.fr", "hotmail.hu", "hotmail.id", "hotmail.ie", "hotmail.in", "hotmail.it", "hotmail.jp", "hotmail.kr", "hotmail.lv", "hotmail.my", "hotmail.ph", "hotmail.pt", "hotmail.sa", "hotmail.sg", "hotmail.sk", "live.be", "live.co.uk", "live.com", "live.com.ar", "live.com.mx", "live.de", "live.es", "live.eu", "live.fr", "live.it", "live.nl", "msn.com", "outlook.at", "outlook.be", "outlook.cl", "outlook.co.il", "outlook.co.nz", "outlook.co.th", "outlook.com", "outlook.com.ar", "outlook.com.au", "outlook.com.br", "outlook.com.gr", "outlook.com.pe", "outlook.com.tr", "outlook.com.vn", "outlook.cz", "outlook.de", "outlook.dk", "outlook.es", "outlook.fr", "outlook.hu", "outlook.id", "outlook.ie", "outlook.in", "outlook.it", "outlook.jp", "outlook.kr", "outlook.lv", "outlook.my", "outlook.ph", "outlook.pt", "outlook.sa", "outlook.sg", "outlook.sk", "passport.com"];
    var yahoo_domains = ["rocketmail.com", "yahoo.ca", "yahoo.co.uk", "yahoo.com", "yahoo.de", "yahoo.fr", "yahoo.in", "yahoo.it", "ymail.com"];
    var yandex_domains = ["yandex.ru", "yandex.ua", "yandex.kz", "yandex.com", "yandex.by", "ya.ru"];
    function dotsReplacer(match) {
      if (match.length > 1) {
        return match;
      }
      return "";
    }
    function normalizeEmail(email, options) {
      options = (0, _merge.default)(options, default_normalize_email_options);
      var raw_parts = email.split("@");
      var domain = raw_parts.pop();
      var user = raw_parts.join("@");
      var parts = [user, domain];
      parts[1] = parts[1].toLowerCase();
      if (parts[1] === "gmail.com" || parts[1] === "googlemail.com") {
        if (options.gmail_remove_subaddress) {
          parts[0] = parts[0].split("+")[0];
        }
        if (options.gmail_remove_dots) {
          parts[0] = parts[0].replace(/\.+/g, dotsReplacer);
        }
        if (!parts[0].length) {
          return false;
        }
        if (options.all_lowercase || options.gmail_lowercase) {
          parts[0] = parts[0].toLowerCase();
        }
        parts[1] = options.gmail_convert_googlemaildotcom ? "gmail.com" : parts[1];
      } else if (icloud_domains.indexOf(parts[1]) >= 0) {
        if (options.icloud_remove_subaddress) {
          parts[0] = parts[0].split("+")[0];
        }
        if (!parts[0].length) {
          return false;
        }
        if (options.all_lowercase || options.icloud_lowercase) {
          parts[0] = parts[0].toLowerCase();
        }
      } else if (outlookdotcom_domains.indexOf(parts[1]) >= 0) {
        if (options.outlookdotcom_remove_subaddress) {
          parts[0] = parts[0].split("+")[0];
        }
        if (!parts[0].length) {
          return false;
        }
        if (options.all_lowercase || options.outlookdotcom_lowercase) {
          parts[0] = parts[0].toLowerCase();
        }
      } else if (yahoo_domains.indexOf(parts[1]) >= 0) {
        if (options.yahoo_remove_subaddress) {
          var components = parts[0].split("-");
          parts[0] = components.length > 1 ? components.slice(0, -1).join("-") : components[0];
        }
        if (!parts[0].length) {
          return false;
        }
        if (options.all_lowercase || options.yahoo_lowercase) {
          parts[0] = parts[0].toLowerCase();
        }
      } else if (yandex_domains.indexOf(parts[1]) >= 0) {
        if (options.all_lowercase || options.yandex_lowercase) {
          parts[0] = parts[0].toLowerCase();
        }
        parts[1] = "yandex.ru";
      } else if (options.all_lowercase) {
        parts[0] = parts[0].toLowerCase();
      }
      return parts.join("@");
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isSlug.js
var require_isSlug = __commonJS({
  "node_modules/validator/lib/isSlug.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isSlug;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var charsetRegex = /^[^\s-_](?!.*?[-_]{2,})[a-z0-9-\\][^\s]*[^-_\s]$/;
    function isSlug(str) {
      (0, _assertString.default)(str);
      return charsetRegex.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isLicensePlate.js
var require_isLicensePlate = __commonJS({
  "node_modules/validator/lib/isLicensePlate.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLicensePlate;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var validators = {
      "cs-CZ": function csCZ(str) {
        return /^(([ABCDEFHKIJKLMNPRSTUVXYZ]|[0-9])-?){5,8}$/.test(str);
      },
      "de-DE": function deDE(str) {
        return /^((AW|UL|AK|GA|AÖ|LF|AZ|AM|AS|ZE|AN|AB|A|KG|KH|BA|EW|BZ|HY|KM|BT|HP|B|BC|BI|BO|FN|TT|ÜB|BN|AH|BS|FR|HB|ZZ|BB|BK|BÖ|OC|OK|CW|CE|C|CO|LH|CB|KW|LC|LN|DA|DI|DE|DH|SY|NÖ|DO|DD|DU|DN|D|EI|EA|EE|FI|EM|EL|EN|PF|ED|EF|ER|AU|ZP|E|ES|NT|EU|FL|FO|FT|FF|F|FS|FD|FÜ|GE|G|GI|GF|GS|ZR|GG|GP|GR|NY|ZI|GÖ|GZ|GT|HA|HH|HM|HU|WL|HZ|WR|RN|HK|HD|HN|HS|GK|HE|HF|RZ|HI|HG|HO|HX|IK|IL|IN|J|JL|KL|KA|KS|KF|KE|KI|KT|KO|KN|KR|KC|KU|K|LD|LL|LA|L|OP|LM|LI|LB|LU|LÖ|HL|LG|MD|GN|MZ|MA|ML|MR|MY|AT|DM|MC|NZ|RM|RG|MM|ME|MB|MI|FG|DL|HC|MW|RL|MK|MG|MÜ|WS|MH|M|MS|NU|NB|ND|NM|NK|NW|NR|NI|NF|DZ|EB|OZ|TG|TO|N|OA|GM|OB|CA|EH|FW|OF|OL|OE|OG|BH|LR|OS|AA|GD|OH|KY|NP|WK|PB|PA|PE|PI|PS|P|PM|PR|RA|RV|RE|R|H|SB|WN|RS|RD|RT|BM|NE|GV|RP|SU|GL|RO|GÜ|RH|EG|RW|PN|SK|MQ|RU|SZ|RI|SL|SM|SC|HR|FZ|VS|SW|SN|CR|SE|SI|SO|LP|SG|NH|SP|IZ|ST|BF|TE|HV|OD|SR|S|AC|DW|ZW|TF|TS|TR|TÜ|UM|PZ|TP|UE|UN|UH|MN|KK|VB|V|AE|PL|RC|VG|GW|PW|VR|VK|KB|WA|WT|BE|WM|WE|AP|MO|WW|FB|WZ|WI|WB|JE|WF|WO|W|WÜ|BL|Z|GC)[- ]?[A-Z]{1,2}[- ]?\d{1,4}|(AIC|FDB|ABG|SLN|SAW|KLZ|BUL|ESB|NAB|SUL|WST|ABI|AZE|BTF|KÖT|DKB|FEU|ROT|ALZ|SMÜ|WER|AUR|NOR|DÜW|BRK|HAB|TÖL|WOR|BAD|BAR|BER|BIW|EBS|KEM|MÜB|PEG|BGL|BGD|REI|WIL|BKS|BIR|WAT|BOR|BOH|BOT|BRB|BLK|HHM|NEB|NMB|WSF|LEO|HDL|WMS|WZL|BÜS|CHA|KÖZ|ROD|WÜM|CLP|NEC|COC|ZEL|COE|CUX|DAH|LDS|DEG|DEL|RSL|DLG|DGF|LAN|HEI|MED|DON|KIB|ROK|JÜL|MON|SLE|EBE|EIC|HIG|WBS|BIT|PRÜ|LIB|EMD|WIT|ERH|HÖS|ERZ|ANA|ASZ|MAB|MEK|STL|SZB|FDS|HCH|HOR|WOL|FRG|GRA|WOS|FRI|FFB|GAP|GER|BRL|CLZ|GTH|NOH|HGW|GRZ|LÖB|NOL|WSW|DUD|HMÜ|OHA|KRU|HAL|HAM|HBS|QLB|HVL|NAU|HAS|EBN|GEO|HOH|HDH|ERK|HER|WAN|HEF|ROF|HBN|ALF|HSK|USI|NAI|REH|SAN|KÜN|ÖHR|HOL|WAR|ARN|BRG|GNT|HOG|WOH|KEH|MAI|PAR|RID|ROL|KLE|GEL|KUS|KYF|ART|SDH|LDK|DIL|MAL|VIB|LER|BNA|GHA|GRM|MTL|WUR|LEV|LIF|STE|WEL|LIP|VAI|LUP|HGN|LBZ|LWL|PCH|STB|DAN|MKK|SLÜ|MSP|TBB|MGH|MTK|BIN|MSH|EIL|HET|SGH|BID|MYK|MSE|MST|MÜR|WRN|MEI|GRH|RIE|MZG|MIL|OBB|BED|FLÖ|MOL|FRW|SEE|SRB|AIB|MOS|BCH|ILL|SOB|NMS|NEA|SEF|UFF|NEW|VOH|NDH|TDO|NWM|GDB|GVM|WIS|NOM|EIN|GAN|LAU|HEB|OHV|OSL|SFB|ERB|LOS|BSK|KEL|BSB|MEL|WTL|OAL|FÜS|MOD|OHZ|OPR|BÜR|PAF|PLÖ|CAS|GLA|REG|VIT|ECK|SIM|GOA|EMS|DIZ|GOH|RÜD|SWA|NES|KÖN|MET|LRO|BÜZ|DBR|ROS|TET|HRO|ROW|BRV|HIP|PAN|GRI|SHK|EIS|SRO|SOK|LBS|SCZ|MER|QFT|SLF|SLS|HOM|SLK|ASL|BBG|SBK|SFT|SHG|MGN|MEG|ZIG|SAD|NEN|OVI|SHA|BLB|SIG|SON|SPN|FOR|GUB|SPB|IGB|WND|STD|STA|SDL|OBG|HST|BOG|SHL|PIR|FTL|SEB|SÖM|SÜW|TIR|SAB|TUT|ANG|SDT|LÜN|LSZ|MHL|VEC|VER|VIE|OVL|ANK|OVP|SBG|UEM|UER|WLG|GMN|NVP|RDG|RÜG|DAU|FKB|WAF|WAK|SLZ|WEN|SOG|APD|WUG|GUN|ESW|WIZ|WES|DIN|BRA|BÜD|WHV|HWI|GHC|WTM|WOB|WUN|MAK|SEL|OCH|HOT|WDA)[- ]?(([A-Z][- ]?\d{1,4})|([A-Z]{2}[- ]?\d{1,3})))[- ]?(E|H)?$/.test(str);
      },
      "de-LI": function deLI(str) {
        return /^FL[- ]?\d{1,5}[UZ]?$/.test(str);
      },
      "fi-FI": function fiFI(str) {
        return /^(?=.{4,7})(([A-Z]{1,3}|[0-9]{1,3})[\s-]?([A-Z]{1,3}|[0-9]{1,5}))$/.test(str);
      },
      "pt-PT": function ptPT(str) {
        return /^([A-Z]{2}|[0-9]{2})[ -·]?([A-Z]{2}|[0-9]{2})[ -·]?([A-Z]{2}|[0-9]{2})$/.test(str);
      },
      "sq-AL": function sqAL(str) {
        return /^[A-Z]{2}[- ]?((\d{3}[- ]?(([A-Z]{2})|T))|(R[- ]?\d{3}))$/.test(str);
      },
      "pt-BR": function ptBR(str) {
        return /^[A-Z]{3}[ -]?[0-9][A-Z][0-9]{2}|[A-Z]{3}[ -]?[0-9]{4}$/.test(str);
      }
    };
    function isLicensePlate(str, locale) {
      (0, _assertString.default)(str);
      if (locale in validators) {
        return validators[locale](str);
      } else if (locale === "any") {
        for (var key in validators) {
          var validator = validators[key];
          if (validator(str)) {
            return true;
          }
        }
        return false;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isStrongPassword.js
var require_isStrongPassword = __commonJS({
  "node_modules/validator/lib/isStrongPassword.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isStrongPassword;
    var _merge = _interopRequireDefault(require_merge());
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var upperCaseRegex = /^[A-Z]$/;
    var lowerCaseRegex = /^[a-z]$/;
    var numberRegex = /^[0-9]$/;
    var symbolRegex = /^[-#!$@%^&*()_+|~=`{}\[\]:";'<>?,.\/ ]$/;
    var defaultOptions = {
      minLength: 8,
      minLowercase: 1,
      minUppercase: 1,
      minNumbers: 1,
      minSymbols: 1,
      returnScore: false,
      pointsPerUnique: 1,
      pointsPerRepeat: 0.5,
      pointsForContainingLower: 10,
      pointsForContainingUpper: 10,
      pointsForContainingNumber: 10,
      pointsForContainingSymbol: 10
    };
    function countChars(str) {
      var result = {};
      Array.from(str).forEach(function(char) {
        var curVal = result[char];
        if (curVal) {
          result[char] += 1;
        } else {
          result[char] = 1;
        }
      });
      return result;
    }
    function analyzePassword(password) {
      var charMap = countChars(password);
      var analysis = {
        length: password.length,
        uniqueChars: Object.keys(charMap).length,
        uppercaseCount: 0,
        lowercaseCount: 0,
        numberCount: 0,
        symbolCount: 0
      };
      Object.keys(charMap).forEach(function(char) {
        if (upperCaseRegex.test(char)) {
          analysis.uppercaseCount += charMap[char];
        } else if (lowerCaseRegex.test(char)) {
          analysis.lowercaseCount += charMap[char];
        } else if (numberRegex.test(char)) {
          analysis.numberCount += charMap[char];
        } else if (symbolRegex.test(char)) {
          analysis.symbolCount += charMap[char];
        }
      });
      return analysis;
    }
    function scorePassword(analysis, scoringOptions) {
      var points = 0;
      points += analysis.uniqueChars * scoringOptions.pointsPerUnique;
      points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;
      if (analysis.lowercaseCount > 0) {
        points += scoringOptions.pointsForContainingLower;
      }
      if (analysis.uppercaseCount > 0) {
        points += scoringOptions.pointsForContainingUpper;
      }
      if (analysis.numberCount > 0) {
        points += scoringOptions.pointsForContainingNumber;
      }
      if (analysis.symbolCount > 0) {
        points += scoringOptions.pointsForContainingSymbol;
      }
      return points;
    }
    function isStrongPassword(str) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      (0, _assertString.default)(str);
      var analysis = analyzePassword(str);
      options = (0, _merge.default)(options || {}, defaultOptions);
      if (options.returnScore) {
        return scorePassword(analysis, options);
      }
      return analysis.length >= options.minLength && analysis.lowercaseCount >= options.minLowercase && analysis.uppercaseCount >= options.minUppercase && analysis.numberCount >= options.minNumbers && analysis.symbolCount >= options.minSymbols;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isVAT.js
var require_isVAT = __commonJS({
  "node_modules/validator/lib/isVAT.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isVAT;
    exports.vatMatchers = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var vatMatchers = {
      GB: /^GB((\d{3} \d{4} ([0-8][0-9]|9[0-6]))|(\d{9} \d{3})|(((GD[0-4])|(HA[5-9]))[0-9]{2}))$/,
      IT: /^(IT)?[0-9]{11}$/,
      NL: /^(NL)?[0-9]{9}B[0-9]{2}$/
    };
    exports.vatMatchers = vatMatchers;
    function isVAT(str, countryCode) {
      (0, _assertString.default)(str);
      (0, _assertString.default)(countryCode);
      if (countryCode in vatMatchers) {
        return vatMatchers[countryCode].test(str);
      }
      throw new Error("Invalid country code: '".concat(countryCode, "'"));
    }
  }
});

// node_modules/validator/index.js
var require_validator = __commonJS({
  "node_modules/validator/index.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toDate = _interopRequireDefault(require_toDate());
    var _toFloat = _interopRequireDefault(require_toFloat());
    var _toInt = _interopRequireDefault(require_toInt());
    var _toBoolean = _interopRequireDefault(require_toBoolean());
    var _equals = _interopRequireDefault(require_equals());
    var _contains = _interopRequireDefault(require_contains());
    var _matches = _interopRequireDefault(require_matches());
    var _isEmail = _interopRequireDefault(require_isEmail());
    var _isURL = _interopRequireDefault(require_isURL());
    var _isMACAddress = _interopRequireDefault(require_isMACAddress());
    var _isIP = _interopRequireDefault(require_isIP());
    var _isIPRange = _interopRequireDefault(require_isIPRange());
    var _isFQDN = _interopRequireDefault(require_isFQDN());
    var _isDate = _interopRequireDefault(require_isDate());
    var _isBoolean = _interopRequireDefault(require_isBoolean());
    var _isLocale = _interopRequireDefault(require_isLocale());
    var _isAlpha = _interopRequireWildcard(require_isAlpha());
    var _isAlphanumeric = _interopRequireWildcard(require_isAlphanumeric());
    var _isNumeric = _interopRequireDefault(require_isNumeric());
    var _isPassportNumber = _interopRequireDefault(require_isPassportNumber());
    var _isPort = _interopRequireDefault(require_isPort());
    var _isLowercase = _interopRequireDefault(require_isLowercase());
    var _isUppercase = _interopRequireDefault(require_isUppercase());
    var _isIMEI = _interopRequireDefault(require_isIMEI());
    var _isAscii = _interopRequireDefault(require_isAscii());
    var _isFullWidth = _interopRequireDefault(require_isFullWidth());
    var _isHalfWidth = _interopRequireDefault(require_isHalfWidth());
    var _isVariableWidth = _interopRequireDefault(require_isVariableWidth());
    var _isMultibyte = _interopRequireDefault(require_isMultibyte());
    var _isSemVer = _interopRequireDefault(require_isSemVer());
    var _isSurrogatePair = _interopRequireDefault(require_isSurrogatePair());
    var _isInt = _interopRequireDefault(require_isInt());
    var _isFloat = _interopRequireWildcard(require_isFloat());
    var _isDecimal = _interopRequireDefault(require_isDecimal());
    var _isHexadecimal = _interopRequireDefault(require_isHexadecimal());
    var _isOctal = _interopRequireDefault(require_isOctal());
    var _isDivisibleBy = _interopRequireDefault(require_isDivisibleBy());
    var _isHexColor = _interopRequireDefault(require_isHexColor());
    var _isRgbColor = _interopRequireDefault(require_isRgbColor());
    var _isHSL = _interopRequireDefault(require_isHSL());
    var _isISRC = _interopRequireDefault(require_isISRC());
    var _isIBAN = _interopRequireWildcard(require_isIBAN());
    var _isBIC = _interopRequireDefault(require_isBIC());
    var _isMD = _interopRequireDefault(require_isMD5());
    var _isHash = _interopRequireDefault(require_isHash());
    var _isJWT = _interopRequireDefault(require_isJWT());
    var _isJSON = _interopRequireDefault(require_isJSON());
    var _isEmpty = _interopRequireDefault(require_isEmpty());
    var _isLength = _interopRequireDefault(require_isLength());
    var _isByteLength = _interopRequireDefault(require_isByteLength());
    var _isUUID = _interopRequireDefault(require_isUUID());
    var _isMongoId = _interopRequireDefault(require_isMongoId());
    var _isAfter = _interopRequireDefault(require_isAfter());
    var _isBefore = _interopRequireDefault(require_isBefore());
    var _isIn = _interopRequireDefault(require_isIn());
    var _isCreditCard = _interopRequireDefault(require_isCreditCard());
    var _isIdentityCard = _interopRequireDefault(require_isIdentityCard());
    var _isEAN = _interopRequireDefault(require_isEAN());
    var _isISIN = _interopRequireDefault(require_isISIN());
    var _isISBN = _interopRequireDefault(require_isISBN());
    var _isISSN = _interopRequireDefault(require_isISSN());
    var _isTaxID = _interopRequireDefault(require_isTaxID());
    var _isMobilePhone = _interopRequireWildcard(require_isMobilePhone());
    var _isEthereumAddress = _interopRequireDefault(require_isEthereumAddress());
    var _isCurrency = _interopRequireDefault(require_isCurrency());
    var _isBtcAddress = _interopRequireDefault(require_isBtcAddress());
    var _isISO = _interopRequireDefault(require_isISO8601());
    var _isRFC = _interopRequireDefault(require_isRFC3339());
    var _isISO31661Alpha = _interopRequireDefault(require_isISO31661Alpha2());
    var _isISO31661Alpha2 = _interopRequireDefault(require_isISO31661Alpha3());
    var _isISO2 = _interopRequireDefault(require_isISO4217());
    var _isBase = _interopRequireDefault(require_isBase32());
    var _isBase2 = _interopRequireDefault(require_isBase58());
    var _isBase3 = _interopRequireDefault(require_isBase64());
    var _isDataURI = _interopRequireDefault(require_isDataURI());
    var _isMagnetURI = _interopRequireDefault(require_isMagnetURI());
    var _isMimeType = _interopRequireDefault(require_isMimeType());
    var _isLatLong = _interopRequireDefault(require_isLatLong());
    var _isPostalCode = _interopRequireWildcard(require_isPostalCode());
    var _ltrim = _interopRequireDefault(require_ltrim());
    var _rtrim = _interopRequireDefault(require_rtrim());
    var _trim = _interopRequireDefault(require_trim());
    var _escape = _interopRequireDefault(require_escape());
    var _unescape = _interopRequireDefault(require_unescape());
    var _stripLow = _interopRequireDefault(require_stripLow());
    var _whitelist = _interopRequireDefault(require_whitelist());
    var _blacklist = _interopRequireDefault(require_blacklist());
    var _isWhitelisted = _interopRequireDefault(require_isWhitelisted());
    var _normalizeEmail = _interopRequireDefault(require_normalizeEmail());
    var _isSlug = _interopRequireDefault(require_isSlug());
    var _isLicensePlate = _interopRequireDefault(require_isLicensePlate());
    var _isStrongPassword = _interopRequireDefault(require_isStrongPassword());
    var _isVAT = _interopRequireDefault(require_isVAT());
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function")
        return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var version = "13.7.0";
    var validator = {
      version,
      toDate: _toDate.default,
      toFloat: _toFloat.default,
      toInt: _toInt.default,
      toBoolean: _toBoolean.default,
      equals: _equals.default,
      contains: _contains.default,
      matches: _matches.default,
      isEmail: _isEmail.default,
      isURL: _isURL.default,
      isMACAddress: _isMACAddress.default,
      isIP: _isIP.default,
      isIPRange: _isIPRange.default,
      isFQDN: _isFQDN.default,
      isBoolean: _isBoolean.default,
      isIBAN: _isIBAN.default,
      isBIC: _isBIC.default,
      isAlpha: _isAlpha.default,
      isAlphaLocales: _isAlpha.locales,
      isAlphanumeric: _isAlphanumeric.default,
      isAlphanumericLocales: _isAlphanumeric.locales,
      isNumeric: _isNumeric.default,
      isPassportNumber: _isPassportNumber.default,
      isPort: _isPort.default,
      isLowercase: _isLowercase.default,
      isUppercase: _isUppercase.default,
      isAscii: _isAscii.default,
      isFullWidth: _isFullWidth.default,
      isHalfWidth: _isHalfWidth.default,
      isVariableWidth: _isVariableWidth.default,
      isMultibyte: _isMultibyte.default,
      isSemVer: _isSemVer.default,
      isSurrogatePair: _isSurrogatePair.default,
      isInt: _isInt.default,
      isIMEI: _isIMEI.default,
      isFloat: _isFloat.default,
      isFloatLocales: _isFloat.locales,
      isDecimal: _isDecimal.default,
      isHexadecimal: _isHexadecimal.default,
      isOctal: _isOctal.default,
      isDivisibleBy: _isDivisibleBy.default,
      isHexColor: _isHexColor.default,
      isRgbColor: _isRgbColor.default,
      isHSL: _isHSL.default,
      isISRC: _isISRC.default,
      isMD5: _isMD.default,
      isHash: _isHash.default,
      isJWT: _isJWT.default,
      isJSON: _isJSON.default,
      isEmpty: _isEmpty.default,
      isLength: _isLength.default,
      isLocale: _isLocale.default,
      isByteLength: _isByteLength.default,
      isUUID: _isUUID.default,
      isMongoId: _isMongoId.default,
      isAfter: _isAfter.default,
      isBefore: _isBefore.default,
      isIn: _isIn.default,
      isCreditCard: _isCreditCard.default,
      isIdentityCard: _isIdentityCard.default,
      isEAN: _isEAN.default,
      isISIN: _isISIN.default,
      isISBN: _isISBN.default,
      isISSN: _isISSN.default,
      isMobilePhone: _isMobilePhone.default,
      isMobilePhoneLocales: _isMobilePhone.locales,
      isPostalCode: _isPostalCode.default,
      isPostalCodeLocales: _isPostalCode.locales,
      isEthereumAddress: _isEthereumAddress.default,
      isCurrency: _isCurrency.default,
      isBtcAddress: _isBtcAddress.default,
      isISO8601: _isISO.default,
      isRFC3339: _isRFC.default,
      isISO31661Alpha2: _isISO31661Alpha.default,
      isISO31661Alpha3: _isISO31661Alpha2.default,
      isISO4217: _isISO2.default,
      isBase32: _isBase.default,
      isBase58: _isBase2.default,
      isBase64: _isBase3.default,
      isDataURI: _isDataURI.default,
      isMagnetURI: _isMagnetURI.default,
      isMimeType: _isMimeType.default,
      isLatLong: _isLatLong.default,
      ltrim: _ltrim.default,
      rtrim: _rtrim.default,
      trim: _trim.default,
      escape: _escape.default,
      unescape: _unescape.default,
      stripLow: _stripLow.default,
      whitelist: _whitelist.default,
      blacklist: _blacklist.default,
      isWhitelisted: _isWhitelisted.default,
      normalizeEmail: _normalizeEmail.default,
      toString,
      isSlug: _isSlug.default,
      isStrongPassword: _isStrongPassword.default,
      isTaxID: _isTaxID.default,
      isDate: _isDate.default,
      isLicensePlate: _isLicensePlate.default,
      isVAT: _isVAT.default,
      ibanLocales: _isIBAN.locales
    };
    var _default = validator;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/moment/moment.js
var require_moment = __commonJS({
  "node_modules/moment/moment.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.moment = factory();
    })(exports, function() {
      "use strict";
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
      }
      function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
      }
      function map(arr, fn2) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
          res.push(fn2(arr[i], i));
        }
        return res;
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp(b, "toString")) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, "valueOf")) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function(fun) {
          var t = Object(this), len = t.length >>> 0, i;
          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
            return i != null;
          }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }
        return m._isValid;
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }
        return m;
      }
      var momentProperties = hooks.momentProperties = [], updateInProgress = false;
      function copyConfig(to2, from2) {
        var i, prop, val;
        if (!isUndefined(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentProperties.length > 0) {
          for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from2[prop];
            if (!isUndefined(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
          console.warn("Deprecation warning: " + msg);
        }
      }
      function deprecate(msg, fn2) {
        var firstTime = true;
        return extend(function() {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [], arg, i, key;
            for (i = 0; i < arguments.length; i++) {
              arg = "";
              if (typeof arguments[i] === "object") {
                arg += "\n[" + i + "] ";
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ": " + arguments[0][key] + ", ";
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
            firstTime = false;
          }
          return fn2.apply(this, arguments);
        }, fn2);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
      }
      function set(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) {
              this[i] = prop;
            } else {
              this["_" + i] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function(obj) {
          var i, res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      };
      function calendar(key, mom, now2) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
        return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
      function addFormatToken(token2, padded, ordinal2, callback) {
        var func = callback;
        if (typeof callback === "string") {
          func = function() {
            return this[callback]();
          };
        }
        if (token2) {
          formatTokenFunctions[token2] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function() {
            return this.localeData().ordinal(func.apply(this, arguments), token2);
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
      }
      function makeFormatFunction(format2) {
        var array = format2.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }
        return function(mom) {
          var output = "", i2;
          for (i2 = 0; i2 < length; i2++) {
            output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
          }
          return output;
        };
      }
      function formatMoment(m, format2) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format2 = expandFormat(format2, m.localeData());
        formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
        return formatFunctions[format2](m);
      }
      function expandFormat(format2, locale2) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format2)) {
          format2 = format2.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }
        return format2;
      }
      var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      };
      function longDateFormat(key) {
        var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format2 || !formatUpper) {
          return format2;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
          if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
            return tok.slice(1);
          }
          return tok;
        }).join("");
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = "Invalid date";
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace("%d", number);
      }
      var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
        return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
      }
      var aliases = {};
      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
      }
      function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {};
      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }
      function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({ unit: u, priority: priorities[u] });
          }
        }
        units.sort(function(a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      function makeGetSet(unit, keepTime) {
        return function(value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
      }
      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            value = toInt(value);
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()));
          } else {
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
          }
        }
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (typeof units === "object") {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units), i;
          for (i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
      regexes = {};
      function addRegexToken(token2, regex, strictRegex) {
        regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token2, config) {
        if (!hasOwnProp(regexes, token2)) {
          return new RegExp(unescapeFormat(token2));
        }
        return regexes[token2](config._strict, config._locale);
      }
      function unescapeFormat(s) {
        return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        }));
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      var tokens = {};
      function addParseToken(token2, callback) {
        var i, func = callback;
        if (typeof token2 === "string") {
          token2 = [token2];
        }
        if (isNumber(callback)) {
          func = function(input, array) {
            array[callback] = toInt(input);
          };
        }
        for (i = 0; i < token2.length; i++) {
          tokens[token2[i]] = func;
        }
      }
      function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config, token3) {
          config._w = config._w || {};
          callback(input, config._w, config, token3);
        });
      }
      function addTimeToArrayFromToken(token2, input, config) {
        if (input != null && hasOwnProp(tokens, token2)) {
          tokens[token2](input, config._a, config, token2);
        }
      }
      var YEAR = 0, MONTH = 1, DATE2 = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
      function mod(n, x) {
        return (n % x + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function(o) {
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      });
      addFormatToken("MMM", 0, 0, function(format2) {
        return this.localeData().monthsShort(this, format2);
      });
      addFormatToken("MMMM", 0, 0, function(format2) {
        return this.localeData().months(this, format2);
      });
      addUnitAlias("month", "M");
      addUnitPriority("month", 8);
      addRegexToken("M", match1to2);
      addRegexToken("MM", match1to2, match2);
      addRegexToken("MMM", function(isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken("MMMM", function(isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(["M", "MM"], function(input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
        var month = config._locale.monthsParse(input, token2, config._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
      function localeMonths(m, format2) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months["standalone"];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
      }
      function localeMonthsShort(m, format2) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
      }
      function handleStrictParse(monthName, format2, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([2e3, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format2, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format2, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
            this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
          }
          if (!strict && !this._monthsParse[i]) {
            regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
            this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }
      function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === "string") {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, "Month");
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsShortRegex")) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsRegex")) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          shortPieces.push(this.monthsShort(mom, ""));
          longPieces.push(this.months(mom, ""));
          mixedPieces.push(this.months(mom, ""));
          mixedPieces.push(this.monthsShort(mom, ""));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
      }
      addFormatToken("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : "+" + y;
      });
      addFormatToken(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      });
      addFormatToken(0, ["YYYY", 4], 0, "year");
      addFormatToken(0, ["YYYYY", 5], 0, "year");
      addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
      addUnitAlias("year", "y");
      addUnitPriority("year", 1);
      addRegexToken("Y", matchSigned);
      addRegexToken("YY", match1to2, match2);
      addRegexToken("YYYY", match1to4, match4);
      addRegexToken("YYYYY", match1to6, match6);
      addRegexToken("YYYYYY", match1to6, match6);
      addParseToken(["YYYYY", "YYYYYY"], YEAR);
      addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet("FullYear", true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate(y) {
        var date, args;
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken("w", ["ww", 2], "wo", "week");
      addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
      addUnitAlias("week", "w");
      addUnitAlias("isoWeek", "W");
      addUnitPriority("week", 5);
      addUnitPriority("isoWeek", 5);
      addRegexToken("w", match1to2);
      addRegexToken("ww", match1to2, match2);
      addRegexToken("W", match1to2);
      addRegexToken("WW", match1to2, match2);
      addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      });
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        doy: 6
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      addFormatToken("d", 0, "do", "day");
      addFormatToken("dd", 0, 0, function(format2) {
        return this.localeData().weekdaysMin(this, format2);
      });
      addFormatToken("ddd", 0, 0, function(format2) {
        return this.localeData().weekdaysShort(this, format2);
      });
      addFormatToken("dddd", 0, 0, function(format2) {
        return this.localeData().weekdays(this, format2);
      });
      addFormatToken("e", 0, 0, "weekday");
      addFormatToken("E", 0, 0, "isoWeekday");
      addUnitAlias("day", "d");
      addUnitAlias("weekday", "e");
      addUnitAlias("isoWeekday", "E");
      addUnitPriority("day", 11);
      addUnitPriority("weekday", 11);
      addUnitPriority("isoWeekday", 11);
      addRegexToken("d", match1to2);
      addRegexToken("e", match1to2);
      addRegexToken("E", match1to2);
      addRegexToken("dd", function(isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken("ddd", function(isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken("dddd", function(isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
        var weekday = config._locale.weekdaysParse(input, token2, config._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
        week[token2] = toInt(input);
      });
      function parseWeekday(input, locale2) {
        if (typeof input !== "string") {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === "number") {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === "string") {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m, format2) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }
      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format2, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([2e3, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, "").toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, "").toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format2, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format2, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
            this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
            this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
          }
          if (!this._weekdaysParse[i]) {
            regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
            this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, "d");
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysShortRegex")) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysMinRegex")) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ""));
          shortp = regexEscape(this.weekdaysShort(mom, ""));
          longp = regexEscape(this.weekdays(mom, ""));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
        this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken("H", ["HH", 2], 0, "hour");
      addFormatToken("h", ["hh", 2], 0, hFormat);
      addFormatToken("k", ["kk", 2], 0, kFormat);
      addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token2, lowercase) {
        addFormatToken(token2, 0, 0, function() {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }
      meridiem("a", true);
      meridiem("A", false);
      addUnitAlias("hour", "h");
      addUnitPriority("hour", 13);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken("a", matchMeridiem);
      addRegexToken("A", matchMeridiem);
      addRegexToken("H", match1to2);
      addRegexToken("h", match1to2);
      addRegexToken("k", match1to2);
      addRegexToken("HH", match1to2, match2);
      addRegexToken("hh", match1to2, match2);
      addRegexToken("kk", match1to2, match2);
      addRegexToken("hmm", match3to4);
      addRegexToken("hmmss", match5to6);
      addRegexToken("Hmm", match3to4);
      addRegexToken("Hmmss", match5to6);
      addParseToken(["H", "HH"], HOUR);
      addParseToken(["k", "kk"], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(["a", "A"], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(["h", "hh"], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? "pm" : "PM";
        } else {
          return isLower ? "am" : "AM";
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      var locales = {}, localeFamilies = {}, globalLocale;
      function commonPrefix(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
      }
      function chooseLocale(names) {
        var i = 0, j, next, locale2, split;
        while (i < names.length) {
          split = normalizeLocale(names[i]).split("-");
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split("-") : null;
          while (j > 0) {
            locale2 = loadLocale(split.slice(0, j).join("-"));
            if (locale2) {
              return locale2;
            }
            if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale;
      }
      function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = __require;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            locales[name] = null;
          }
        }
        return locales[name];
      }
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== "undefined" && console.warn) {
              console.warn("Locale " + key + " not found. Did you forget to load it?");
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale2, parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale2 = loadLocale(config.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name,
                  config
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function(x) {
              defineLocale(x.name, x.config);
            });
          }
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale2, tmpLocale, parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale2 = new Locale(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
          }
          getSetGlobalLocale(name);
        } else {
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }
      function getLocale(key) {
        var locale2;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray(key)) {
          locale2 = loadLocale(key);
          if (locale2) {
            return locale2;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE2] < 1 || a[DATE2] > daysInMonth(a[YEAR], a[MONTH]) ? DATE2 : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE2)) {
            overflow = DATE2;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m).overflow = overflow;
        }
        return m;
      }
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/],
        ["YYYYMM", /\d{6}/, false],
        ["YYYY", /\d{4}/, false]
      ], isoTimes = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
      ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };
      function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                timeFormat = (match[2] || " ") + isoTimes[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = "Z";
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
        ];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s) {
        return s.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
          return h * 60 + m;
        }
      }
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
        config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
      });
      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE2] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE2] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function() {
      };
      hooks.RFC_2822 = function() {
      };
      function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era;
        tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens2.length; i++) {
          token2 = tokens2[i];
          parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token2]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token2);
            }
            addTimeToArrayFromToken(token2, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token2);
          }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = void 0;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false;
        if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }
        for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
        config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function(obj) {
          return obj && parseInt(obj, 10);
        });
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          res.add(1, "d");
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i, format2 = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format2 === void 0 && input === "") {
          return createInvalid({ nullInput: true });
        }
        if (typeof input === "string") {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format2)) {
          configFromStringAndArray(config);
        } else if (format2) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function(obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
        var c = {};
        if (format2 === true || format2 === false) {
          strict = format2;
          format2 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = void 0;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale2;
        c._i = input;
        c._f = format2;
        c._strict = strict;
        return createFromConfig(c);
      }
      function createLocal(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, false);
      }
      var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      });
      function pickBy(fn2, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn2](res)) {
            res = moments[i];
          }
        }
        return res;
      }
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
      }
      var now = function() {
        return Date.now ? Date.now() : +new Date();
      };
      var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ];
      function isDurationValid(m) {
        var key, unitHasDecimal = false, i;
        for (key in m) {
          if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }
        for (i = 0; i < ordering.length; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token2, separator) {
        addFormatToken(token2, 0, 0, function() {
          var offset2 = this.utcOffset(), sign2 = "+";
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = "-";
          }
          return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
        });
      }
      offset("Z", ":");
      offset("ZZ", "");
      addRegexToken("Z", matchShortOffset);
      addRegexToken("ZZ", matchShortOffset);
      addParseToken(["Z", "ZZ"], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || "").match(matcher), chunk, parts, minutes2;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset());
      }
      hooks.updateOffset = function() {
      };
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === "string") {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, "m");
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset2, "m"), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== "string") {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), "m");
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === "string") {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {}, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input, match = null, sign2, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE2]) * sign2,
            h: toInt(match[HOUR]) * sign2,
            m: toInt(match[MINUTE]) * sign2,
            s: toInt(match[SECOND]) * sign2,
            ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
          };
        } else if (match = isoRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign2),
            M: parseIso(match[3], sign2),
            w: parseIso(match[4], sign2),
            d: parseIso(match[5], sign2),
            h: parseIso(match[6], sign2),
            m: parseIso(match[7], sign2),
            s: parseIso(match[8], sign2)
          };
        } else if (duration == null) {
          duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, "_isValid")) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function(val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get(mom, "Month") + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
      function isString(input) {
        return typeof input === "string" || input instanceof String;
      }
      function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "years",
          "year",
          "y",
          "months",
          "month",
          "M",
          "days",
          "day",
          "d",
          "dates",
          "date",
          "D",
          "hours",
          "hour",
          "h",
          "minutes",
          "minute",
          "m",
          "seconds",
          "second",
          "s",
          "milliseconds",
          "millisecond",
          "ms"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "sameDay",
          "nextDay",
          "lastDay",
          "nextWeek",
          "lastWeek",
          "sameElse"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, "days", true);
        return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
        return this.format(output || this.localeData().calendar(format2, this, createLocal(now2)));
      }
      function clone() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case "year":
            output = monthDiff(this, that) / 12;
            break;
          case "month":
            output = monthDiff(this, that);
            break;
          case "quarter":
            output = monthDiff(this, that) / 3;
            break;
          case "second":
            output = (this - that) / 1e3;
            break;
          case "minute":
            output = (this - that) / 6e4;
            break;
          case "hour":
            output = (this - that) / 36e5;
            break;
          case "day":
            output = (this - that - zoneDelta) / 864e5;
            break;
          case "week":
            output = (this - that - zoneDelta) / 6048e5;
            break;
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          return -monthDiff(b, a);
        }
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
          adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
      hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      function toString2() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
        }
        if (isFunction(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
          }
        }
        return formatMoment(m, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
      }
      function inspect() {
        if (!this.isValid()) {
          return "moment.invalid(/* " + this._i + " */)";
        }
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
          zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      });
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year(), 0, 1);
            break;
          case "quarter":
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;
          case "month":
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case "week":
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;
          case "isoWeek":
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case "hour":
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;
          case "minute":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case "second":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case "quarter":
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;
          case "month":
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case "week":
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;
          case "isoWeek":
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case "hour":
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;
          case "minute":
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case "second":
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond()
        ];
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }
      function toJSON() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken("N", 0, 0, "eraAbbr");
      addFormatToken("NN", 0, 0, "eraAbbr");
      addFormatToken("NNN", 0, 0, "eraAbbr");
      addFormatToken("NNNN", 0, 0, "eraName");
      addFormatToken("NNNNN", 0, 0, "eraNarrow");
      addFormatToken("y", ["y", 1], "yo", "eraYear");
      addFormatToken("y", ["yy", 2], 0, "eraYear");
      addFormatToken("y", ["yyy", 3], 0, "eraYear");
      addFormatToken("y", ["yyyy", 4], 0, "eraYear");
      addRegexToken("N", matchEraAbbr);
      addRegexToken("NN", matchEraAbbr);
      addRegexToken("NNN", matchEraAbbr);
      addRegexToken("NNNN", matchEraName);
      addRegexToken("NNNNN", matchEraNarrow);
      addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(input, array, config, token2) {
        var era = config._locale.erasParse(input, token2, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      });
      addRegexToken("y", matchUnsigned);
      addRegexToken("yy", matchUnsigned);
      addRegexToken("yyy", matchUnsigned);
      addRegexToken("yyyy", matchUnsigned);
      addRegexToken("yo", matchEraYearOrdinal);
      addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
      addParseToken(["yo"], function(input, array, config, token2) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m, format2) {
        var i, l, date, eras = this._eras || getLocale("en")._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (typeof eras[i].since) {
            case "string":
              date = hooks(eras[i].since).startOf("day");
              eras[i].since = date.valueOf();
              break;
          }
          switch (typeof eras[i].until) {
            case "undefined":
              eras[i].until = Infinity;
              break;
            case "string":
              date = hooks(eras[i].until).startOf("day").valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format2, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();
          if (strict) {
            switch (format2) {
              case "N":
              case "NN":
              case "NNN":
                if (abbr === eraName) {
                  return eras[i];
                }
                break;
              case "NNNN":
                if (name === eraName) {
                  return eras[i];
                }
                break;
              case "NNNNN":
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }
        return "";
      }
      function getEraNarrow() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }
        return "";
      }
      function getEraAbbr() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }
        return "";
      }
      function getEraYear() {
        var i, l, dir, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? 1 : -1;
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
            return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          namePieces.push(regexEscape(eras[i].name));
          abbrPieces.push(regexEscape(eras[i].abbr));
          narrowPieces.push(regexEscape(eras[i].narrow));
          mixedPieces.push(regexEscape(eras[i].name));
          mixedPieces.push(regexEscape(eras[i].abbr));
          mixedPieces.push(regexEscape(eras[i].narrow));
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
      }
      addFormatToken(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token2, getter) {
        addFormatToken(0, [token2, token2.length], 0, getter);
      }
      addWeekYearFormatToken("gggg", "weekYear");
      addWeekYearFormatToken("ggggg", "weekYear");
      addWeekYearFormatToken("GGGG", "isoWeekYear");
      addWeekYearFormatToken("GGGGG", "isoWeekYear");
      addUnitAlias("weekYear", "gg");
      addUnitAlias("isoWeekYear", "GG");
      addUnitPriority("weekYear", 1);
      addUnitPriority("isoWeekYear", 1);
      addRegexToken("G", matchSigned);
      addRegexToken("g", matchSigned);
      addRegexToken("GG", match1to2, match2);
      addRegexToken("gg", match1to2, match2);
      addRegexToken("GGGG", match1to4, match4);
      addRegexToken("gggg", match1to4, match4);
      addRegexToken("GGGGG", match1to6, match6);
      addRegexToken("ggggg", match1to6, match6);
      addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
        week[token2] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken("Q", 0, "Qo", "quarter");
      addUnitAlias("quarter", "Q");
      addUnitPriority("quarter", 7);
      addRegexToken("Q", match1);
      addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken("D", ["DD", 2], "Do", "date");
      addUnitAlias("date", "D");
      addUnitPriority("date", 9);
      addRegexToken("D", match1to2);
      addRegexToken("DD", match1to2, match2);
      addRegexToken("Do", function(isStrict, locale2) {
        return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(["D", "DD"], DATE2);
      addParseToken("Do", function(input, array) {
        array[DATE2] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet("Date", true);
      addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
      addUnitAlias("dayOfYear", "DDD");
      addUnitPriority("dayOfYear", 4);
      addRegexToken("DDD", match1to3);
      addRegexToken("DDDD", match3);
      addParseToken(["DDD", "DDDD"], function(input, array, config) {
        config._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      }
      addFormatToken("m", ["mm", 2], 0, "minute");
      addUnitAlias("minute", "m");
      addUnitPriority("minute", 14);
      addRegexToken("m", match1to2);
      addRegexToken("mm", match1to2, match2);
      addParseToken(["m", "mm"], MINUTE);
      var getSetMinute = makeGetSet("Minutes", false);
      addFormatToken("s", ["ss", 2], 0, "second");
      addUnitAlias("second", "s");
      addUnitPriority("second", 15);
      addRegexToken("s", match1to2);
      addRegexToken("ss", match1to2, match2);
      addParseToken(["s", "ss"], SECOND);
      var getSetSecond = makeGetSet("Seconds", false);
      addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ["SSS", 3], 0, "millisecond");
      addFormatToken(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1e6;
      });
      addUnitAlias("millisecond", "ms");
      addUnitPriority("millisecond", 16);
      addRegexToken("S", match1to3, match1);
      addRegexToken("SS", match1to3, match2);
      addRegexToken("SSS", match1to3, match3);
      var token, getSetMillisecond;
      for (token = "SSSS"; token.length <= 9; token += "S") {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1e3);
      }
      for (token = "S"; token.length <= 9; token += "S") {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet("Milliseconds", false);
      addFormatToken("z", 0, 0, "zoneAbbr");
      addFormatToken("zz", 0, 0, "zoneName");
      function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
      }
      function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== "undefined" && Symbol.for != null) {
        proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
          return "Moment<" + this.format() + ">";
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString2;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
      proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
      proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
      proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
      proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string) {
        return string;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format2, index, field, setter) {
        var locale2 = getLocale(), utc = createUTC().set(setter, index);
        return locale2[field](utc, format2);
      }
      function listMonthsImpl(format2, index, field) {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
        if (index != null) {
          return get$1(format2, index, field, "month");
        }
        var i, out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format2, i, field, "month");
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format2, index, field) {
        if (typeof localeSorted === "boolean") {
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        } else {
          format2 = localeSorted;
          index = format2;
          localeSorted = false;
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        }
        var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
        if (index != null) {
          return get$1(format2, (index + shift) % 7, field, "day");
        }
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format2, (i + shift) % 7, field, "day");
        }
        return out;
      }
      function listMonths(format2, index) {
        return listMonthsImpl(format2, index, "months");
      }
      function listMonthsShort(format2, index) {
        return listMonthsImpl(format2, index, "monthsShort");
      }
      function listWeekdays(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
      }
      function listWeekdaysShort(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
      }
      function listWeekdaysMin(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
      }
      getSetGlobalLocale("en", {
        eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
          var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
          return number + output;
        }
      });
      hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
      hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
        if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return days2 * 4800 / 146097;
      }
      function monthsToDays(months2) {
        return months2 * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2, months2, milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case "month":
              return months2;
            case "quarter":
              return months2 / 3;
            case "year":
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case "week":
              return days2 / 7 + milliseconds2 / 6048e5;
            case "day":
              return days2 + milliseconds2 / 864e5;
            case "hour":
              return days2 * 24 + milliseconds2 / 36e5;
            case "minute":
              return days2 * 1440 + milliseconds2 / 6e4;
            case "second":
              return days2 * 86400 + milliseconds2 / 1e3;
            case "millisecond":
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error("Unknown unit " + units);
          }
        }
      }
      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }
      function makeAs(alias) {
        return function() {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
      }
      function makeGetter(name) {
        return function() {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round, thresholds = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        w: null,
        M: 11
      };
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
        return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
        var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
        if (thresholds2.w != null) {
          a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
        }
        a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale2;
        return substituteTimeAgo.apply(null, a);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === "function") {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === "s") {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false, th = thresholds, locale2, output;
        if (typeof argWithSuffix === "object") {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === "object") {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) {
          return "P0D";
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign(this._months) !== sign(total) ? "-" : "";
        daysSign = sign(this._days) !== sign(total) ? "-" : "";
        hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
        return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
      proto$2.lang = lang;
      addFormatToken("X", 0, 0, "unix");
      addFormatToken("x", 0, 0, "valueOf");
      addRegexToken("x", matchSigned);
      addRegexToken("X", matchTimestamp);
      addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
      });
      hooks.version = "2.29.1";
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        DATE: "YYYY-MM-DD",
        TIME: "HH:mm",
        TIME_SECONDS: "HH:mm:ss",
        TIME_MS: "HH:mm:ss.SSS",
        WEEK: "GGGG-[W]WW",
        MONTH: "YYYY-MM"
      };
      return hooks;
    });
  }
});

// node_modules/sequelize/lib/utils/validator-extras.js
var require_validator_extras = __commonJS({
  "node_modules/sequelize/lib/utils/validator-extras.js"(exports) {
    "use strict";
    var _ = require_lodash();
    var validator = _.cloneDeep(require_validator());
    var moment = require_moment();
    var extensions = {
      extend(name, fn2) {
        this[name] = fn2;
        return this;
      },
      notEmpty(str) {
        return !str.match(/^[\s\t\r\n]*$/);
      },
      len(str, min, max) {
        return this.isLength(str, min, max);
      },
      isUrl(str) {
        return this.isURL(str);
      },
      isIPv6(str) {
        return this.isIP(str, 6);
      },
      isIPv4(str) {
        return this.isIP(str, 4);
      },
      notIn(str, values) {
        return !this.isIn(str, values);
      },
      regex(str, pattern, modifiers) {
        str += "";
        if (Object.prototype.toString.call(pattern).slice(8, -1) !== "RegExp") {
          pattern = new RegExp(pattern, modifiers);
        }
        return str.match(pattern);
      },
      notRegex(str, pattern, modifiers) {
        return !this.regex(str, pattern, modifiers);
      },
      isDecimal(str) {
        return str !== "" && !!str.match(/^(?:-?(?:[0-9]+))?(?:\.[0-9]*)?(?:[eE][+-]?(?:[0-9]+))?$/);
      },
      min(str, val) {
        const number = parseFloat(str);
        return isNaN(number) || number >= val;
      },
      max(str, val) {
        const number = parseFloat(str);
        return isNaN(number) || number <= val;
      },
      not(str, pattern, modifiers) {
        return this.notRegex(str, pattern, modifiers);
      },
      contains(str, elem) {
        return !!elem && str.includes(elem);
      },
      notContains(str, elem) {
        return !this.contains(str, elem);
      },
      is(str, pattern, modifiers) {
        return this.regex(str, pattern, modifiers);
      }
    };
    exports.extensions = extensions;
    validator.isImmutable = function(value, validatorArgs, field, modelInstance) {
      return modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field];
    };
    validator.notNull = function(val) {
      return val !== null && val !== void 0;
    };
    _.forEach(extensions, (extend, key) => {
      validator[key] = extend;
    });
    validator.isNull = validator.isEmpty;
    validator.isDate = function(dateString) {
      const parsed = Date.parse(dateString);
      if (isNaN(parsed)) {
        return false;
      }
      const date = new Date(parsed);
      return moment(date.toISOString()).isValid();
    };
    exports.validator = validator;
  }
});

// node_modules/moment-timezone/moment-timezone.js
var require_moment_timezone = __commonJS({
  "node_modules/moment-timezone/moment-timezone.js"(exports, module) {
    (function(root, factory) {
      "use strict";
      if (typeof module === "object" && module.exports) {
        module.exports = factory(require_moment());
      } else if (typeof define === "function" && define.amd) {
        define(["moment"], factory);
      } else {
        factory(root.moment);
      }
    })(exports, function(moment) {
      "use strict";
      if (moment.version === void 0 && moment.default) {
        moment = moment.default;
      }
      var VERSION = "0.5.34", zones = {}, links = {}, countries = {}, names = {}, guesses = {}, cachedGuess;
      if (!moment || typeof moment.version !== "string") {
        logError("Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/");
      }
      var momentVersion = moment.version.split("."), major = +momentVersion[0], minor = +momentVersion[1];
      if (major < 2 || major === 2 && minor < 6) {
        logError("Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js " + moment.version + ". See momentjs.com");
      }
      function charCodeToInt(charCode) {
        if (charCode > 96) {
          return charCode - 87;
        } else if (charCode > 64) {
          return charCode - 29;
        }
        return charCode - 48;
      }
      function unpackBase60(string) {
        var i = 0, parts = string.split("."), whole = parts[0], fractional = parts[1] || "", multiplier = 1, num, out = 0, sign = 1;
        if (string.charCodeAt(0) === 45) {
          i = 1;
          sign = -1;
        }
        for (i; i < whole.length; i++) {
          num = charCodeToInt(whole.charCodeAt(i));
          out = 60 * out + num;
        }
        for (i = 0; i < fractional.length; i++) {
          multiplier = multiplier / 60;
          num = charCodeToInt(fractional.charCodeAt(i));
          out += num * multiplier;
        }
        return out * sign;
      }
      function arrayToInt(array) {
        for (var i = 0; i < array.length; i++) {
          array[i] = unpackBase60(array[i]);
        }
      }
      function intToUntil(array, length) {
        for (var i = 0; i < length; i++) {
          array[i] = Math.round((array[i - 1] || 0) + array[i] * 6e4);
        }
        array[length - 1] = Infinity;
      }
      function mapIndices(source, indices) {
        var out = [], i;
        for (i = 0; i < indices.length; i++) {
          out[i] = source[indices[i]];
        }
        return out;
      }
      function unpack(string) {
        var data = string.split("|"), offsets = data[2].split(" "), indices = data[3].split(""), untils = data[4].split(" ");
        arrayToInt(offsets);
        arrayToInt(indices);
        arrayToInt(untils);
        intToUntil(untils, indices.length);
        return {
          name: data[0],
          abbrs: mapIndices(data[1].split(" "), indices),
          offsets: mapIndices(offsets, indices),
          untils,
          population: data[5] | 0
        };
      }
      function Zone(packedString) {
        if (packedString) {
          this._set(unpack(packedString));
        }
      }
      Zone.prototype = {
        _set: function(unpacked) {
          this.name = unpacked.name;
          this.abbrs = unpacked.abbrs;
          this.untils = unpacked.untils;
          this.offsets = unpacked.offsets;
          this.population = unpacked.population;
        },
        _index: function(timestamp) {
          var target = +timestamp, untils = this.untils, i;
          for (i = 0; i < untils.length; i++) {
            if (target < untils[i]) {
              return i;
            }
          }
        },
        countries: function() {
          var zone_name = this.name;
          return Object.keys(countries).filter(function(country_code) {
            return countries[country_code].zones.indexOf(zone_name) !== -1;
          });
        },
        parse: function(timestamp) {
          var target = +timestamp, offsets = this.offsets, untils = this.untils, max = untils.length - 1, offset, offsetNext, offsetPrev, i;
          for (i = 0; i < max; i++) {
            offset = offsets[i];
            offsetNext = offsets[i + 1];
            offsetPrev = offsets[i ? i - 1 : i];
            if (offset < offsetNext && tz.moveAmbiguousForward) {
              offset = offsetNext;
            } else if (offset > offsetPrev && tz.moveInvalidForward) {
              offset = offsetPrev;
            }
            if (target < untils[i] - offset * 6e4) {
              return offsets[i];
            }
          }
          return offsets[max];
        },
        abbr: function(mom) {
          return this.abbrs[this._index(mom)];
        },
        offset: function(mom) {
          logError("zone.offset has been deprecated in favor of zone.utcOffset");
          return this.offsets[this._index(mom)];
        },
        utcOffset: function(mom) {
          return this.offsets[this._index(mom)];
        }
      };
      function Country(country_name, zone_names) {
        this.name = country_name;
        this.zones = zone_names;
      }
      function OffsetAt(at) {
        var timeString = at.toTimeString();
        var abbr = timeString.match(/\([a-z ]+\)/i);
        if (abbr && abbr[0]) {
          abbr = abbr[0].match(/[A-Z]/g);
          abbr = abbr ? abbr.join("") : void 0;
        } else {
          abbr = timeString.match(/[A-Z]{3,5}/g);
          abbr = abbr ? abbr[0] : void 0;
        }
        if (abbr === "GMT") {
          abbr = void 0;
        }
        this.at = +at;
        this.abbr = abbr;
        this.offset = at.getTimezoneOffset();
      }
      function ZoneScore(zone) {
        this.zone = zone;
        this.offsetScore = 0;
        this.abbrScore = 0;
      }
      ZoneScore.prototype.scoreOffsetAt = function(offsetAt) {
        this.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);
        if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, "") !== offsetAt.abbr) {
          this.abbrScore++;
        }
      };
      function findChange(low, high) {
        var mid, diff;
        while (diff = ((high.at - low.at) / 12e4 | 0) * 6e4) {
          mid = new OffsetAt(new Date(low.at + diff));
          if (mid.offset === low.offset) {
            low = mid;
          } else {
            high = mid;
          }
        }
        return low;
      }
      function userOffsets() {
        var startYear = new Date().getFullYear() - 2, last = new OffsetAt(new Date(startYear, 0, 1)), offsets = [last], change, next, i;
        for (i = 1; i < 48; i++) {
          next = new OffsetAt(new Date(startYear, i, 1));
          if (next.offset !== last.offset) {
            change = findChange(last, next);
            offsets.push(change);
            offsets.push(new OffsetAt(new Date(change.at + 6e4)));
          }
          last = next;
        }
        for (i = 0; i < 4; i++) {
          offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
          offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
        }
        return offsets;
      }
      function sortZoneScores(a, b) {
        if (a.offsetScore !== b.offsetScore) {
          return a.offsetScore - b.offsetScore;
        }
        if (a.abbrScore !== b.abbrScore) {
          return a.abbrScore - b.abbrScore;
        }
        if (a.zone.population !== b.zone.population) {
          return b.zone.population - a.zone.population;
        }
        return b.zone.name.localeCompare(a.zone.name);
      }
      function addToGuesses(name, offsets) {
        var i, offset;
        arrayToInt(offsets);
        for (i = 0; i < offsets.length; i++) {
          offset = offsets[i];
          guesses[offset] = guesses[offset] || {};
          guesses[offset][name] = true;
        }
      }
      function guessesForUserOffsets(offsets) {
        var offsetsLength = offsets.length, filteredGuesses = {}, out = [], i, j, guessesOffset;
        for (i = 0; i < offsetsLength; i++) {
          guessesOffset = guesses[offsets[i].offset] || {};
          for (j in guessesOffset) {
            if (guessesOffset.hasOwnProperty(j)) {
              filteredGuesses[j] = true;
            }
          }
        }
        for (i in filteredGuesses) {
          if (filteredGuesses.hasOwnProperty(i)) {
            out.push(names[i]);
          }
        }
        return out;
      }
      function rebuildGuess() {
        try {
          var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
          if (intlName && intlName.length > 3) {
            var name = names[normalizeName(intlName)];
            if (name) {
              return name;
            }
            logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");
          }
        } catch (e) {
        }
        var offsets = userOffsets(), offsetsLength = offsets.length, guesses2 = guessesForUserOffsets(offsets), zoneScores = [], zoneScore, i, j;
        for (i = 0; i < guesses2.length; i++) {
          zoneScore = new ZoneScore(getZone(guesses2[i]), offsetsLength);
          for (j = 0; j < offsetsLength; j++) {
            zoneScore.scoreOffsetAt(offsets[j]);
          }
          zoneScores.push(zoneScore);
        }
        zoneScores.sort(sortZoneScores);
        return zoneScores.length > 0 ? zoneScores[0].zone.name : void 0;
      }
      function guess(ignoreCache) {
        if (!cachedGuess || ignoreCache) {
          cachedGuess = rebuildGuess();
        }
        return cachedGuess;
      }
      function normalizeName(name) {
        return (name || "").toLowerCase().replace(/\//g, "_");
      }
      function addZone(packed) {
        var i, name, split, normalized;
        if (typeof packed === "string") {
          packed = [packed];
        }
        for (i = 0; i < packed.length; i++) {
          split = packed[i].split("|");
          name = split[0];
          normalized = normalizeName(name);
          zones[normalized] = packed[i];
          names[normalized] = name;
          addToGuesses(normalized, split[2].split(" "));
        }
      }
      function getZone(name, caller) {
        name = normalizeName(name);
        var zone = zones[name];
        var link;
        if (zone instanceof Zone) {
          return zone;
        }
        if (typeof zone === "string") {
          zone = new Zone(zone);
          zones[name] = zone;
          return zone;
        }
        if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
          zone = zones[name] = new Zone();
          zone._set(link);
          zone.name = names[name];
          return zone;
        }
        return null;
      }
      function getNames() {
        var i, out = [];
        for (i in names) {
          if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
            out.push(names[i]);
          }
        }
        return out.sort();
      }
      function getCountryNames() {
        return Object.keys(countries);
      }
      function addLink(aliases) {
        var i, alias, normal0, normal1;
        if (typeof aliases === "string") {
          aliases = [aliases];
        }
        for (i = 0; i < aliases.length; i++) {
          alias = aliases[i].split("|");
          normal0 = normalizeName(alias[0]);
          normal1 = normalizeName(alias[1]);
          links[normal0] = normal1;
          names[normal0] = alias[0];
          links[normal1] = normal0;
          names[normal1] = alias[1];
        }
      }
      function addCountries(data) {
        var i, country_code, country_zones, split;
        if (!data || !data.length)
          return;
        for (i = 0; i < data.length; i++) {
          split = data[i].split("|");
          country_code = split[0].toUpperCase();
          country_zones = split[1].split(" ");
          countries[country_code] = new Country(country_code, country_zones);
        }
      }
      function getCountry(name) {
        name = name.toUpperCase();
        return countries[name] || null;
      }
      function zonesForCountry(country, with_offset) {
        country = getCountry(country);
        if (!country)
          return null;
        var zones2 = country.zones.sort();
        if (with_offset) {
          return zones2.map(function(zone_name) {
            var zone = getZone(zone_name);
            return {
              name: zone_name,
              offset: zone.utcOffset(new Date())
            };
          });
        }
        return zones2;
      }
      function loadData(data) {
        addZone(data.zones);
        addLink(data.links);
        addCountries(data.countries);
        tz.dataVersion = data.version;
      }
      function zoneExists(name) {
        if (!zoneExists.didShowError) {
          zoneExists.didShowError = true;
          logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
        }
        return !!getZone(name);
      }
      function needsOffset(m) {
        var isUnixTimestamp = m._f === "X" || m._f === "x";
        return !!(m._a && m._tzm === void 0 && !isUnixTimestamp);
      }
      function logError(message) {
        if (typeof console !== "undefined" && typeof console.error === "function") {
          console.error(message);
        }
      }
      function tz(input) {
        var args = Array.prototype.slice.call(arguments, 0, -1), name = arguments[arguments.length - 1], zone = getZone(name), out = moment.utc.apply(null, args);
        if (zone && !moment.isMoment(input) && needsOffset(out)) {
          out.add(zone.parse(out), "minutes");
        }
        out.tz(name);
        return out;
      }
      tz.version = VERSION;
      tz.dataVersion = "";
      tz._zones = zones;
      tz._links = links;
      tz._names = names;
      tz._countries = countries;
      tz.add = addZone;
      tz.link = addLink;
      tz.load = loadData;
      tz.zone = getZone;
      tz.zoneExists = zoneExists;
      tz.guess = guess;
      tz.names = getNames;
      tz.Zone = Zone;
      tz.unpack = unpack;
      tz.unpackBase60 = unpackBase60;
      tz.needsOffset = needsOffset;
      tz.moveInvalidForward = true;
      tz.moveAmbiguousForward = false;
      tz.countries = getCountryNames;
      tz.zonesForCountry = zonesForCountry;
      var fn2 = moment.fn;
      moment.tz = tz;
      moment.defaultZone = null;
      moment.updateOffset = function(mom, keepTime) {
        var zone = moment.defaultZone, offset;
        if (mom._z === void 0) {
          if (zone && needsOffset(mom) && !mom._isUTC) {
            mom._d = moment.utc(mom._a)._d;
            mom.utc().add(zone.parse(mom), "minutes");
          }
          mom._z = zone;
        }
        if (mom._z) {
          offset = mom._z.utcOffset(mom);
          if (Math.abs(offset) < 16) {
            offset = offset / 60;
          }
          if (mom.utcOffset !== void 0) {
            var z = mom._z;
            mom.utcOffset(-offset, keepTime);
            mom._z = z;
          } else {
            mom.zone(offset, keepTime);
          }
        }
      };
      fn2.tz = function(name, keepTime) {
        if (name) {
          if (typeof name !== "string") {
            throw new Error("Time zone name must be a string, got " + name + " [" + typeof name + "]");
          }
          this._z = getZone(name);
          if (this._z) {
            moment.updateOffset(this, keepTime);
          } else {
            logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
          }
          return this;
        }
        if (this._z) {
          return this._z.name;
        }
      };
      function abbrWrap(old) {
        return function() {
          if (this._z) {
            return this._z.abbr(this);
          }
          return old.call(this);
        };
      }
      function resetZoneWrap(old) {
        return function() {
          this._z = null;
          return old.apply(this, arguments);
        };
      }
      function resetZoneWrap2(old) {
        return function() {
          if (arguments.length > 0)
            this._z = null;
          return old.apply(this, arguments);
        };
      }
      fn2.zoneName = abbrWrap(fn2.zoneName);
      fn2.zoneAbbr = abbrWrap(fn2.zoneAbbr);
      fn2.utc = resetZoneWrap(fn2.utc);
      fn2.local = resetZoneWrap(fn2.local);
      fn2.utcOffset = resetZoneWrap2(fn2.utcOffset);
      moment.tz.setDefault = function(name) {
        if (major < 2 || major === 2 && minor < 9) {
          logError("Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js " + moment.version + ".");
        }
        moment.defaultZone = name ? getZone(name) : null;
        return moment;
      };
      var momentProperties = moment.momentProperties;
      if (Object.prototype.toString.call(momentProperties) === "[object Array]") {
        momentProperties.push("_z");
        momentProperties.push("_a");
      } else if (momentProperties) {
        momentProperties._z = null;
      }
      return moment;
    });
  }
});

// node_modules/moment-timezone/data/packed/latest.json
var require_latest = __commonJS({
  "node_modules/moment-timezone/data/packed/latest.json"(exports, module) {
    module.exports = {
      version: "2021e",
      zones: [
        "Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q|48e5",
        "Africa/Nairobi|LMT +0230 EAT +0245|-2r.g -2u -30 -2J|012132|-2ua2r.g N6nV.g 3Fbu h1cu dzbJ|47e5",
        "Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0|26e5",
        "Africa/Lagos|LMT GMT +0030 WAT|-d.z 0 -u -10|01023|-2B40d.z 7iod.z dnXK.p dLzH.z|17e6",
        "Africa/Bissau|LMT -01 GMT|12.k 10 0|012|-2ldX0 2xoo0|39e4",
        "Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k|26e5",
        "Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6",
        "Africa/Casablanca|LMT +00 +01|u.k 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0|32e5",
        "Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1y7o0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|85e3",
        "Africa/El_Aaiun|LMT -01 +00 +01|Q.M 10 0 -10|012323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0|20e4",
        "Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0|84e5",
        "Africa/Juba|LMT CAT CAST EAT|-26.s -20 -30 -30|012121212121212121212121212121212131|-1yW26.s 1zK06.s 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0 PeX0|",
        "Africa/Khartoum|LMT CAT CAST EAT|-2a.8 -20 -30 -30|012121212121212121212121212121212131|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0 HjL0|51e5",
        "Africa/Monrovia|MMT MMT GMT|H.8 I.u 0|012|-23Lzg.Q 28G01.m|11e5",
        "Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0|13e5",
        "Africa/Sao_Tome|LMT GMT WAT|A.J 0 -10|0121|-2le00 4i6N0 2q00|",
        "Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00|11e5",
        "Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00|20e5",
        "Africa/Windhoek|+0130 SAST SAST CAT WAT|-1u -20 -30 -20 -10|01213434343434343434343434343434343434343434343434343|-2GJdu 1Ajdu 1cL0 1SqL0 9Io0 16P0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|32e4",
        "America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326",
        "America/Anchorage|AST AWT APT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4",
        "America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0|24e5",
        "America/Araguaina|LMT -03 -02|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0|14e4",
        "America/Argentina/Buenos_Aires|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 A4p0 uL0 1qN0 WL0|",
        "America/Argentina/Catamarca|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 7B0 8zb0 uL0|",
        "America/Argentina/Cordoba|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0 1qN0 WL0|",
        "America/Argentina/Jujuy|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 A4p0 uL0|",
        "America/Argentina/La_Rioja|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0|",
        "America/Argentina/Mendoza|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232312121321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 ri10 Op0 7TX0 uL0|",
        "America/Argentina/Rio_Gallegos|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0|",
        "America/Argentina/Salta|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0|",
        "America/Argentina/San_Juan|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rld0 m10 8lb0 uL0|",
        "America/Argentina/San_Luis|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121212321212|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 vDb0 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0|",
        "America/Argentina/Tucuman|CMT -04 -03 -02|4g.M 40 30 20|0121212121212121212121212121212121212121212323232313232123232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 4N0 8BX0 uL0 1qN0 WL0|",
        "America/Argentina/Ushuaia|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rkN0 8p0 8zb0 uL0|",
        "America/Asuncion|AMT -04 -03|3O.E 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5",
        "America/Panama|CMT EST|5j.A 50|01|-2uduE.o|15e5",
        "America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3",
        "America/Bahia|LMT -03 -02|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0|27e5",
        "America/Barbados|LMT AST ADT -0330|3W.t 40 30 3u|0121213121212121|-2m4k1.v 1eAN1.v RB0 1Bz0 Op0 1rb0 11d0 1jJc0 IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0|28e4",
        "America/Belem|LMT -03 -02|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|20e5",
        "America/Belize|LMT CST -0530 CWT CPT CDT|5Q.M 60 5u 50 50 50|012121212121212121212121212121212121212121212121213412121212121212121212121212121212121212121215151|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu Rcu 7Bt0 Ni0 4nd0 Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu e9Au qn0 lxB0 mn0|57e3",
        "America/Boa_Vista|LMT -04 -03|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0|62e2",
        "America/Bogota|BMT -05 -04|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0|90e5",
        "America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e4",
        "America/Cambridge_Bay|-00 MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e2",
        "America/Campo_Grande|LMT -04 -03|3C.s 40 30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|77e4",
        "America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4",
        "America/Caracas|CMT -0430 -04|4r.E 4u 40|01212|-2kV7w.k 28KM2.k 1IwOu kqo0|29e5",
        "America/Cayenne|LMT -04 -03|3t.k 40 30|012|-2mrwu.E 2gWou.E|58e3",
        "America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5",
        "America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4",
        "America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0|12e5",
        "America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0|42e5",
        "America/Cuiaba|LMT -04 -03|3I.k 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|54e4",
        "America/Danmarkshavn|LMT -03 -02 GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0|8",
        "America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0|12e3",
        "America/Dawson|YST YDT YWT YPT YDDT PST PDT MST|90 80 80 80 70 80 70 70|010102304056565656565656565656565656565656565656565656565656565656565656565656565656565656567|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1z90|13e2",
        "America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5",
        "America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|0123425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 JxX1 SMX 1cN0 1cL0 aW10 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e5",
        "America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|0121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 XQp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|10e5",
        "America/Eirunepe|LMT -05 -04|4D.s 50 40|0121212121212121212121212121212121|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0|31e3",
        "America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0|11e5",
        "America/Tijuana|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOO0 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|20e5",
        "America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2",
        "America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/Fortaleza|LMT -03 -02|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0|34e5",
        "America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3",
        "America/Godthab|LMT -03 -02|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3",
        "America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2",
        "America/Grand_Turk|KMT EST EDT AST|57.a 50 40 40|0121212121212121212121212121212121212121212121212121212121212121212121212132121212121212121212121212121212121212121|-2l1uQ.O 2HHBQ.O 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 7jA0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2",
        "America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0|13e5",
        "America/Guayaquil|QMT -05 -04|5e 50 40|0121|-1yVSK 2uILK rz0|27e5",
        "America/Guyana|LMT -04 -0345 -03|3Q.D 40 3J 30|01231|-2mf87.l 8Hc7.l 2r7bJ Ey0f|80e4",
        "America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4",
        "America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5",
        "America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0|64e4",
        "America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010401054541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 8wn0 1cN0 1cL0 1cN0 1cK0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/Inuvik|-00 PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|35e2",
        "America/Iqaluit|-00 EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|67e2",
        "America/Jamaica|KMT EST EDT|57.a 50 40|0121212121212121212121|-2l1uQ.O 2uM1Q.O 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0|94e4",
        "America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|33e3",
        "America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 1nX1 e0X 9vd0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/La_Paz|CMT BST -04|4w.A 3w.A 40|012|-1x37r.o 13b0|19e5",
        "America/Lima|LMT -05 -04|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0|11e6",
        "America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp1 1VaX 3dA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6",
        "America/Maceio|LMT -03 -02|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0|93e4",
        "America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0|22e5",
        "America/Manaus|LMT -04 -03|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0|19e5",
        "America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0|39e4",
        "America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|45e4",
        "America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|44e4",
        "America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|85e2",
        "America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|11e5",
        "America/Metlakatla|PST PWT PPT PDT AKST AKDT|80 70 70 70 90 80|01203030303030303030303030303030304545450454545454545454545454545454545454545454|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1hU10 Rd0 1zb0 Op0 1zb0 Op0 1zb0 uM0 jB0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
        "America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6",
        "America/Miquelon|LMT AST -03 -02|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2",
        "America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|64e3",
        "America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|41e5",
        "America/Montevideo|LMT MMT -04 -03 -0330 -0230 -02 -0130|3I.P 3I.P 40 30 3u 2u 20 1u|012343434343434343434343435353636353636375363636363636363636363636363636363636363636363|-2tRUf.9 sVc0 8jcf.9 1db0 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1fAu 1cLu 1o0u 11zu NAu 3jXu zXu Dq0u 19Xu pcu jz0 cm10 19X0 6tB0 1fbu 3o0u jX0 4vB0 xz0 3Cp0 mmu 1a10 IMu Db0 4c10 uL0 1Nd0 An0 1SN0 uL0 mp0 28L0 iPB0 un0 1SN0 xz0 1zd0 Lz0 1zd0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5",
        "America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e5",
        "America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6",
        "America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|16e2",
        "America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|38e2",
        "America/Noronha|LMT -02 -01|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|30e2",
        "America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3",
        "America/Pangnirtung|-00 AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
        "America/Paramaribo|LMT PMT PMT -0330 -03|3E.E 3E.Q 3E.A 3u 30|01234|-2nDUj.k Wqo0.c qanX.I 1yVXN.o|24e4",
        "America/Port-au-Prince|PPMT EST EDT|4N 50 40|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
        "America/Rio_Branco|LMT -05 -04|4v.c 50 40|01212121212121212121212121212121|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0|31e4",
        "America/Porto_Velho|LMT -04 -03|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|37e4",
        "America/Punta_Arenas|SMT -05 -04 -03|4G.K 50 40 30|0102021212121212121232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 blz0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|",
        "America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|842",
        "America/Rankin_Inlet|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e2",
        "America/Recife|LMT -03 -02|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|33e5",
        "America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0|19e4",
        "America/Resolute|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|229",
        "America/Santarem|LMT -04 -03|3C.M 40 30|0121212121212121212121212121212|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0|21e4",
        "America/Santiago|SMT -05 -04 -03|4G.K 50 40 30|010202121212121212321232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0|62e5",
        "America/Santo_Domingo|SDMT EST EDT -0430 AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00|29e5",
        "America/Sao_Paulo|LMT -03 -02|36.s 30 20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|20e6",
        "America/Scoresbysund|LMT -02 -01 +00|1r.Q 20 10 0|0121323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452",
        "America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|90e2",
        "America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
        "America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0|16e3",
        "America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0|11e5",
        "America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|656",
        "America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
        "America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
        "America/Whitehorse|YST YDT YWT YPT YDDT PST PDT MST|90 80 80 80 70 80 70 70|010102304056565656565656565656565656565656565656565656565656565656565656565656565656565656567|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1z90|23e3",
        "America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|66e4",
        "America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|642",
        "America/Yellowknife|-00 MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3",
        "Antarctica/Casey|-00 +08 +11|0 -80 -b0|0121212121212|-2q00 1DjS0 T90 40P0 KL0 blz0 3m10 1o30 14k0 1kr0 12l0 1o01|10",
        "Antarctica/Davis|-00 +07 +05|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0|70",
        "Pacific/Port_Moresby|+10|-a0|0||25e4",
        "Antarctica/Macquarie|AEST AEDT -00|-a0 -b0 0|010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 1a00 4SK0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 3Co0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|1",
        "Antarctica/Mawson|-00 +06 +05|0 -60 -50|012|-CEo0 2fyk0|60",
        "Pacific/Auckland|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5",
        "Antarctica/Palmer|-00 -03 -04 -02|0 30 40 20|0121212121213121212121212121212121212121212121212121212121212121212121212121212121|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|40",
        "Antarctica/Rothera|-00 -03|0 30|01|gOo0|130",
        "Asia/Riyadh|LMT +03|-36.Q -30|01|-TvD6.Q|57e5",
        "Antarctica/Troll|-00 +00 +02|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40",
        "Antarctica/Vostok|-00 +06|0 -60|01|-tjA0|25",
        "Europe/Oslo|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e4",
        "Asia/Almaty|LMT +05 +06 +07|-57.M -50 -60 -70|012323232323232323232321232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|15e5",
        "Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 LA0 1C00 LA0 1C00 Oo0 1zc0 Oo0 1C00 LA0 1C00 LA0 1C00 LA0 1C00 LA0 1C00 Oo0 1zc0 Oo0 1C00 LA0 1C00 LA0 1C00 LA0 1C00 LA0 1C00 Oo0 1C00 LA0 1C00|25e5",
        "Asia/Anadyr|LMT +12 +13 +14 +11|-bN.U -c0 -d0 -e0 -b0|01232121212121212121214121212121212121212121212121212121212141|-1PcbN.U eUnN.U 23CL0 1db0 2q10 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|13e3",
        "Asia/Aqtau|LMT +04 +05 +06|-3l.4 -40 -50 -60|012323232323232323232123232312121212121212121212|-1Pc3l.4 eUnl.4 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|15e4",
        "Asia/Aqtobe|LMT +04 +05 +06|-3M.E -40 -50 -60|0123232323232323232321232323232323232323232323232|-1Pc3M.E eUnM.E 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|27e4",
        "Asia/Ashgabat|LMT +04 +05 +06|-3R.w -40 -50 -60|0123232323232323232323212|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0|41e4",
        "Asia/Atyrau|LMT +03 +05 +06 +04|-3r.I -30 -50 -60 -40|01232323232323232323242323232323232324242424242|-1Pc3r.I eUor.I 24PW0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 2sp0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|",
        "Asia/Baghdad|BMT +03 +04|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0|66e5",
        "Asia/Qatar|LMT +04 +03|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8|96e4",
        "Asia/Baku|LMT +03 +04 +05|-3j.o -30 -40 -50|01232323232323232323232123232323232323232323232323232323232323232|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 9Je0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5",
        "Asia/Bangkok|BMT +07|-6G.4 -70|01|-218SG.4|15e6",
        "Asia/Barnaul|LMT +06 +07 +08|-5z -60 -70 -80|0123232323232323232323212323232321212121212121212121212121212121212|-21S5z pCnz 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 p90 LE0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|",
        "Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5",
        "Asia/Bishkek|LMT +05 +06 +07|-4W.o -50 -60 -70|012323232323232323232321212121212121212121212121212|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2e00 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0|87e4",
        "Asia/Brunei|LMT +0730 +08|-7D.E -7u -80|012|-1KITD.E gDc9.E|42e4",
        "Asia/Kolkata|MMT IST +0630|-5l.a -5u -6u|012121|-2zOtl.a 1r2LP.a 1un0 HB0 7zX0|15e6",
        "Asia/Chita|LMT +08 +09 +10|-7x.Q -80 -90 -a0|012323232323232323232321232323232323232323232323232323232323232312|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3re0|33e4",
        "Asia/Choibalsan|LMT +07 +08 +10 +09|-7C -70 -80 -a0 -90|0123434343434343434343434343434343434343434343424242|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0|38e3",
        "Asia/Shanghai|CST CDT|-80 -90|01010101010101010101010101010|-23uw0 18n0 OjB0 Rz0 11d0 1wL0 A10 8HX0 1G10 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 aL0 1tU30 Rb0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0|23e6",
        "Asia/Colombo|MMT +0530 +06 +0630|-5j.w -5u -60 -6u|01231321|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu|22e5",
        "Asia/Dhaka|HMT +0630 +0530 +06 +07|-5R.k -6u -5u -60 -70|0121343|-18LFR.k 1unn.k HB0 m6n0 2kxbu 1i00|16e6",
        "Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|26e5",
        "Asia/Dili|LMT +08 +09|-8m.k -80 -90|01212|-2le8m.k 1dnXm.k 1nfA0 Xld0|19e4",
        "Asia/Dubai|LMT +04|-3F.c -40|01|-21JfF.c|39e5",
        "Asia/Dushanbe|LMT +05 +06 +07|-4z.c -50 -60 -70|012323232323232323232321|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2hB0|76e4",
        "Asia/Famagusta|LMT EET EEST +03|-2f.M -20 -30 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212312121212121212121212121212121212121212121|-1Vc2f.M 2a3cf.M 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0 2Ks0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|",
        "Asia/Gaza|EET EEST IST IDT|-20 -30 -20 -30|010101010101010101010101010101010123232323232323232323232323232320101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2o0 MM0 iM0 4JA0 10o0 1pA0 10M0 1pA0 16o0 1jA0 16o0 1jA0 pBa0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 bXB0 gM0 8Q00 IM0 1wo0 TX0 1HB0 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nA0 1210 1qL0 WN0 1qL0 WN0 1qL0 11c0 1on0 11B0 1o00 11A0 1qo0 Xc0 1qo0 Xc0 1qo0 1200 1nA0 1200 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 1200 1nA0 1200 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 1200 1qo0 Xc0 1qo0|18e5",
        "Asia/Hebron|EET EEST IST IDT|-20 -30 -20 -30|01010101010101010101010101010101012323232323232323232323232323232010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2o0 MM0 iM0 4JA0 10o0 1pA0 10M0 1pA0 16o0 1jA0 16o0 1jA0 pBa0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 bXB0 gM0 8Q00 IM0 1wo0 TX0 1HB0 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nA0 1210 1qL0 WN0 1qL0 WN0 1qL0 11c0 1on0 11B0 1o00 11A0 1qo0 Xc0 1qo0 Xc0 1qo0 1200 1nA0 1200 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 1200 1nA0 1200 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 1200 1qo0 Xc0 1qo0|25e4",
        "Asia/Ho_Chi_Minh|LMT PLMT +07 +08 +09|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0|90e5",
        "Asia/Hong_Kong|LMT HKT HKST HKWT JST|-7A.G -80 -90 -8u -90|0123412121212121212121212121212121212121212121212121212121212121212121|-2CFH0 1taO0 Hc0 xUu 9tBu 11z0 1tDu Rc0 1wo0 11A0 1cM0 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|73e5",
        "Asia/Hovd|LMT +06 +07 +08|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|81e3",
        "Asia/Irkutsk|IMT +07 +08 +09|-6V.5 -70 -80 -90|01232323232323232323232123232323232323232323232323232323232323232|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4",
        "Europe/Istanbul|IMT EET EEST +03 +04|-1U.U -20 -30 -30 -40|0121212121212121212121212121212121212121212121234312121212121212121212121212121212121212121212121212121212121212123|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSN0 CL0 mp0 1Vz0 1gN0 8yn0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1ip0 19X0 1ip0 17b0 qdB0 38L0 1jd0 Tz0 l6O0 11A0 WN0 1qL0 TB0 1tX0 U10 1tz0 11B0 1in0 17d0 z90 cne0 pb0 2Cp0 1800 14o0 1dc0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1a00 1fA0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6",
        "Asia/Jakarta|BMT +0720 +0730 +09 +08 WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu|31e6",
        "Asia/Jayapura|LMT +09 +0930 WIT|-9m.M -90 -9u -90|0123|-1uu9m.M sMMm.M L4nu|26e4",
        "Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212121321212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyOk.E MM0 iM0 4JA0 10o0 1pA0 10M0 1pA0 16o0 1jA0 16o0 1jA0 3LA0 Eo0 oo0 1co0 1dA0 16o0 10M0 1jc0 1tA0 14o0 1cM0 1a00 11A0 1Nc0 Ao0 1Nc0 Ao0 1Ko0 LA0 1o00 WM0 EQK0 Db0 1fB0 Rb0 bXB0 gM0 8Q00 IM0 1wo0 TX0 1HB0 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4",
        "Asia/Kabul|+04 +0430|-40 -4u|01|-10Qs0|46e5",
        "Asia/Kamchatka|LMT +11 +12 +13|-ay.A -b0 -c0 -d0|012323232323232323232321232323232323232323232323232323232323212|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|18e4",
        "Asia/Karachi|LMT +0530 +0630 +05 PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy00 1cL0 dK10 11b0 1610 1jX0|24e6",
        "Asia/Urumqi|LMT +06|-5O.k -60|01|-1GgtO.k|32e5",
        "Asia/Kathmandu|LMT +0530 +0545|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g|12e5",
        "Asia/Khandyga|LMT +08 +09 +10 +11|-92.d -80 -90 -a0 -b0|0123232323232323232323212323232323232323232323232343434343434343432|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|66e2",
        "Asia/Krasnoyarsk|LMT +06 +07 +08|-6b.q -60 -70 -80|01232323232323232323232123232323232323232323232323232323232323232|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5",
        "Asia/Kuala_Lumpur|SMT +07 +0720 +0730 +09 +08|-6T.p -70 -7k -7u -90 -80|0123435|-2Bg6T.p 17anT.p l5XE 17bO 8Fyu 1so1u|71e5",
        "Asia/Kuching|LMT +0730 +08 +0820 +09|-7l.k -7u -80 -8k -90|0123232323232323242|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0|13e4",
        "Asia/Macau|LMT CST +09 +10 CDT|-7y.a -80 -90 -a0 -90|012323214141414141414141414141414141414141414141414141414141414141414141|-2CFHy.a 1uqKy.a PX0 1kn0 15B0 11b0 4Qq0 1oM0 11c0 1ko0 1u00 11A0 1cM0 11c0 1o00 11A0 1o00 11A0 1oo0 1400 1o00 11A0 1o00 U00 1tA0 U00 1wo0 Rc0 1wru U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cK0 1cO0 1cK0 1cO0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|57e4",
        "Asia/Magadan|LMT +10 +11 +12|-a3.c -a0 -b0 -c0|012323232323232323232321232323232323232323232323232323232323232312|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Cq0|95e3",
        "Asia/Makassar|LMT MMT +08 +09 WITA|-7V.A -7V.A -80 -90 -80|01234|-21JjV.A vfc0 myLV.A 8ML0|15e5",
        "Asia/Manila|PST PDT JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0|24e6",
        "Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|32e4",
        "Asia/Novokuznetsk|LMT +06 +07 +08|-5M.M -60 -70 -80|012323232323232323232321232323232323232323232323232323232323212|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|55e4",
        "Asia/Novosibirsk|LMT +06 +07 +08|-5v.E -60 -70 -80|0123232323232323232323212323212121212121212121212121212121212121212|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 4eN0|15e5",
        "Asia/Omsk|LMT +05 +06 +07|-4R.u -50 -60 -70|01232323232323232323232123232323232323232323232323232323232323232|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|12e5",
        "Asia/Oral|LMT +03 +05 +06 +04|-3p.o -30 -50 -60 -40|01232323232323232424242424242424242424242424242|-1Pc3p.o eUop.o 23CK0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 1cM0 IM0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|27e4",
        "Asia/Pontianak|LMT PMT +0730 +09 +08 WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu|23e4",
        "Asia/Pyongyang|LMT KST JST KST|-8n -8u -90 -90|012313|-2um8n 97XR 1lTzu 2Onc0 6BA0|29e5",
        "Asia/Qostanay|LMT +04 +05 +06|-4e.s -40 -50 -60|012323232323232323232123232323232323232323232323|-1Pc4e.s eUoe.s 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|",
        "Asia/Qyzylorda|LMT +04 +05 +06|-4l.Q -40 -50 -60|01232323232323232323232323232323232323232323232|-1Pc4l.Q eUol.Q 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3ao0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 zQl0|73e4",
        "Asia/Rangoon|RMT +0630 +09|-6o.L -6u -90|0121|-21Jio.L SmnS.L 7j9u|48e5",
        "Asia/Sakhalin|LMT +09 +11 +12 +10|-9u.M -90 -b0 -c0 -a0|01232323232323232323232423232323232424242424242424242424242424242|-2AGVu.M 1BoMu.M 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 2pB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|58e4",
        "Asia/Samarkand|LMT +04 +05 +06|-4r.R -40 -50 -60|01232323232323232323232|-1Pc4r.R eUor.R 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0|36e4",
        "Asia/Seoul|LMT KST JST KST KDT KDT|-8r.Q -8u -90 -90 -a0 -9u|012343434343151515151515134343|-2um8r.Q 97XV.Q 1m1zu 6CM0 Fz0 1kN0 14n0 1kN0 14L0 1zd0 On0 69B0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0|23e6",
        "Asia/Srednekolymsk|LMT +10 +11 +12|-ae.Q -a0 -b0 -c0|01232323232323232323232123232323232323232323232323232323232323232|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|35e2",
        "Asia/Taipei|CST JST CDT|-80 -90 -90|01020202020202020202020202020202020202020|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0|74e5",
        "Asia/Tashkent|LMT +05 +06 +07|-4B.b -50 -60 -70|012323232323232323232321|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0|23e5",
        "Asia/Tbilisi|TBMT +03 +04 +05|-2X.b -30 -40 -50|0123232323232323232323212121232323232323232323212|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cK0 1cL0 1cN0 1cL0 1cN0 2pz0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0|11e5",
        "Asia/Tehran|LMT TMT +0330 +04 +05 +0430|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6",
        "Asia/Thimphu|LMT +0530 +06|-5W.A -5u -60|012|-Su5W.A 1BGMs.A|79e3",
        "Asia/Tokyo|JST JDT|-90 -a0|010101010|-QJJ0 Rc0 1lc0 14o0 1zc0 Oo0 1zc0 Oo0|38e6",
        "Asia/Tomsk|LMT +06 +07 +08|-5D.P -60 -70 -80|0123232323232323232323212323232323232323232323212121212121212121212|-21NhD.P pxzD.P 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 co0 1bB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Qp0|10e5",
        "Asia/Ulaanbaatar|LMT +07 +08 +09|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|12e5",
        "Asia/Ust-Nera|LMT +08 +09 +12 +11 +10|-9w.S -80 -90 -c0 -b0 -a0|012343434343434343434345434343434343434343434343434343434343434345|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|65e2",
        "Asia/Vladivostok|LMT +09 +10 +11|-8L.v -90 -a0 -b0|01232323232323232323232123232323232323232323232323232323232323232|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4",
        "Asia/Yakutsk|LMT +08 +09 +10|-8C.W -80 -90 -a0|01232323232323232323232123232323232323232323232323232323232323232|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|28e4",
        "Asia/Yekaterinburg|LMT PMT +04 +05 +06|-42.x -3J.5 -40 -50 -60|012343434343434343434343234343434343434343434343434343434343434343|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|14e5",
        "Asia/Yerevan|LMT +03 +04 +05|-2W -30 -40 -50|0123232323232323232323212121212323232323232323232323232323232|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 4RX0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|13e5",
        "Atlantic/Azores|HMT -02 -01 +00 WET|1S.w 20 10 0 0|0121212121212121212121212121212121212121212123212321232123212121212121212121212121212121212121212121232323232323232323232323232323234323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2ldW0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4",
        "Atlantic/Bermuda|BMT BST AST ADT|4j.i 3j.i 40 30|010102323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28p7E.G 1bb0 1i10 11X0 ru30 thbE.G 1PX0 11B0 1tz0 Rd0 1zb0 Op0 1zb0 3I10 Lz0 1EN0 FX0 1HB0 FX0 1Kp0 Db0 1Kp0 Db0 1Kp0 FX0 93d0 11z0 GAp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e3",
        "Atlantic/Canary|LMT -01 WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
        "Atlantic/Cape_Verde|LMT -02 -01|1y.4 20 10|01212|-2ldW0 1eEo0 7zX0 1djf0|50e4",
        "Atlantic/Faroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|49e3",
        "Atlantic/Madeira|FMT -01 +00 +01 WET WEST|17.A 10 0 -10 0 -10|0121212121212121212121212121212121212121212123212321232123212121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldX0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e4",
        "Atlantic/Reykjavik|LMT -01 +00 GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0|12e4",
        "Atlantic/South_Georgia|-02|20|0||30",
        "Atlantic/Stanley|SMT -04 -03 -02|3P.o 40 30 20|012121212121212323212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 2mN0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10|21e2",
        "Australia/Sydney|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293k0 xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5",
        "Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293ju xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5",
        "Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293k0 xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0|20e5",
        "Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293ju xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|18e3",
        "Australia/Hobart|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 1a00 1qM0 Oo0 1zc0 Oo0 TAo0 yM0 1cM0 1cM0 1fA0 1a00 VfA0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|21e4",
        "Australia/Darwin|ACST ACDT|-9u -au|010101010|-293ju xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00|12e4",
        "Australia/Eucla|+0845 +0945|-8J -9J|0101010101010101010|-293iJ xc0 10jc0 yM0 1cM0 1cM0 1gSo0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|368",
        "Australia/Lord_Howe|AEST +1030 +1130 +11|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347",
        "Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293k0 xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0|10",
        "Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293k0 xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|39e5",
        "Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293i0 xc0 10jc0 yM0 1cM0 1cM0 1gSo0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|18e5",
        "CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|",
        "Pacific/Easter|EMT -07 -06 -05|7h.s 70 60 50|012121212121212121212121212123232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 2pA0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0|30e2",
        "CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|",
        "Europe/Dublin|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g600 14o0 1wo0 17c0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
        "EST|EST|50|0||",
        "EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "Etc/GMT-0|GMT|0|0||",
        "Etc/GMT-1|+01|-10|0||",
        "Etc/GMT-11|+11|-b0|0||",
        "Pacific/Tarawa|+12|-c0|0||29e3",
        "Etc/GMT-13|+13|-d0|0||",
        "Etc/GMT-14|+14|-e0|0||",
        "Etc/GMT-2|+02|-20|0||",
        "Etc/GMT-3|+03|-30|0||",
        "Etc/GMT-4|+04|-40|0||",
        "Etc/GMT-5|+05|-50|0||",
        "Etc/GMT-6|+06|-60|0||",
        "Indian/Christmas|+07|-70|0||21e2",
        "Etc/GMT-8|+08|-80|0||",
        "Pacific/Palau|+09|-90|0||21e3",
        "Etc/GMT+1|-01|10|0||",
        "Etc/GMT+10|-10|a0|0||",
        "Etc/GMT+11|-11|b0|0||",
        "Etc/GMT+12|-12|c0|0||",
        "Etc/GMT+3|-03|30|0||",
        "Etc/GMT+4|-04|40|0||",
        "Etc/GMT+5|-05|50|0||",
        "Etc/GMT+6|-06|60|0||",
        "Etc/GMT+7|-07|70|0||",
        "Etc/GMT+8|-08|80|0||",
        "Etc/GMT+9|-09|90|0||",
        "Etc/UTC|UTC|0|0||",
        "Europe/Amsterdam|AMT NST +0120 +0020 CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|16e5",
        "Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|79e3",
        "Europe/Astrakhan|LMT +03 +04 +05|-3c.c -30 -40 -50|012323232323232323212121212121212121212121212121212121212121212|-1Pcrc.c eUMc.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|10e5",
        "Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5",
        "Europe/London|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6",
        "Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
        "Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e5",
        "Europe/Prague|CET CEST GMT|-10 -20 0|01010101010101010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 1qM0 11c0 mp0 xA0 mn0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e5",
        "Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|21e5",
        "Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|19e5",
        "Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 1oo0 11c0 1lc0 17c0 O1V0 3Nf0 WM0 1fA0 1cM0 1cM0 1oJ0 1dd0 1020 1fX0 1cp0 1cM0 1cM0 1cM0 1fA0 1a00 bhy0 Rb0 1wr0 Rc0 1C00 LA0 1C00 LA0 SNW0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cO0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5",
        "Europe/Zurich|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e4",
        "Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|012323232323232323234545467676767676767676767323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 gL0 WO0 1cM0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4",
        "Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
        "Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|30e3",
        "Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
        "Europe/Kaliningrad|CET CEST EET EEST MSK MSD +03|-10 -20 -20 -30 -30 -40 -30|01010101010101232454545454545454543232323232323232323232323232323232323232323262|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 390 7A0 1en0 12N0 1pbb0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|44e4",
        "Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|34e5",
        "Europe/Kirov|LMT +03 +04 +05|-3i.M -30 -40 -50|01232323232323232321212121212121212121212121212121212121212121|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|48e4",
        "Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2le00 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5",
        "Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
        "Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|010101010101010101210343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-25Td0 19B0 1cL0 1dd0 b1z0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1in0 17d0 iIn0 Hd0 1cL0 bb0 1200 2s20 14n0 5aL0 Mp0 1vz0 17d0 1in0 17d0 1in0 17d0 1in0 17d0 6hX0 11B0 XHX0 1a10 1fz0 1a10 19X0 1cN0 1fz0 1a10 1fC0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e5",
        "Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1co0 17c0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1co0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4",
        "Europe/Minsk|MMT EET MSK CEST CET MSD EEST +03|-1O -20 -30 -20 -10 -40 -30 -30|01234343252525252525252525261616161616161616161616161616161616161617|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0|19e5",
        "Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2n5c9.l cFX9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e3",
        "Europe/Moscow|MMT MMT MST MDST MSD MSK +05 EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c4v.j ik0 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|16e6",
        "Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6",
        "Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|64e4",
        "Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1cM0 16M0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1C00 LA0 1zc0 Oo0 1C00 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|39e5",
        "Europe/Samara|LMT +03 +04 +05|-3k.k -30 -40 -50|0123232323232323232121232323232323232323232323232323232323212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2y10 14m0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|12e5",
        "Europe/Saratov|LMT +03 +04 +05|-34.i -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 5810|",
        "Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4",
        "Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
        "Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|15e5",
        "Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e4",
        "Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4",
        "Europe/Ulyanovsk|LMT +03 +04 +05 +02|-3d.A -30 -40 -50 -20|01232323232323232321214121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|13e5",
        "Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e4",
        "Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1ao0 1co0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5",
        "Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646473737373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
        "Europe/Volgograd|LMT +03 +04 +05|-2V.E -30 -40 -50|0123232323232323212121212121212121212121212121212121212121212121|-21IqV.E psLV.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 9Jd0 5gn0|10e5",
        "Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5",
        "Europe/Zaporozhye|+0220 EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|77e4",
        "HST|HST|a0|0||",
        "Indian/Chagos|LMT +05 +06|-4N.E -50 -60|012|-2xosN.E 3AGLN.E|30e2",
        "Indian/Cocos|+0630|-6u|0||596",
        "Indian/Kerguelen|-00 +05|0 -50|01|-MG00|130",
        "Indian/Mahe|LMT +04|-3F.M -40|01|-2xorF.M|79e3",
        "Indian/Maldives|MMT +05|-4S -50|01|-olgS|35e4",
        "Indian/Mauritius|LMT +04 +05|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4",
        "Indian/Reunion|LMT +04|-3F.Q -40|01|-2mDDF.Q|84e4",
        "Pacific/Kwajalein|+11 +10 +09 -12 +12|-b0 -a0 -90 c0 -c0|012034|-1kln0 akp0 6Up0 12ry0 Wan0|14e3",
        "MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|",
        "MST|MST|70|0||",
        "MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "Pacific/Chatham|+1215 +1245 +1345|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600",
        "Pacific/Apia|LMT -1130 -11 -10 +14 +13|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0|37e3",
        "Pacific/Bougainville|+10 +09 +11|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0|18e4",
        "Pacific/Chuuk|+10 +09|-a0 -90|01010|-2ewy0 axB0 RVX0 axd0|49e3",
        "Pacific/Efate|LMT +11 +12|-bd.g -b0 -c0|012121212121212121212121|-2l9nd.g 2uNXd.g Dc0 n610 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0|66e3",
        "Pacific/Enderbury|-00 -12 -11 +13|0 c0 b0 -d0|0123|-1iIo0 1GsA0 B7X0|1",
        "Pacific/Fakaofo|-11 +13|b0 -d0|01|1Gfn0|483",
        "Pacific/Fiji|LMT +12 +13|-bT.I -c0 -d0|01212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 20o0 pc0 2hc0 bc0 4q00 pc0 20o0 pc0 20o0 pc0 20o0 s00 1VA0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 1VA0 s00|88e4",
        "Pacific/Galapagos|LMT -05 -06|5W.o 50 60|01212|-1yVS1.A 2dTz1.A gNd0 rz0|25e3",
        "Pacific/Gambier|LMT -09|8X.M 90|01|-2jof0.c|125",
        "Pacific/Guadalcanal|LMT +11|-aD.M -b0|01|-2joyD.M|11e4",
        "Pacific/Guam|GST +09 GDT ChST|-a0 -90 -b0 -a0|01020202020202020203|-18jK0 6pB0 AhB0 3QL0 g2p0 3p91 WOX rX0 1zd0 Rb0 1wp0 Rb0 5xd0 rX0 5sN0 zb1 1C0X On0 ULb0|17e4",
        "Pacific/Honolulu|HST HDT HWT HPT HST|au 9u 9u 9u a0|0102304|-1thLu 8x0 lef0 8wWu iAu 46p0|37e4",
        "Pacific/Kiritimati|-1040 -10 +14|aE a0 -e0|012|nIaE B7Xk|51e2",
        "Pacific/Kosrae|+11 +09 +10 +12|-b0 -90 -a0 -c0|01021030|-2ewz0 axC0 HBy0 akp0 axd0 WOK0 1bdz0|66e2",
        "Pacific/Majuro|+11 +09 +10 +12|-b0 -90 -a0 -c0|0102103|-2ewz0 axC0 HBy0 akp0 6RB0 12um0|28e3",
        "Pacific/Marquesas|LMT -0930|9i 9u|01|-2joeG|86e2",
        "Pacific/Pago_Pago|LMT SST|bm.M b0|01|-2nDMB.c|37e2",
        "Pacific/Nauru|LMT +1130 +09 +12|-b7.E -bu -90 -c0|01213|-1Xdn7.E QCnB.E 7mqu 1lnbu|10e3",
        "Pacific/Niue|LMT -1120 -11|bj.E bk b0|012|-FScE.k suo0.k|12e2",
        "Pacific/Norfolk|+1112 +1130 +1230 +11 +12|-bc -bu -cu -b0 -c0|012134343434343434343434343434343434343434|-Kgbc W01G Oo0 1COo0 9Jcu 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|25e4",
        "Pacific/Noumea|LMT +11 +12|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0|98e3",
        "Pacific/Pitcairn|-0830 -08|8u 80|01|18Vku|56",
        "Pacific/Pohnpei|+11 +09 +10|-b0 -90 -a0|010210|-2ewz0 axC0 HBy0 akp0 axd0|34e3",
        "Pacific/Rarotonga|LMT -1030 -0930 -10|aD.4 au 9u a0|0123232323232323232323232323|-FSdk.U 13tbO.U IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu|13e3",
        "Pacific/Tahiti|LMT -10|9W.g a0|01|-2joe1.I|18e4",
        "Pacific/Tongatapu|LMT +1220 +13 +14|-cj.c -ck -d0 -e0|01232323232|-XbMj.c BgLX.c 1yndk 15A0 1wo0 xz0 1Q10 xz0 zWN0 s00|75e3",
        "PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
        "WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|"
      ],
      links: [
        "Africa/Abidjan|Africa/Accra",
        "Africa/Abidjan|Africa/Bamako",
        "Africa/Abidjan|Africa/Banjul",
        "Africa/Abidjan|Africa/Conakry",
        "Africa/Abidjan|Africa/Dakar",
        "Africa/Abidjan|Africa/Freetown",
        "Africa/Abidjan|Africa/Lome",
        "Africa/Abidjan|Africa/Nouakchott",
        "Africa/Abidjan|Africa/Ouagadougou",
        "Africa/Abidjan|Africa/Timbuktu",
        "Africa/Abidjan|Atlantic/St_Helena",
        "Africa/Cairo|Egypt",
        "Africa/Johannesburg|Africa/Maseru",
        "Africa/Johannesburg|Africa/Mbabane",
        "Africa/Lagos|Africa/Bangui",
        "Africa/Lagos|Africa/Brazzaville",
        "Africa/Lagos|Africa/Douala",
        "Africa/Lagos|Africa/Kinshasa",
        "Africa/Lagos|Africa/Libreville",
        "Africa/Lagos|Africa/Luanda",
        "Africa/Lagos|Africa/Malabo",
        "Africa/Lagos|Africa/Niamey",
        "Africa/Lagos|Africa/Porto-Novo",
        "Africa/Maputo|Africa/Blantyre",
        "Africa/Maputo|Africa/Bujumbura",
        "Africa/Maputo|Africa/Gaborone",
        "Africa/Maputo|Africa/Harare",
        "Africa/Maputo|Africa/Kigali",
        "Africa/Maputo|Africa/Lubumbashi",
        "Africa/Maputo|Africa/Lusaka",
        "Africa/Nairobi|Africa/Addis_Ababa",
        "Africa/Nairobi|Africa/Asmara",
        "Africa/Nairobi|Africa/Asmera",
        "Africa/Nairobi|Africa/Dar_es_Salaam",
        "Africa/Nairobi|Africa/Djibouti",
        "Africa/Nairobi|Africa/Kampala",
        "Africa/Nairobi|Africa/Mogadishu",
        "Africa/Nairobi|Indian/Antananarivo",
        "Africa/Nairobi|Indian/Comoro",
        "Africa/Nairobi|Indian/Mayotte",
        "Africa/Tripoli|Libya",
        "America/Adak|America/Atka",
        "America/Adak|US/Aleutian",
        "America/Anchorage|US/Alaska",
        "America/Argentina/Buenos_Aires|America/Buenos_Aires",
        "America/Argentina/Catamarca|America/Argentina/ComodRivadavia",
        "America/Argentina/Catamarca|America/Catamarca",
        "America/Argentina/Cordoba|America/Cordoba",
        "America/Argentina/Cordoba|America/Rosario",
        "America/Argentina/Jujuy|America/Jujuy",
        "America/Argentina/Mendoza|America/Mendoza",
        "America/Chicago|US/Central",
        "America/Denver|America/Shiprock",
        "America/Denver|Navajo",
        "America/Denver|US/Mountain",
        "America/Detroit|US/Michigan",
        "America/Edmonton|Canada/Mountain",
        "America/Fort_Wayne|America/Indiana/Indianapolis",
        "America/Fort_Wayne|America/Indianapolis",
        "America/Fort_Wayne|US/East-Indiana",
        "America/Godthab|America/Nuuk",
        "America/Halifax|Canada/Atlantic",
        "America/Havana|Cuba",
        "America/Indiana/Knox|America/Knox_IN",
        "America/Indiana/Knox|US/Indiana-Starke",
        "America/Jamaica|Jamaica",
        "America/Kentucky/Louisville|America/Louisville",
        "America/Los_Angeles|US/Pacific",
        "America/Manaus|Brazil/West",
        "America/Mazatlan|Mexico/BajaSur",
        "America/Mexico_City|Mexico/General",
        "America/New_York|US/Eastern",
        "America/Noronha|Brazil/DeNoronha",
        "America/Panama|America/Atikokan",
        "America/Panama|America/Cayman",
        "America/Panama|America/Coral_Harbour",
        "America/Phoenix|America/Creston",
        "America/Phoenix|US/Arizona",
        "America/Puerto_Rico|America/Anguilla",
        "America/Puerto_Rico|America/Antigua",
        "America/Puerto_Rico|America/Aruba",
        "America/Puerto_Rico|America/Blanc-Sablon",
        "America/Puerto_Rico|America/Curacao",
        "America/Puerto_Rico|America/Dominica",
        "America/Puerto_Rico|America/Grenada",
        "America/Puerto_Rico|America/Guadeloupe",
        "America/Puerto_Rico|America/Kralendijk",
        "America/Puerto_Rico|America/Lower_Princes",
        "America/Puerto_Rico|America/Marigot",
        "America/Puerto_Rico|America/Montserrat",
        "America/Puerto_Rico|America/Port_of_Spain",
        "America/Puerto_Rico|America/St_Barthelemy",
        "America/Puerto_Rico|America/St_Kitts",
        "America/Puerto_Rico|America/St_Lucia",
        "America/Puerto_Rico|America/St_Thomas",
        "America/Puerto_Rico|America/St_Vincent",
        "America/Puerto_Rico|America/Tortola",
        "America/Puerto_Rico|America/Virgin",
        "America/Regina|Canada/Saskatchewan",
        "America/Rio_Branco|America/Porto_Acre",
        "America/Rio_Branco|Brazil/Acre",
        "America/Santiago|Chile/Continental",
        "America/Sao_Paulo|Brazil/East",
        "America/St_Johns|Canada/Newfoundland",
        "America/Tijuana|America/Ensenada",
        "America/Tijuana|America/Santa_Isabel",
        "America/Tijuana|Mexico/BajaNorte",
        "America/Toronto|America/Montreal",
        "America/Toronto|America/Nassau",
        "America/Toronto|Canada/Eastern",
        "America/Vancouver|Canada/Pacific",
        "America/Whitehorse|Canada/Yukon",
        "America/Winnipeg|Canada/Central",
        "Asia/Ashgabat|Asia/Ashkhabad",
        "Asia/Bangkok|Asia/Phnom_Penh",
        "Asia/Bangkok|Asia/Vientiane",
        "Asia/Dhaka|Asia/Dacca",
        "Asia/Dubai|Asia/Muscat",
        "Asia/Ho_Chi_Minh|Asia/Saigon",
        "Asia/Hong_Kong|Hongkong",
        "Asia/Jerusalem|Asia/Tel_Aviv",
        "Asia/Jerusalem|Israel",
        "Asia/Kathmandu|Asia/Katmandu",
        "Asia/Kolkata|Asia/Calcutta",
        "Asia/Kuala_Lumpur|Asia/Singapore",
        "Asia/Kuala_Lumpur|Singapore",
        "Asia/Macau|Asia/Macao",
        "Asia/Makassar|Asia/Ujung_Pandang",
        "Asia/Nicosia|Europe/Nicosia",
        "Asia/Qatar|Asia/Bahrain",
        "Asia/Rangoon|Asia/Yangon",
        "Asia/Riyadh|Antarctica/Syowa",
        "Asia/Riyadh|Asia/Aden",
        "Asia/Riyadh|Asia/Kuwait",
        "Asia/Seoul|ROK",
        "Asia/Shanghai|Asia/Chongqing",
        "Asia/Shanghai|Asia/Chungking",
        "Asia/Shanghai|Asia/Harbin",
        "Asia/Shanghai|PRC",
        "Asia/Taipei|ROC",
        "Asia/Tehran|Iran",
        "Asia/Thimphu|Asia/Thimbu",
        "Asia/Tokyo|Japan",
        "Asia/Ulaanbaatar|Asia/Ulan_Bator",
        "Asia/Urumqi|Asia/Kashgar",
        "Atlantic/Faroe|Atlantic/Faeroe",
        "Atlantic/Reykjavik|Iceland",
        "Atlantic/South_Georgia|Etc/GMT+2",
        "Australia/Adelaide|Australia/South",
        "Australia/Brisbane|Australia/Queensland",
        "Australia/Broken_Hill|Australia/Yancowinna",
        "Australia/Darwin|Australia/North",
        "Australia/Hobart|Australia/Currie",
        "Australia/Hobart|Australia/Tasmania",
        "Australia/Lord_Howe|Australia/LHI",
        "Australia/Melbourne|Australia/Victoria",
        "Australia/Perth|Australia/West",
        "Australia/Sydney|Australia/ACT",
        "Australia/Sydney|Australia/Canberra",
        "Australia/Sydney|Australia/NSW",
        "Etc/GMT-0|Etc/GMT",
        "Etc/GMT-0|Etc/GMT+0",
        "Etc/GMT-0|Etc/GMT0",
        "Etc/GMT-0|Etc/Greenwich",
        "Etc/GMT-0|GMT",
        "Etc/GMT-0|GMT+0",
        "Etc/GMT-0|GMT-0",
        "Etc/GMT-0|GMT0",
        "Etc/GMT-0|Greenwich",
        "Etc/UTC|Etc/UCT",
        "Etc/UTC|Etc/Universal",
        "Etc/UTC|Etc/Zulu",
        "Etc/UTC|UCT",
        "Etc/UTC|UTC",
        "Etc/UTC|Universal",
        "Etc/UTC|Zulu",
        "Europe/Belgrade|Europe/Ljubljana",
        "Europe/Belgrade|Europe/Podgorica",
        "Europe/Belgrade|Europe/Sarajevo",
        "Europe/Belgrade|Europe/Skopje",
        "Europe/Belgrade|Europe/Zagreb",
        "Europe/Chisinau|Europe/Tiraspol",
        "Europe/Dublin|Eire",
        "Europe/Helsinki|Europe/Mariehamn",
        "Europe/Istanbul|Asia/Istanbul",
        "Europe/Istanbul|Turkey",
        "Europe/Lisbon|Portugal",
        "Europe/London|Europe/Belfast",
        "Europe/London|Europe/Guernsey",
        "Europe/London|Europe/Isle_of_Man",
        "Europe/London|Europe/Jersey",
        "Europe/London|GB",
        "Europe/London|GB-Eire",
        "Europe/Moscow|W-SU",
        "Europe/Oslo|Arctic/Longyearbyen",
        "Europe/Oslo|Atlantic/Jan_Mayen",
        "Europe/Prague|Europe/Bratislava",
        "Europe/Rome|Europe/San_Marino",
        "Europe/Rome|Europe/Vatican",
        "Europe/Warsaw|Poland",
        "Europe/Zurich|Europe/Busingen",
        "Europe/Zurich|Europe/Vaduz",
        "Indian/Christmas|Etc/GMT-7",
        "Pacific/Auckland|Antarctica/McMurdo",
        "Pacific/Auckland|Antarctica/South_Pole",
        "Pacific/Auckland|NZ",
        "Pacific/Chatham|NZ-CHAT",
        "Pacific/Chuuk|Pacific/Truk",
        "Pacific/Chuuk|Pacific/Yap",
        "Pacific/Easter|Chile/EasterIsland",
        "Pacific/Enderbury|Pacific/Kanton",
        "Pacific/Guam|Pacific/Saipan",
        "Pacific/Honolulu|Pacific/Johnston",
        "Pacific/Honolulu|US/Hawaii",
        "Pacific/Kwajalein|Kwajalein",
        "Pacific/Pago_Pago|Pacific/Midway",
        "Pacific/Pago_Pago|Pacific/Samoa",
        "Pacific/Pago_Pago|US/Samoa",
        "Pacific/Palau|Etc/GMT-9",
        "Pacific/Pohnpei|Pacific/Ponape",
        "Pacific/Port_Moresby|Antarctica/DumontDUrville",
        "Pacific/Port_Moresby|Etc/GMT-10",
        "Pacific/Tarawa|Etc/GMT-12",
        "Pacific/Tarawa|Pacific/Funafuti",
        "Pacific/Tarawa|Pacific/Wake",
        "Pacific/Tarawa|Pacific/Wallis"
      ],
      countries: [
        "AD|Europe/Andorra",
        "AE|Asia/Dubai",
        "AF|Asia/Kabul",
        "AG|America/Port_of_Spain America/Antigua",
        "AI|America/Port_of_Spain America/Anguilla",
        "AL|Europe/Tirane",
        "AM|Asia/Yerevan",
        "AO|Africa/Lagos Africa/Luanda",
        "AQ|Antarctica/Casey Antarctica/Davis Antarctica/DumontDUrville Antarctica/Mawson Antarctica/Palmer Antarctica/Rothera Antarctica/Syowa Antarctica/Troll Antarctica/Vostok Pacific/Auckland Antarctica/McMurdo",
        "AR|America/Argentina/Buenos_Aires America/Argentina/Cordoba America/Argentina/Salta America/Argentina/Jujuy America/Argentina/Tucuman America/Argentina/Catamarca America/Argentina/La_Rioja America/Argentina/San_Juan America/Argentina/Mendoza America/Argentina/San_Luis America/Argentina/Rio_Gallegos America/Argentina/Ushuaia",
        "AS|Pacific/Pago_Pago",
        "AT|Europe/Vienna",
        "AU|Australia/Lord_Howe Antarctica/Macquarie Australia/Hobart Australia/Melbourne Australia/Sydney Australia/Broken_Hill Australia/Brisbane Australia/Lindeman Australia/Adelaide Australia/Darwin Australia/Perth Australia/Eucla",
        "AW|America/Curacao America/Aruba",
        "AX|Europe/Helsinki Europe/Mariehamn",
        "AZ|Asia/Baku",
        "BA|Europe/Belgrade Europe/Sarajevo",
        "BB|America/Barbados",
        "BD|Asia/Dhaka",
        "BE|Europe/Brussels",
        "BF|Africa/Abidjan Africa/Ouagadougou",
        "BG|Europe/Sofia",
        "BH|Asia/Qatar Asia/Bahrain",
        "BI|Africa/Maputo Africa/Bujumbura",
        "BJ|Africa/Lagos Africa/Porto-Novo",
        "BL|America/Port_of_Spain America/St_Barthelemy",
        "BM|Atlantic/Bermuda",
        "BN|Asia/Brunei",
        "BO|America/La_Paz",
        "BQ|America/Curacao America/Kralendijk",
        "BR|America/Noronha America/Belem America/Fortaleza America/Recife America/Araguaina America/Maceio America/Bahia America/Sao_Paulo America/Campo_Grande America/Cuiaba America/Santarem America/Porto_Velho America/Boa_Vista America/Manaus America/Eirunepe America/Rio_Branco",
        "BS|America/Nassau",
        "BT|Asia/Thimphu",
        "BW|Africa/Maputo Africa/Gaborone",
        "BY|Europe/Minsk",
        "BZ|America/Belize",
        "CA|America/St_Johns America/Halifax America/Glace_Bay America/Moncton America/Goose_Bay America/Blanc-Sablon America/Toronto America/Nipigon America/Thunder_Bay America/Iqaluit America/Pangnirtung America/Atikokan America/Winnipeg America/Rainy_River America/Resolute America/Rankin_Inlet America/Regina America/Swift_Current America/Edmonton America/Cambridge_Bay America/Yellowknife America/Inuvik America/Creston America/Dawson_Creek America/Fort_Nelson America/Whitehorse America/Dawson America/Vancouver",
        "CC|Indian/Cocos",
        "CD|Africa/Maputo Africa/Lagos Africa/Kinshasa Africa/Lubumbashi",
        "CF|Africa/Lagos Africa/Bangui",
        "CG|Africa/Lagos Africa/Brazzaville",
        "CH|Europe/Zurich",
        "CI|Africa/Abidjan",
        "CK|Pacific/Rarotonga",
        "CL|America/Santiago America/Punta_Arenas Pacific/Easter",
        "CM|Africa/Lagos Africa/Douala",
        "CN|Asia/Shanghai Asia/Urumqi",
        "CO|America/Bogota",
        "CR|America/Costa_Rica",
        "CU|America/Havana",
        "CV|Atlantic/Cape_Verde",
        "CW|America/Curacao",
        "CX|Indian/Christmas",
        "CY|Asia/Nicosia Asia/Famagusta",
        "CZ|Europe/Prague",
        "DE|Europe/Zurich Europe/Berlin Europe/Busingen",
        "DJ|Africa/Nairobi Africa/Djibouti",
        "DK|Europe/Copenhagen",
        "DM|America/Port_of_Spain America/Dominica",
        "DO|America/Santo_Domingo",
        "DZ|Africa/Algiers",
        "EC|America/Guayaquil Pacific/Galapagos",
        "EE|Europe/Tallinn",
        "EG|Africa/Cairo",
        "EH|Africa/El_Aaiun",
        "ER|Africa/Nairobi Africa/Asmara",
        "ES|Europe/Madrid Africa/Ceuta Atlantic/Canary",
        "ET|Africa/Nairobi Africa/Addis_Ababa",
        "FI|Europe/Helsinki",
        "FJ|Pacific/Fiji",
        "FK|Atlantic/Stanley",
        "FM|Pacific/Chuuk Pacific/Pohnpei Pacific/Kosrae",
        "FO|Atlantic/Faroe",
        "FR|Europe/Paris",
        "GA|Africa/Lagos Africa/Libreville",
        "GB|Europe/London",
        "GD|America/Port_of_Spain America/Grenada",
        "GE|Asia/Tbilisi",
        "GF|America/Cayenne",
        "GG|Europe/London Europe/Guernsey",
        "GH|Africa/Accra",
        "GI|Europe/Gibraltar",
        "GL|America/Nuuk America/Danmarkshavn America/Scoresbysund America/Thule",
        "GM|Africa/Abidjan Africa/Banjul",
        "GN|Africa/Abidjan Africa/Conakry",
        "GP|America/Port_of_Spain America/Guadeloupe",
        "GQ|Africa/Lagos Africa/Malabo",
        "GR|Europe/Athens",
        "GS|Atlantic/South_Georgia",
        "GT|America/Guatemala",
        "GU|Pacific/Guam",
        "GW|Africa/Bissau",
        "GY|America/Guyana",
        "HK|Asia/Hong_Kong",
        "HN|America/Tegucigalpa",
        "HR|Europe/Belgrade Europe/Zagreb",
        "HT|America/Port-au-Prince",
        "HU|Europe/Budapest",
        "ID|Asia/Jakarta Asia/Pontianak Asia/Makassar Asia/Jayapura",
        "IE|Europe/Dublin",
        "IL|Asia/Jerusalem",
        "IM|Europe/London Europe/Isle_of_Man",
        "IN|Asia/Kolkata",
        "IO|Indian/Chagos",
        "IQ|Asia/Baghdad",
        "IR|Asia/Tehran",
        "IS|Atlantic/Reykjavik",
        "IT|Europe/Rome",
        "JE|Europe/London Europe/Jersey",
        "JM|America/Jamaica",
        "JO|Asia/Amman",
        "JP|Asia/Tokyo",
        "KE|Africa/Nairobi",
        "KG|Asia/Bishkek",
        "KH|Asia/Bangkok Asia/Phnom_Penh",
        "KI|Pacific/Tarawa Pacific/Enderbury Pacific/Kiritimati",
        "KM|Africa/Nairobi Indian/Comoro",
        "KN|America/Port_of_Spain America/St_Kitts",
        "KP|Asia/Pyongyang",
        "KR|Asia/Seoul",
        "KW|Asia/Riyadh Asia/Kuwait",
        "KY|America/Panama America/Cayman",
        "KZ|Asia/Almaty Asia/Qyzylorda Asia/Qostanay Asia/Aqtobe Asia/Aqtau Asia/Atyrau Asia/Oral",
        "LA|Asia/Bangkok Asia/Vientiane",
        "LB|Asia/Beirut",
        "LC|America/Port_of_Spain America/St_Lucia",
        "LI|Europe/Zurich Europe/Vaduz",
        "LK|Asia/Colombo",
        "LR|Africa/Monrovia",
        "LS|Africa/Johannesburg Africa/Maseru",
        "LT|Europe/Vilnius",
        "LU|Europe/Luxembourg",
        "LV|Europe/Riga",
        "LY|Africa/Tripoli",
        "MA|Africa/Casablanca",
        "MC|Europe/Monaco",
        "MD|Europe/Chisinau",
        "ME|Europe/Belgrade Europe/Podgorica",
        "MF|America/Port_of_Spain America/Marigot",
        "MG|Africa/Nairobi Indian/Antananarivo",
        "MH|Pacific/Majuro Pacific/Kwajalein",
        "MK|Europe/Belgrade Europe/Skopje",
        "ML|Africa/Abidjan Africa/Bamako",
        "MM|Asia/Yangon",
        "MN|Asia/Ulaanbaatar Asia/Hovd Asia/Choibalsan",
        "MO|Asia/Macau",
        "MP|Pacific/Guam Pacific/Saipan",
        "MQ|America/Martinique",
        "MR|Africa/Abidjan Africa/Nouakchott",
        "MS|America/Port_of_Spain America/Montserrat",
        "MT|Europe/Malta",
        "MU|Indian/Mauritius",
        "MV|Indian/Maldives",
        "MW|Africa/Maputo Africa/Blantyre",
        "MX|America/Mexico_City America/Cancun America/Merida America/Monterrey America/Matamoros America/Mazatlan America/Chihuahua America/Ojinaga America/Hermosillo America/Tijuana America/Bahia_Banderas",
        "MY|Asia/Kuala_Lumpur Asia/Kuching",
        "MZ|Africa/Maputo",
        "NA|Africa/Windhoek",
        "NC|Pacific/Noumea",
        "NE|Africa/Lagos Africa/Niamey",
        "NF|Pacific/Norfolk",
        "NG|Africa/Lagos",
        "NI|America/Managua",
        "NL|Europe/Amsterdam",
        "NO|Europe/Oslo",
        "NP|Asia/Kathmandu",
        "NR|Pacific/Nauru",
        "NU|Pacific/Niue",
        "NZ|Pacific/Auckland Pacific/Chatham",
        "OM|Asia/Dubai Asia/Muscat",
        "PA|America/Panama",
        "PE|America/Lima",
        "PF|Pacific/Tahiti Pacific/Marquesas Pacific/Gambier",
        "PG|Pacific/Port_Moresby Pacific/Bougainville",
        "PH|Asia/Manila",
        "PK|Asia/Karachi",
        "PL|Europe/Warsaw",
        "PM|America/Miquelon",
        "PN|Pacific/Pitcairn",
        "PR|America/Puerto_Rico",
        "PS|Asia/Gaza Asia/Hebron",
        "PT|Europe/Lisbon Atlantic/Madeira Atlantic/Azores",
        "PW|Pacific/Palau",
        "PY|America/Asuncion",
        "QA|Asia/Qatar",
        "RE|Indian/Reunion",
        "RO|Europe/Bucharest",
        "RS|Europe/Belgrade",
        "RU|Europe/Kaliningrad Europe/Moscow Europe/Simferopol Europe/Kirov Europe/Volgograd Europe/Astrakhan Europe/Saratov Europe/Ulyanovsk Europe/Samara Asia/Yekaterinburg Asia/Omsk Asia/Novosibirsk Asia/Barnaul Asia/Tomsk Asia/Novokuznetsk Asia/Krasnoyarsk Asia/Irkutsk Asia/Chita Asia/Yakutsk Asia/Khandyga Asia/Vladivostok Asia/Ust-Nera Asia/Magadan Asia/Sakhalin Asia/Srednekolymsk Asia/Kamchatka Asia/Anadyr",
        "RW|Africa/Maputo Africa/Kigali",
        "SA|Asia/Riyadh",
        "SB|Pacific/Guadalcanal",
        "SC|Indian/Mahe",
        "SD|Africa/Khartoum",
        "SE|Europe/Stockholm",
        "SG|Asia/Singapore",
        "SH|Africa/Abidjan Atlantic/St_Helena",
        "SI|Europe/Belgrade Europe/Ljubljana",
        "SJ|Europe/Oslo Arctic/Longyearbyen",
        "SK|Europe/Prague Europe/Bratislava",
        "SL|Africa/Abidjan Africa/Freetown",
        "SM|Europe/Rome Europe/San_Marino",
        "SN|Africa/Abidjan Africa/Dakar",
        "SO|Africa/Nairobi Africa/Mogadishu",
        "SR|America/Paramaribo",
        "SS|Africa/Juba",
        "ST|Africa/Sao_Tome",
        "SV|America/El_Salvador",
        "SX|America/Curacao America/Lower_Princes",
        "SY|Asia/Damascus",
        "SZ|Africa/Johannesburg Africa/Mbabane",
        "TC|America/Grand_Turk",
        "TD|Africa/Ndjamena",
        "TF|Indian/Reunion Indian/Kerguelen",
        "TG|Africa/Abidjan Africa/Lome",
        "TH|Asia/Bangkok",
        "TJ|Asia/Dushanbe",
        "TK|Pacific/Fakaofo",
        "TL|Asia/Dili",
        "TM|Asia/Ashgabat",
        "TN|Africa/Tunis",
        "TO|Pacific/Tongatapu",
        "TR|Europe/Istanbul",
        "TT|America/Port_of_Spain",
        "TV|Pacific/Funafuti",
        "TW|Asia/Taipei",
        "TZ|Africa/Nairobi Africa/Dar_es_Salaam",
        "UA|Europe/Simferopol Europe/Kiev Europe/Uzhgorod Europe/Zaporozhye",
        "UG|Africa/Nairobi Africa/Kampala",
        "UM|Pacific/Pago_Pago Pacific/Wake Pacific/Honolulu Pacific/Midway",
        "US|America/New_York America/Detroit America/Kentucky/Louisville America/Kentucky/Monticello America/Indiana/Indianapolis America/Indiana/Vincennes America/Indiana/Winamac America/Indiana/Marengo America/Indiana/Petersburg America/Indiana/Vevay America/Chicago America/Indiana/Tell_City America/Indiana/Knox America/Menominee America/North_Dakota/Center America/North_Dakota/New_Salem America/North_Dakota/Beulah America/Denver America/Boise America/Phoenix America/Los_Angeles America/Anchorage America/Juneau America/Sitka America/Metlakatla America/Yakutat America/Nome America/Adak Pacific/Honolulu",
        "UY|America/Montevideo",
        "UZ|Asia/Samarkand Asia/Tashkent",
        "VA|Europe/Rome Europe/Vatican",
        "VC|America/Port_of_Spain America/St_Vincent",
        "VE|America/Caracas",
        "VG|America/Port_of_Spain America/Tortola",
        "VI|America/Port_of_Spain America/St_Thomas",
        "VN|Asia/Bangkok Asia/Ho_Chi_Minh",
        "VU|Pacific/Efate",
        "WF|Pacific/Wallis",
        "WS|Pacific/Apia",
        "YE|Asia/Riyadh Asia/Aden",
        "YT|Africa/Nairobi Indian/Mayotte",
        "ZA|Africa/Johannesburg",
        "ZM|Africa/Maputo Africa/Lusaka",
        "ZW|Africa/Maputo Africa/Harare"
      ]
    };
  }
});

// node_modules/moment-timezone/index.js
var require_moment_timezone2 = __commonJS({
  "node_modules/moment-timezone/index.js"(exports, module) {
    var moment = module.exports = require_moment_timezone();
    moment.tz.load(require_latest());
  }
});

// node_modules/debug/node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/debug/node_modules/ms/index.js"(exports, module) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "node_modules/has-flag/index.js"(exports, module) {
    "use strict";
    module.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "node_modules/supports-color/index.js"(exports, module) {
    "use strict";
    var os = __require("os");
    var tty = __require("tty");
    var hasFlag = require_has_flag();
    var { env } = process;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      forceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = 1;
    }
    if ("FORCE_COLOR" in env) {
      if (env.FORCE_COLOR === "true") {
        forceColor = 1;
      } else if (env.FORCE_COLOR === "false") {
        forceColor = 0;
      } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    module.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});

// node_modules/debug/src/node.js
var require_node = __commonJS({
  "node_modules/debug/src/node.js"(exports, module) {
    var tty = __require("tty");
    var util = __require("util");
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.destroy = util.deprecate(() => {
    }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    exports.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return "";
      }
      return new Date().toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.format(...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// node_modules/debug/src/index.js
var require_src = __commonJS({
  "node_modules/debug/src/index.js"(exports, module) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module.exports = require_browser();
    } else {
      module.exports = require_node();
    }
  }
});

// node_modules/sequelize/lib/utils/logger.js
var require_logger = __commonJS({
  "node_modules/sequelize/lib/utils/logger.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __objRest = (source, exclude) => {
      var target = {};
      for (var prop in source)
        if (__hasOwnProp2.call(source, prop) && exclude.indexOf(prop) < 0)
          target[prop] = source[prop];
      if (source != null && __getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(source)) {
          if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
            target[prop] = source[prop];
        }
      return target;
    };
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      Logger: () => Logger,
      logger: () => logger
    });
    var import_debug = __toModule(require_src());
    var import_util = __toModule(__require("util"));
    var Logger = class {
      constructor(_a = {}) {
        __publicField(this, "config");
        var _b = _a, { context = "sequelize" } = _b, rest = __objRest(_b, ["context"]);
        this.config = __spreadValues({
          context
        }, rest);
      }
      warn(message) {
        console.warn(`(${this.config.context}) Warning: ${message}`);
      }
      inspect(value) {
        return import_util.default.inspect(value, {
          showHidden: false,
          depth: 1
        });
      }
      debugContext(name) {
        return (0, import_debug.default)(`${this.config.context}:${name}`);
      }
    };
    var logger = new Logger();
  }
});

// node_modules/sequelize/lib/utils/class-to-invokable.js
var require_class_to_invokable = __commonJS({
  "node_modules/sequelize/lib/utils/class-to-invokable.js"(exports) {
    var __defProp2 = Object.defineProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    __export(exports, {
      classToInvokable: () => classToInvokable
    });
    function classToInvokable(Class) {
      return new Proxy(Class, {
        apply(_target, _thisArg, args) {
          return new Class(...args);
        },
        construct(_target, args) {
          return new Class(...args);
        }
      });
    }
  }
});

// node_modules/sequelize/lib/utils/join-sql-fragments.js
var require_join_sql_fragments = __commonJS({
  "node_modules/sequelize/lib/utils/join-sql-fragments.js"(exports) {
    var __defProp2 = Object.defineProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    __export(exports, {
      JoinSQLFragmentsError: () => JoinSQLFragmentsError,
      joinSQLFragments: () => joinSQLFragments
    });
    function doesNotWantLeadingSpace(str) {
      return /^[;,)]/.test(str);
    }
    function doesNotWantTrailingSpace(str) {
      return /\($/.test(str);
    }
    function singleSpaceJoinHelper(parts) {
      return parts.reduce(({ skipNextLeadingSpace, result }, part) => {
        if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {
          result += part.trim();
        } else {
          result += ` ${part.trim()}`;
        }
        return {
          skipNextLeadingSpace: doesNotWantTrailingSpace(part),
          result
        };
      }, {
        skipNextLeadingSpace: true,
        result: ""
      }).result;
    }
    function joinSQLFragments(array) {
      if (array.length === 0)
        return "";
      const truthyArray = array.filter((x) => !!x);
      const flattenedArray = truthyArray.map((fragment) => {
        if (Array.isArray(fragment)) {
          return joinSQLFragments(fragment);
        }
        return fragment;
      });
      for (const fragment of flattenedArray) {
        if (fragment && typeof fragment !== "string") {
          throw new JoinSQLFragmentsError(flattenedArray, fragment, `Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`);
        }
      }
      const trimmedArray = flattenedArray.map((x) => x.trim());
      const nonEmptyStringArray = trimmedArray.filter((x) => x !== "");
      return singleSpaceJoinHelper(nonEmptyStringArray);
    }
    var JoinSQLFragmentsError = class extends TypeError {
      constructor(args, fragment, message) {
        super(message);
        __publicField(this, "args");
        __publicField(this, "fragment");
        this.args = args;
        this.fragment = fragment;
        this.name = "JoinSQLFragmentsError";
      }
    };
  }
});

// node_modules/underscore/underscore-node-f.cjs
var require_underscore_node_f = __commonJS({
  "node_modules/underscore/underscore-node-f.cjs"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var VERSION = "1.13.2";
    var root = typeof self == "object" && self.self === self && self || typeof global == "object" && global.global === global && global || Function("return this")() || {};
    var ArrayProto = Array.prototype;
    var ObjProto = Object.prototype;
    var SymbolProto = typeof Symbol !== "undefined" ? Symbol.prototype : null;
    var push = ArrayProto.push;
    var slice = ArrayProto.slice;
    var toString2 = ObjProto.toString;
    var hasOwnProperty = ObjProto.hasOwnProperty;
    var supportsArrayBuffer = typeof ArrayBuffer !== "undefined";
    var supportsDataView = typeof DataView !== "undefined";
    var nativeIsArray = Array.isArray;
    var nativeKeys = Object.keys;
    var nativeCreate = Object.create;
    var nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;
    var _isNaN = isNaN;
    var _isFinite = isFinite;
    var hasEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
    var nonEnumerableProps = [
      "valueOf",
      "isPrototypeOf",
      "toString",
      "propertyIsEnumerable",
      "hasOwnProperty",
      "toLocaleString"
    ];
    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
    function restArguments(func, startIndex) {
      startIndex = startIndex == null ? func.length - 1 : +startIndex;
      return function() {
        var length = Math.max(arguments.length - startIndex, 0), rest2 = Array(length), index = 0;
        for (; index < length; index++) {
          rest2[index] = arguments[index + startIndex];
        }
        switch (startIndex) {
          case 0:
            return func.call(this, rest2);
          case 1:
            return func.call(this, arguments[0], rest2);
          case 2:
            return func.call(this, arguments[0], arguments[1], rest2);
        }
        var args = Array(startIndex + 1);
        for (index = 0; index < startIndex; index++) {
          args[index] = arguments[index];
        }
        args[startIndex] = rest2;
        return func.apply(this, args);
      };
    }
    function isObject(obj) {
      var type = typeof obj;
      return type === "function" || type === "object" && !!obj;
    }
    function isNull(obj) {
      return obj === null;
    }
    function isUndefined(obj) {
      return obj === void 0;
    }
    function isBoolean(obj) {
      return obj === true || obj === false || toString2.call(obj) === "[object Boolean]";
    }
    function isElement(obj) {
      return !!(obj && obj.nodeType === 1);
    }
    function tagTester(name) {
      var tag = "[object " + name + "]";
      return function(obj) {
        return toString2.call(obj) === tag;
      };
    }
    var isString = tagTester("String");
    var isNumber = tagTester("Number");
    var isDate = tagTester("Date");
    var isRegExp = tagTester("RegExp");
    var isError = tagTester("Error");
    var isSymbol = tagTester("Symbol");
    var isArrayBuffer = tagTester("ArrayBuffer");
    var isFunction = tagTester("Function");
    var nodelist = root.document && root.document.childNodes;
    if (typeof /./ != "function" && typeof Int8Array != "object" && typeof nodelist != "function") {
      isFunction = function(obj) {
        return typeof obj == "function" || false;
      };
    }
    var isFunction$1 = isFunction;
    var hasObjectTag = tagTester("Object");
    var hasStringTagBug = supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)));
    var isIE11 = typeof Map !== "undefined" && hasObjectTag(/* @__PURE__ */ new Map());
    var isDataView = tagTester("DataView");
    function ie10IsDataView(obj) {
      return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);
    }
    var isDataView$1 = hasStringTagBug ? ie10IsDataView : isDataView;
    var isArray = nativeIsArray || tagTester("Array");
    function has$1(obj, key) {
      return obj != null && hasOwnProperty.call(obj, key);
    }
    var isArguments = tagTester("Arguments");
    (function() {
      if (!isArguments(arguments)) {
        isArguments = function(obj) {
          return has$1(obj, "callee");
        };
      }
    })();
    var isArguments$1 = isArguments;
    function isFinite$1(obj) {
      return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));
    }
    function isNaN$1(obj) {
      return isNumber(obj) && _isNaN(obj);
    }
    function constant(value) {
      return function() {
        return value;
      };
    }
    function createSizePropertyCheck(getSizeProperty) {
      return function(collection) {
        var sizeProperty = getSizeProperty(collection);
        return typeof sizeProperty == "number" && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
      };
    }
    function shallowProperty(key) {
      return function(obj) {
        return obj == null ? void 0 : obj[key];
      };
    }
    var getByteLength = shallowProperty("byteLength");
    var isBufferLike = createSizePropertyCheck(getByteLength);
    var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
    function isTypedArray(obj) {
      return nativeIsView ? nativeIsView(obj) && !isDataView$1(obj) : isBufferLike(obj) && typedArrayPattern.test(toString2.call(obj));
    }
    var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);
    var getLength = shallowProperty("length");
    function emulatedSet(keys2) {
      var hash = {};
      for (var l = keys2.length, i = 0; i < l; ++i)
        hash[keys2[i]] = true;
      return {
        contains: function(key) {
          return hash[key] === true;
        },
        push: function(key) {
          hash[key] = true;
          return keys2.push(key);
        }
      };
    }
    function collectNonEnumProps(obj, keys2) {
      keys2 = emulatedSet(keys2);
      var nonEnumIdx = nonEnumerableProps.length;
      var constructor = obj.constructor;
      var proto = isFunction$1(constructor) && constructor.prototype || ObjProto;
      var prop = "constructor";
      if (has$1(obj, prop) && !keys2.contains(prop))
        keys2.push(prop);
      while (nonEnumIdx--) {
        prop = nonEnumerableProps[nonEnumIdx];
        if (prop in obj && obj[prop] !== proto[prop] && !keys2.contains(prop)) {
          keys2.push(prop);
        }
      }
    }
    function keys(obj) {
      if (!isObject(obj))
        return [];
      if (nativeKeys)
        return nativeKeys(obj);
      var keys2 = [];
      for (var key in obj)
        if (has$1(obj, key))
          keys2.push(key);
      if (hasEnumBug)
        collectNonEnumProps(obj, keys2);
      return keys2;
    }
    function isEmpty(obj) {
      if (obj == null)
        return true;
      var length = getLength(obj);
      if (typeof length == "number" && (isArray(obj) || isString(obj) || isArguments$1(obj)))
        return length === 0;
      return getLength(keys(obj)) === 0;
    }
    function isMatch(object2, attrs) {
      var _keys = keys(attrs), length = _keys.length;
      if (object2 == null)
        return !length;
      var obj = Object(object2);
      for (var i = 0; i < length; i++) {
        var key = _keys[i];
        if (attrs[key] !== obj[key] || !(key in obj))
          return false;
      }
      return true;
    }
    function _$1(obj) {
      if (obj instanceof _$1)
        return obj;
      if (!(this instanceof _$1))
        return new _$1(obj);
      this._wrapped = obj;
    }
    _$1.VERSION = VERSION;
    _$1.prototype.value = function() {
      return this._wrapped;
    };
    _$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;
    _$1.prototype.toString = function() {
      return String(this._wrapped);
    };
    function toBufferView(bufferSource) {
      return new Uint8Array(bufferSource.buffer || bufferSource, bufferSource.byteOffset || 0, getByteLength(bufferSource));
    }
    var tagDataView = "[object DataView]";
    function eq(a, b, aStack, bStack) {
      if (a === b)
        return a !== 0 || 1 / a === 1 / b;
      if (a == null || b == null)
        return false;
      if (a !== a)
        return b !== b;
      var type = typeof a;
      if (type !== "function" && type !== "object" && typeof b != "object")
        return false;
      return deepEq(a, b, aStack, bStack);
    }
    function deepEq(a, b, aStack, bStack) {
      if (a instanceof _$1)
        a = a._wrapped;
      if (b instanceof _$1)
        b = b._wrapped;
      var className = toString2.call(a);
      if (className !== toString2.call(b))
        return false;
      if (hasStringTagBug && className == "[object Object]" && isDataView$1(a)) {
        if (!isDataView$1(b))
          return false;
        className = tagDataView;
      }
      switch (className) {
        case "[object RegExp]":
        case "[object String]":
          return "" + a === "" + b;
        case "[object Number]":
          if (+a !== +a)
            return +b !== +b;
          return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case "[object Date]":
        case "[object Boolean]":
          return +a === +b;
        case "[object Symbol]":
          return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
        case "[object ArrayBuffer]":
        case tagDataView:
          return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
      }
      var areArrays = className === "[object Array]";
      if (!areArrays && isTypedArray$1(a)) {
        var byteLength = getByteLength(a);
        if (byteLength !== getByteLength(b))
          return false;
        if (a.buffer === b.buffer && a.byteOffset === b.byteOffset)
          return true;
        areArrays = true;
      }
      if (!areArrays) {
        if (typeof a != "object" || typeof b != "object")
          return false;
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor && isFunction$1(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
          return false;
        }
      }
      aStack = aStack || [];
      bStack = bStack || [];
      var length = aStack.length;
      while (length--) {
        if (aStack[length] === a)
          return bStack[length] === b;
      }
      aStack.push(a);
      bStack.push(b);
      if (areArrays) {
        length = a.length;
        if (length !== b.length)
          return false;
        while (length--) {
          if (!eq(a[length], b[length], aStack, bStack))
            return false;
        }
      } else {
        var _keys = keys(a), key;
        length = _keys.length;
        if (keys(b).length !== length)
          return false;
        while (length--) {
          key = _keys[length];
          if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack)))
            return false;
        }
      }
      aStack.pop();
      bStack.pop();
      return true;
    }
    function isEqual(a, b) {
      return eq(a, b);
    }
    function allKeys(obj) {
      if (!isObject(obj))
        return [];
      var keys2 = [];
      for (var key in obj)
        keys2.push(key);
      if (hasEnumBug)
        collectNonEnumProps(obj, keys2);
      return keys2;
    }
    function ie11fingerprint(methods) {
      var length = getLength(methods);
      return function(obj) {
        if (obj == null)
          return false;
        var keys2 = allKeys(obj);
        if (getLength(keys2))
          return false;
        for (var i = 0; i < length; i++) {
          if (!isFunction$1(obj[methods[i]]))
            return false;
        }
        return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);
      };
    }
    var forEachName = "forEach";
    var hasName = "has";
    var commonInit = ["clear", "delete"];
    var mapTail = ["get", hasName, "set"];
    var mapMethods = commonInit.concat(forEachName, mapTail);
    var weakMapMethods = commonInit.concat(mapTail);
    var setMethods = ["add"].concat(commonInit, forEachName, hasName);
    var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester("Map");
    var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester("WeakMap");
    var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester("Set");
    var isWeakSet = tagTester("WeakSet");
    function values(obj) {
      var _keys = keys(obj);
      var length = _keys.length;
      var values2 = Array(length);
      for (var i = 0; i < length; i++) {
        values2[i] = obj[_keys[i]];
      }
      return values2;
    }
    function pairs(obj) {
      var _keys = keys(obj);
      var length = _keys.length;
      var pairs2 = Array(length);
      for (var i = 0; i < length; i++) {
        pairs2[i] = [_keys[i], obj[_keys[i]]];
      }
      return pairs2;
    }
    function invert(obj) {
      var result2 = {};
      var _keys = keys(obj);
      for (var i = 0, length = _keys.length; i < length; i++) {
        result2[obj[_keys[i]]] = _keys[i];
      }
      return result2;
    }
    function functions(obj) {
      var names = [];
      for (var key in obj) {
        if (isFunction$1(obj[key]))
          names.push(key);
      }
      return names.sort();
    }
    function createAssigner(keysFunc, defaults2) {
      return function(obj) {
        var length = arguments.length;
        if (defaults2)
          obj = Object(obj);
        if (length < 2 || obj == null)
          return obj;
        for (var index = 1; index < length; index++) {
          var source = arguments[index], keys2 = keysFunc(source), l = keys2.length;
          for (var i = 0; i < l; i++) {
            var key = keys2[i];
            if (!defaults2 || obj[key] === void 0)
              obj[key] = source[key];
          }
        }
        return obj;
      };
    }
    var extend = createAssigner(allKeys);
    var extendOwn = createAssigner(keys);
    var defaults = createAssigner(allKeys, true);
    function ctor() {
      return function() {
      };
    }
    function baseCreate(prototype) {
      if (!isObject(prototype))
        return {};
      if (nativeCreate)
        return nativeCreate(prototype);
      var Ctor = ctor();
      Ctor.prototype = prototype;
      var result2 = new Ctor();
      Ctor.prototype = null;
      return result2;
    }
    function create(prototype, props) {
      var result2 = baseCreate(prototype);
      if (props)
        extendOwn(result2, props);
      return result2;
    }
    function clone(obj) {
      if (!isObject(obj))
        return obj;
      return isArray(obj) ? obj.slice() : extend({}, obj);
    }
    function tap(obj, interceptor) {
      interceptor(obj);
      return obj;
    }
    function toPath$1(path) {
      return isArray(path) ? path : [path];
    }
    _$1.toPath = toPath$1;
    function toPath(path) {
      return _$1.toPath(path);
    }
    function deepGet(obj, path) {
      var length = path.length;
      for (var i = 0; i < length; i++) {
        if (obj == null)
          return void 0;
        obj = obj[path[i]];
      }
      return length ? obj : void 0;
    }
    function get(object2, path, defaultValue) {
      var value = deepGet(object2, toPath(path));
      return isUndefined(value) ? defaultValue : value;
    }
    function has(obj, path) {
      path = toPath(path);
      var length = path.length;
      for (var i = 0; i < length; i++) {
        var key = path[i];
        if (!has$1(obj, key))
          return false;
        obj = obj[key];
      }
      return !!length;
    }
    function identity(value) {
      return value;
    }
    function matcher(attrs) {
      attrs = extendOwn({}, attrs);
      return function(obj) {
        return isMatch(obj, attrs);
      };
    }
    function property(path) {
      path = toPath(path);
      return function(obj) {
        return deepGet(obj, path);
      };
    }
    function optimizeCb(func, context, argCount) {
      if (context === void 0)
        return func;
      switch (argCount == null ? 3 : argCount) {
        case 1:
          return function(value) {
            return func.call(context, value);
          };
        case 3:
          return function(value, index, collection) {
            return func.call(context, value, index, collection);
          };
        case 4:
          return function(accumulator, value, index, collection) {
            return func.call(context, accumulator, value, index, collection);
          };
      }
      return function() {
        return func.apply(context, arguments);
      };
    }
    function baseIteratee(value, context, argCount) {
      if (value == null)
        return identity;
      if (isFunction$1(value))
        return optimizeCb(value, context, argCount);
      if (isObject(value) && !isArray(value))
        return matcher(value);
      return property(value);
    }
    function iteratee(value, context) {
      return baseIteratee(value, context, Infinity);
    }
    _$1.iteratee = iteratee;
    function cb(value, context, argCount) {
      if (_$1.iteratee !== iteratee)
        return _$1.iteratee(value, context);
      return baseIteratee(value, context, argCount);
    }
    function mapObject(obj, iteratee2, context) {
      iteratee2 = cb(iteratee2, context);
      var _keys = keys(obj), length = _keys.length, results = {};
      for (var index = 0; index < length; index++) {
        var currentKey = _keys[index];
        results[currentKey] = iteratee2(obj[currentKey], currentKey, obj);
      }
      return results;
    }
    function noop() {
    }
    function propertyOf(obj) {
      if (obj == null)
        return noop;
      return function(path) {
        return get(obj, path);
      };
    }
    function times(n, iteratee2, context) {
      var accum = Array(Math.max(0, n));
      iteratee2 = optimizeCb(iteratee2, context, 1);
      for (var i = 0; i < n; i++)
        accum[i] = iteratee2(i);
      return accum;
    }
    function random(min2, max2) {
      if (max2 == null) {
        max2 = min2;
        min2 = 0;
      }
      return min2 + Math.floor(Math.random() * (max2 - min2 + 1));
    }
    var now = Date.now || function() {
      return new Date().getTime();
    };
    function createEscaper(map2) {
      var escaper = function(match) {
        return map2[match];
      };
      var source = "(?:" + keys(map2).join("|") + ")";
      var testRegexp = RegExp(source);
      var replaceRegexp = RegExp(source, "g");
      return function(string) {
        string = string == null ? "" : "" + string;
        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
      };
    }
    var escapeMap = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#x27;",
      "`": "&#x60;"
    };
    var _escape = createEscaper(escapeMap);
    var unescapeMap = invert(escapeMap);
    var _unescape = createEscaper(unescapeMap);
    var templateSettings = _$1.templateSettings = {
      evaluate: /<%([\s\S]+?)%>/g,
      interpolate: /<%=([\s\S]+?)%>/g,
      escape: /<%-([\s\S]+?)%>/g
    };
    var noMatch = /(.)^/;
    var escapes = {
      "'": "'",
      "\\": "\\",
      "\r": "r",
      "\n": "n",
      "\u2028": "u2028",
      "\u2029": "u2029"
    };
    var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
    function escapeChar(match) {
      return "\\" + escapes[match];
    }
    var bareIdentifier = /^\s*(\w|\$)+\s*$/;
    function template(text, settings, oldSettings) {
      if (!settings && oldSettings)
        settings = oldSettings;
      settings = defaults({}, settings, _$1.templateSettings);
      var matcher2 = RegExp([
        (settings.escape || noMatch).source,
        (settings.interpolate || noMatch).source,
        (settings.evaluate || noMatch).source
      ].join("|") + "|$", "g");
      var index = 0;
      var source = "__p+='";
      text.replace(matcher2, function(match, escape, interpolate, evaluate, offset) {
        source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
        index = offset + match.length;
        if (escape) {
          source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
        } else if (interpolate) {
          source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
        } else if (evaluate) {
          source += "';\n" + evaluate + "\n__p+='";
        }
        return match;
      });
      source += "';\n";
      var argument = settings.variable;
      if (argument) {
        if (!bareIdentifier.test(argument))
          throw new Error("variable is not a bare identifier: " + argument);
      } else {
        source = "with(obj||{}){\n" + source + "}\n";
        argument = "obj";
      }
      source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
      var render;
      try {
        render = new Function(argument, "_", source);
      } catch (e) {
        e.source = source;
        throw e;
      }
      var template2 = function(data) {
        return render.call(this, data, _$1);
      };
      template2.source = "function(" + argument + "){\n" + source + "}";
      return template2;
    }
    function result(obj, path, fallback) {
      path = toPath(path);
      var length = path.length;
      if (!length) {
        return isFunction$1(fallback) ? fallback.call(obj) : fallback;
      }
      for (var i = 0; i < length; i++) {
        var prop = obj == null ? void 0 : obj[path[i]];
        if (prop === void 0) {
          prop = fallback;
          i = length;
        }
        obj = isFunction$1(prop) ? prop.call(obj) : prop;
      }
      return obj;
    }
    var idCounter = 0;
    function uniqueId(prefix) {
      var id = ++idCounter + "";
      return prefix ? prefix + id : id;
    }
    function chain(obj) {
      var instance = _$1(obj);
      instance._chain = true;
      return instance;
    }
    function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
      if (!(callingContext instanceof boundFunc))
        return sourceFunc.apply(context, args);
      var self2 = baseCreate(sourceFunc.prototype);
      var result2 = sourceFunc.apply(self2, args);
      if (isObject(result2))
        return result2;
      return self2;
    }
    var partial = restArguments(function(func, boundArgs) {
      var placeholder = partial.placeholder;
      var bound = function() {
        var position = 0, length = boundArgs.length;
        var args = Array(length);
        for (var i = 0; i < length; i++) {
          args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
        }
        while (position < arguments.length)
          args.push(arguments[position++]);
        return executeBound(func, bound, this, this, args);
      };
      return bound;
    });
    partial.placeholder = _$1;
    var bind = restArguments(function(func, context, args) {
      if (!isFunction$1(func))
        throw new TypeError("Bind must be called on a function");
      var bound = restArguments(function(callArgs) {
        return executeBound(func, bound, context, this, args.concat(callArgs));
      });
      return bound;
    });
    var isArrayLike = createSizePropertyCheck(getLength);
    function flatten$1(input, depth, strict, output) {
      output = output || [];
      if (!depth && depth !== 0) {
        depth = Infinity;
      } else if (depth <= 0) {
        return output.concat(input);
      }
      var idx = output.length;
      for (var i = 0, length = getLength(input); i < length; i++) {
        var value = input[i];
        if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {
          if (depth > 1) {
            flatten$1(value, depth - 1, strict, output);
            idx = output.length;
          } else {
            var j = 0, len = value.length;
            while (j < len)
              output[idx++] = value[j++];
          }
        } else if (!strict) {
          output[idx++] = value;
        }
      }
      return output;
    }
    var bindAll = restArguments(function(obj, keys2) {
      keys2 = flatten$1(keys2, false, false);
      var index = keys2.length;
      if (index < 1)
        throw new Error("bindAll must be passed function names");
      while (index--) {
        var key = keys2[index];
        obj[key] = bind(obj[key], obj);
      }
      return obj;
    });
    function memoize(func, hasher) {
      var memoize2 = function(key) {
        var cache = memoize2.cache;
        var address = "" + (hasher ? hasher.apply(this, arguments) : key);
        if (!has$1(cache, address))
          cache[address] = func.apply(this, arguments);
        return cache[address];
      };
      memoize2.cache = {};
      return memoize2;
    }
    var delay = restArguments(function(func, wait, args) {
      return setTimeout(function() {
        return func.apply(null, args);
      }, wait);
    });
    var defer = partial(delay, _$1, 1);
    function throttle(func, wait, options) {
      var timeout, context, args, result2;
      var previous = 0;
      if (!options)
        options = {};
      var later = function() {
        previous = options.leading === false ? 0 : now();
        timeout = null;
        result2 = func.apply(context, args);
        if (!timeout)
          context = args = null;
      };
      var throttled = function() {
        var _now = now();
        if (!previous && options.leading === false)
          previous = _now;
        var remaining = wait - (_now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          previous = _now;
          result2 = func.apply(context, args);
          if (!timeout)
            context = args = null;
        } else if (!timeout && options.trailing !== false) {
          timeout = setTimeout(later, remaining);
        }
        return result2;
      };
      throttled.cancel = function() {
        clearTimeout(timeout);
        previous = 0;
        timeout = context = args = null;
      };
      return throttled;
    }
    function debounce(func, wait, immediate) {
      var timeout, previous, args, result2, context;
      var later = function() {
        var passed = now() - previous;
        if (wait > passed) {
          timeout = setTimeout(later, wait - passed);
        } else {
          timeout = null;
          if (!immediate)
            result2 = func.apply(context, args);
          if (!timeout)
            args = context = null;
        }
      };
      var debounced = restArguments(function(_args) {
        context = this;
        args = _args;
        previous = now();
        if (!timeout) {
          timeout = setTimeout(later, wait);
          if (immediate)
            result2 = func.apply(context, args);
        }
        return result2;
      });
      debounced.cancel = function() {
        clearTimeout(timeout);
        timeout = args = context = null;
      };
      return debounced;
    }
    function wrap(func, wrapper) {
      return partial(wrapper, func);
    }
    function negate(predicate) {
      return function() {
        return !predicate.apply(this, arguments);
      };
    }
    function compose() {
      var args = arguments;
      var start = args.length - 1;
      return function() {
        var i = start;
        var result2 = args[start].apply(this, arguments);
        while (i--)
          result2 = args[i].call(this, result2);
        return result2;
      };
    }
    function after(times2, func) {
      return function() {
        if (--times2 < 1) {
          return func.apply(this, arguments);
        }
      };
    }
    function before(times2, func) {
      var memo;
      return function() {
        if (--times2 > 0) {
          memo = func.apply(this, arguments);
        }
        if (times2 <= 1)
          func = null;
        return memo;
      };
    }
    var once = partial(before, 2);
    function findKey(obj, predicate, context) {
      predicate = cb(predicate, context);
      var _keys = keys(obj), key;
      for (var i = 0, length = _keys.length; i < length; i++) {
        key = _keys[i];
        if (predicate(obj[key], key, obj))
          return key;
      }
    }
    function createPredicateIndexFinder(dir) {
      return function(array, predicate, context) {
        predicate = cb(predicate, context);
        var length = getLength(array);
        var index = dir > 0 ? 0 : length - 1;
        for (; index >= 0 && index < length; index += dir) {
          if (predicate(array[index], index, array))
            return index;
        }
        return -1;
      };
    }
    var findIndex = createPredicateIndexFinder(1);
    var findLastIndex = createPredicateIndexFinder(-1);
    function sortedIndex(array, obj, iteratee2, context) {
      iteratee2 = cb(iteratee2, context, 1);
      var value = iteratee2(obj);
      var low = 0, high = getLength(array);
      while (low < high) {
        var mid = Math.floor((low + high) / 2);
        if (iteratee2(array[mid]) < value)
          low = mid + 1;
        else
          high = mid;
      }
      return low;
    }
    function createIndexFinder(dir, predicateFind, sortedIndex2) {
      return function(array, item, idx) {
        var i = 0, length = getLength(array);
        if (typeof idx == "number") {
          if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
          } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
          }
        } else if (sortedIndex2 && idx && length) {
          idx = sortedIndex2(array, item);
          return array[idx] === item ? idx : -1;
        }
        if (item !== item) {
          idx = predicateFind(slice.call(array, i, length), isNaN$1);
          return idx >= 0 ? idx + i : -1;
        }
        for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
          if (array[idx] === item)
            return idx;
        }
        return -1;
      };
    }
    var indexOf = createIndexFinder(1, findIndex, sortedIndex);
    var lastIndexOf = createIndexFinder(-1, findLastIndex);
    function find(obj, predicate, context) {
      var keyFinder = isArrayLike(obj) ? findIndex : findKey;
      var key = keyFinder(obj, predicate, context);
      if (key !== void 0 && key !== -1)
        return obj[key];
    }
    function findWhere(obj, attrs) {
      return find(obj, matcher(attrs));
    }
    function each(obj, iteratee2, context) {
      iteratee2 = optimizeCb(iteratee2, context);
      var i, length;
      if (isArrayLike(obj)) {
        for (i = 0, length = obj.length; i < length; i++) {
          iteratee2(obj[i], i, obj);
        }
      } else {
        var _keys = keys(obj);
        for (i = 0, length = _keys.length; i < length; i++) {
          iteratee2(obj[_keys[i]], _keys[i], obj);
        }
      }
      return obj;
    }
    function map(obj, iteratee2, context) {
      iteratee2 = cb(iteratee2, context);
      var _keys = !isArrayLike(obj) && keys(obj), length = (_keys || obj).length, results = Array(length);
      for (var index = 0; index < length; index++) {
        var currentKey = _keys ? _keys[index] : index;
        results[index] = iteratee2(obj[currentKey], currentKey, obj);
      }
      return results;
    }
    function createReduce(dir) {
      var reducer = function(obj, iteratee2, memo, initial2) {
        var _keys = !isArrayLike(obj) && keys(obj), length = (_keys || obj).length, index = dir > 0 ? 0 : length - 1;
        if (!initial2) {
          memo = obj[_keys ? _keys[index] : index];
          index += dir;
        }
        for (; index >= 0 && index < length; index += dir) {
          var currentKey = _keys ? _keys[index] : index;
          memo = iteratee2(memo, obj[currentKey], currentKey, obj);
        }
        return memo;
      };
      return function(obj, iteratee2, memo, context) {
        var initial2 = arguments.length >= 3;
        return reducer(obj, optimizeCb(iteratee2, context, 4), memo, initial2);
      };
    }
    var reduce = createReduce(1);
    var reduceRight = createReduce(-1);
    function filter(obj, predicate, context) {
      var results = [];
      predicate = cb(predicate, context);
      each(obj, function(value, index, list) {
        if (predicate(value, index, list))
          results.push(value);
      });
      return results;
    }
    function reject(obj, predicate, context) {
      return filter(obj, negate(cb(predicate)), context);
    }
    function every(obj, predicate, context) {
      predicate = cb(predicate, context);
      var _keys = !isArrayLike(obj) && keys(obj), length = (_keys || obj).length;
      for (var index = 0; index < length; index++) {
        var currentKey = _keys ? _keys[index] : index;
        if (!predicate(obj[currentKey], currentKey, obj))
          return false;
      }
      return true;
    }
    function some(obj, predicate, context) {
      predicate = cb(predicate, context);
      var _keys = !isArrayLike(obj) && keys(obj), length = (_keys || obj).length;
      for (var index = 0; index < length; index++) {
        var currentKey = _keys ? _keys[index] : index;
        if (predicate(obj[currentKey], currentKey, obj))
          return true;
      }
      return false;
    }
    function contains(obj, item, fromIndex, guard) {
      if (!isArrayLike(obj))
        obj = values(obj);
      if (typeof fromIndex != "number" || guard)
        fromIndex = 0;
      return indexOf(obj, item, fromIndex) >= 0;
    }
    var invoke = restArguments(function(obj, path, args) {
      var contextPath, func;
      if (isFunction$1(path)) {
        func = path;
      } else {
        path = toPath(path);
        contextPath = path.slice(0, -1);
        path = path[path.length - 1];
      }
      return map(obj, function(context) {
        var method = func;
        if (!method) {
          if (contextPath && contextPath.length) {
            context = deepGet(context, contextPath);
          }
          if (context == null)
            return void 0;
          method = context[path];
        }
        return method == null ? method : method.apply(context, args);
      });
    });
    function pluck(obj, key) {
      return map(obj, property(key));
    }
    function where2(obj, attrs) {
      return filter(obj, matcher(attrs));
    }
    function max(obj, iteratee2, context) {
      var result2 = -Infinity, lastComputed = -Infinity, value, computed;
      if (iteratee2 == null || typeof iteratee2 == "number" && typeof obj[0] != "object" && obj != null) {
        obj = isArrayLike(obj) ? obj : values(obj);
        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];
          if (value != null && value > result2) {
            result2 = value;
          }
        }
      } else {
        iteratee2 = cb(iteratee2, context);
        each(obj, function(v, index, list) {
          computed = iteratee2(v, index, list);
          if (computed > lastComputed || computed === -Infinity && result2 === -Infinity) {
            result2 = v;
            lastComputed = computed;
          }
        });
      }
      return result2;
    }
    function min(obj, iteratee2, context) {
      var result2 = Infinity, lastComputed = Infinity, value, computed;
      if (iteratee2 == null || typeof iteratee2 == "number" && typeof obj[0] != "object" && obj != null) {
        obj = isArrayLike(obj) ? obj : values(obj);
        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];
          if (value != null && value < result2) {
            result2 = value;
          }
        }
      } else {
        iteratee2 = cb(iteratee2, context);
        each(obj, function(v, index, list) {
          computed = iteratee2(v, index, list);
          if (computed < lastComputed || computed === Infinity && result2 === Infinity) {
            result2 = v;
            lastComputed = computed;
          }
        });
      }
      return result2;
    }
    var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
    function toArray(obj) {
      if (!obj)
        return [];
      if (isArray(obj))
        return slice.call(obj);
      if (isString(obj)) {
        return obj.match(reStrSymbol);
      }
      if (isArrayLike(obj))
        return map(obj, identity);
      return values(obj);
    }
    function sample(obj, n, guard) {
      if (n == null || guard) {
        if (!isArrayLike(obj))
          obj = values(obj);
        return obj[random(obj.length - 1)];
      }
      var sample2 = toArray(obj);
      var length = getLength(sample2);
      n = Math.max(Math.min(n, length), 0);
      var last2 = length - 1;
      for (var index = 0; index < n; index++) {
        var rand = random(index, last2);
        var temp = sample2[index];
        sample2[index] = sample2[rand];
        sample2[rand] = temp;
      }
      return sample2.slice(0, n);
    }
    function shuffle(obj) {
      return sample(obj, Infinity);
    }
    function sortBy(obj, iteratee2, context) {
      var index = 0;
      iteratee2 = cb(iteratee2, context);
      return pluck(map(obj, function(value, key, list) {
        return {
          value,
          index: index++,
          criteria: iteratee2(value, key, list)
        };
      }).sort(function(left, right) {
        var a = left.criteria;
        var b = right.criteria;
        if (a !== b) {
          if (a > b || a === void 0)
            return 1;
          if (a < b || b === void 0)
            return -1;
        }
        return left.index - right.index;
      }), "value");
    }
    function group(behavior, partition2) {
      return function(obj, iteratee2, context) {
        var result2 = partition2 ? [[], []] : {};
        iteratee2 = cb(iteratee2, context);
        each(obj, function(value, index) {
          var key = iteratee2(value, index, obj);
          behavior(result2, value, key);
        });
        return result2;
      };
    }
    var groupBy = group(function(result2, value, key) {
      if (has$1(result2, key))
        result2[key].push(value);
      else
        result2[key] = [value];
    });
    var indexBy = group(function(result2, value, key) {
      result2[key] = value;
    });
    var countBy = group(function(result2, value, key) {
      if (has$1(result2, key))
        result2[key]++;
      else
        result2[key] = 1;
    });
    var partition = group(function(result2, value, pass) {
      result2[pass ? 0 : 1].push(value);
    }, true);
    function size(obj) {
      if (obj == null)
        return 0;
      return isArrayLike(obj) ? obj.length : keys(obj).length;
    }
    function keyInObj(value, key, obj) {
      return key in obj;
    }
    var pick = restArguments(function(obj, keys2) {
      var result2 = {}, iteratee2 = keys2[0];
      if (obj == null)
        return result2;
      if (isFunction$1(iteratee2)) {
        if (keys2.length > 1)
          iteratee2 = optimizeCb(iteratee2, keys2[1]);
        keys2 = allKeys(obj);
      } else {
        iteratee2 = keyInObj;
        keys2 = flatten$1(keys2, false, false);
        obj = Object(obj);
      }
      for (var i = 0, length = keys2.length; i < length; i++) {
        var key = keys2[i];
        var value = obj[key];
        if (iteratee2(value, key, obj))
          result2[key] = value;
      }
      return result2;
    });
    var omit = restArguments(function(obj, keys2) {
      var iteratee2 = keys2[0], context;
      if (isFunction$1(iteratee2)) {
        iteratee2 = negate(iteratee2);
        if (keys2.length > 1)
          context = keys2[1];
      } else {
        keys2 = map(flatten$1(keys2, false, false), String);
        iteratee2 = function(value, key) {
          return !contains(keys2, key);
        };
      }
      return pick(obj, iteratee2, context);
    });
    function initial(array, n, guard) {
      return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
    }
    function first(array, n, guard) {
      if (array == null || array.length < 1)
        return n == null || guard ? void 0 : [];
      if (n == null || guard)
        return array[0];
      return initial(array, array.length - n);
    }
    function rest(array, n, guard) {
      return slice.call(array, n == null || guard ? 1 : n);
    }
    function last(array, n, guard) {
      if (array == null || array.length < 1)
        return n == null || guard ? void 0 : [];
      if (n == null || guard)
        return array[array.length - 1];
      return rest(array, Math.max(0, array.length - n));
    }
    function compact(array) {
      return filter(array, Boolean);
    }
    function flatten(array, depth) {
      return flatten$1(array, depth, false);
    }
    var difference = restArguments(function(array, rest2) {
      rest2 = flatten$1(rest2, true, true);
      return filter(array, function(value) {
        return !contains(rest2, value);
      });
    });
    var without = restArguments(function(array, otherArrays) {
      return difference(array, otherArrays);
    });
    function uniq(array, isSorted, iteratee2, context) {
      if (!isBoolean(isSorted)) {
        context = iteratee2;
        iteratee2 = isSorted;
        isSorted = false;
      }
      if (iteratee2 != null)
        iteratee2 = cb(iteratee2, context);
      var result2 = [];
      var seen = [];
      for (var i = 0, length = getLength(array); i < length; i++) {
        var value = array[i], computed = iteratee2 ? iteratee2(value, i, array) : value;
        if (isSorted && !iteratee2) {
          if (!i || seen !== computed)
            result2.push(value);
          seen = computed;
        } else if (iteratee2) {
          if (!contains(seen, computed)) {
            seen.push(computed);
            result2.push(value);
          }
        } else if (!contains(result2, value)) {
          result2.push(value);
        }
      }
      return result2;
    }
    var union = restArguments(function(arrays) {
      return uniq(flatten$1(arrays, true, true));
    });
    function intersection(array) {
      var result2 = [];
      var argsLength = arguments.length;
      for (var i = 0, length = getLength(array); i < length; i++) {
        var item = array[i];
        if (contains(result2, item))
          continue;
        var j;
        for (j = 1; j < argsLength; j++) {
          if (!contains(arguments[j], item))
            break;
        }
        if (j === argsLength)
          result2.push(item);
      }
      return result2;
    }
    function unzip(array) {
      var length = array && max(array, getLength).length || 0;
      var result2 = Array(length);
      for (var index = 0; index < length; index++) {
        result2[index] = pluck(array, index);
      }
      return result2;
    }
    var zip = restArguments(unzip);
    function object(list, values2) {
      var result2 = {};
      for (var i = 0, length = getLength(list); i < length; i++) {
        if (values2) {
          result2[list[i]] = values2[i];
        } else {
          result2[list[i][0]] = list[i][1];
        }
      }
      return result2;
    }
    function range(start, stop, step) {
      if (stop == null) {
        stop = start || 0;
        start = 0;
      }
      if (!step) {
        step = stop < start ? -1 : 1;
      }
      var length = Math.max(Math.ceil((stop - start) / step), 0);
      var range2 = Array(length);
      for (var idx = 0; idx < length; idx++, start += step) {
        range2[idx] = start;
      }
      return range2;
    }
    function chunk(array, count) {
      if (count == null || count < 1)
        return [];
      var result2 = [];
      var i = 0, length = array.length;
      while (i < length) {
        result2.push(slice.call(array, i, i += count));
      }
      return result2;
    }
    function chainResult(instance, obj) {
      return instance._chain ? _$1(obj).chain() : obj;
    }
    function mixin(obj) {
      each(functions(obj), function(name) {
        var func = _$1[name] = obj[name];
        _$1.prototype[name] = function() {
          var args = [this._wrapped];
          push.apply(args, arguments);
          return chainResult(this, func.apply(_$1, args));
        };
      });
      return _$1;
    }
    each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name) {
      var method = ArrayProto[name];
      _$1.prototype[name] = function() {
        var obj = this._wrapped;
        if (obj != null) {
          method.apply(obj, arguments);
          if ((name === "shift" || name === "splice") && obj.length === 0) {
            delete obj[0];
          }
        }
        return chainResult(this, obj);
      };
    });
    each(["concat", "join", "slice"], function(name) {
      var method = ArrayProto[name];
      _$1.prototype[name] = function() {
        var obj = this._wrapped;
        if (obj != null)
          obj = method.apply(obj, arguments);
        return chainResult(this, obj);
      };
    });
    var allExports = {
      __proto__: null,
      VERSION,
      restArguments,
      isObject,
      isNull,
      isUndefined,
      isBoolean,
      isElement,
      isString,
      isNumber,
      isDate,
      isRegExp,
      isError,
      isSymbol,
      isArrayBuffer,
      isDataView: isDataView$1,
      isArray,
      isFunction: isFunction$1,
      isArguments: isArguments$1,
      isFinite: isFinite$1,
      isNaN: isNaN$1,
      isTypedArray: isTypedArray$1,
      isEmpty,
      isMatch,
      isEqual,
      isMap,
      isWeakMap,
      isSet,
      isWeakSet,
      keys,
      allKeys,
      values,
      pairs,
      invert,
      functions,
      methods: functions,
      extend,
      extendOwn,
      assign: extendOwn,
      defaults,
      create,
      clone,
      tap,
      get,
      has,
      mapObject,
      identity,
      constant,
      noop,
      toPath: toPath$1,
      property,
      propertyOf,
      matcher,
      matches: matcher,
      times,
      random,
      now,
      escape: _escape,
      unescape: _unescape,
      templateSettings,
      template,
      result,
      uniqueId,
      chain,
      iteratee,
      partial,
      bind,
      bindAll,
      memoize,
      delay,
      defer,
      throttle,
      debounce,
      wrap,
      negate,
      compose,
      after,
      before,
      once,
      findKey,
      findIndex,
      findLastIndex,
      sortedIndex,
      indexOf,
      lastIndexOf,
      find,
      detect: find,
      findWhere,
      each,
      forEach: each,
      map,
      collect: map,
      reduce,
      foldl: reduce,
      inject: reduce,
      reduceRight,
      foldr: reduceRight,
      filter,
      select: filter,
      reject,
      every,
      all: every,
      some,
      any: some,
      contains,
      includes: contains,
      include: contains,
      invoke,
      pluck,
      where: where2,
      max,
      min,
      shuffle,
      sample,
      sortBy,
      groupBy,
      indexBy,
      countBy,
      partition,
      toArray,
      size,
      pick,
      omit,
      first,
      head: first,
      take: first,
      initial,
      last,
      rest,
      tail: rest,
      drop: rest,
      compact,
      flatten,
      without,
      uniq,
      unique: uniq,
      union,
      intersection,
      difference,
      unzip,
      transpose: unzip,
      zip,
      object,
      range,
      chunk,
      mixin,
      "default": _$1
    };
    var _ = mixin(allExports);
    _._ = _;
    exports.VERSION = VERSION;
    exports._ = _;
    exports._escape = _escape;
    exports._unescape = _unescape;
    exports.after = after;
    exports.allKeys = allKeys;
    exports.before = before;
    exports.bind = bind;
    exports.bindAll = bindAll;
    exports.chain = chain;
    exports.chunk = chunk;
    exports.clone = clone;
    exports.compact = compact;
    exports.compose = compose;
    exports.constant = constant;
    exports.contains = contains;
    exports.countBy = countBy;
    exports.create = create;
    exports.debounce = debounce;
    exports.defaults = defaults;
    exports.defer = defer;
    exports.delay = delay;
    exports.difference = difference;
    exports.each = each;
    exports.every = every;
    exports.extend = extend;
    exports.extendOwn = extendOwn;
    exports.filter = filter;
    exports.find = find;
    exports.findIndex = findIndex;
    exports.findKey = findKey;
    exports.findLastIndex = findLastIndex;
    exports.findWhere = findWhere;
    exports.first = first;
    exports.flatten = flatten;
    exports.functions = functions;
    exports.get = get;
    exports.groupBy = groupBy;
    exports.has = has;
    exports.identity = identity;
    exports.indexBy = indexBy;
    exports.indexOf = indexOf;
    exports.initial = initial;
    exports.intersection = intersection;
    exports.invert = invert;
    exports.invoke = invoke;
    exports.isArguments = isArguments$1;
    exports.isArray = isArray;
    exports.isArrayBuffer = isArrayBuffer;
    exports.isBoolean = isBoolean;
    exports.isDataView = isDataView$1;
    exports.isDate = isDate;
    exports.isElement = isElement;
    exports.isEmpty = isEmpty;
    exports.isEqual = isEqual;
    exports.isError = isError;
    exports.isFinite = isFinite$1;
    exports.isFunction = isFunction$1;
    exports.isMap = isMap;
    exports.isMatch = isMatch;
    exports.isNaN = isNaN$1;
    exports.isNull = isNull;
    exports.isNumber = isNumber;
    exports.isObject = isObject;
    exports.isRegExp = isRegExp;
    exports.isSet = isSet;
    exports.isString = isString;
    exports.isSymbol = isSymbol;
    exports.isTypedArray = isTypedArray$1;
    exports.isUndefined = isUndefined;
    exports.isWeakMap = isWeakMap;
    exports.isWeakSet = isWeakSet;
    exports.iteratee = iteratee;
    exports.keys = keys;
    exports.last = last;
    exports.lastIndexOf = lastIndexOf;
    exports.map = map;
    exports.mapObject = mapObject;
    exports.matcher = matcher;
    exports.max = max;
    exports.memoize = memoize;
    exports.min = min;
    exports.mixin = mixin;
    exports.negate = negate;
    exports.noop = noop;
    exports.now = now;
    exports.object = object;
    exports.omit = omit;
    exports.once = once;
    exports.pairs = pairs;
    exports.partial = partial;
    exports.partition = partition;
    exports.pick = pick;
    exports.pluck = pluck;
    exports.property = property;
    exports.propertyOf = propertyOf;
    exports.random = random;
    exports.range = range;
    exports.reduce = reduce;
    exports.reduceRight = reduceRight;
    exports.reject = reject;
    exports.rest = rest;
    exports.restArguments = restArguments;
    exports.result = result;
    exports.sample = sample;
    exports.shuffle = shuffle;
    exports.size = size;
    exports.some = some;
    exports.sortBy = sortBy;
    exports.sortedIndex = sortedIndex;
    exports.tap = tap;
    exports.template = template;
    exports.templateSettings = templateSettings;
    exports.throttle = throttle;
    exports.times = times;
    exports.toArray = toArray;
    exports.toPath = toPath$1;
    exports.union = union;
    exports.uniq = uniq;
    exports.uniqueId = uniqueId;
    exports.unzip = unzip;
    exports.values = values;
    exports.where = where2;
    exports.without = without;
    exports.wrap = wrap;
    exports.zip = zip;
  }
});

// node_modules/underscore/underscore-node.cjs
var require_underscore_node = __commonJS({
  "node_modules/underscore/underscore-node.cjs"(exports, module) {
    var underscoreNodeF = require_underscore_node_f();
    module.exports = underscoreNodeF._;
  }
});

// node_modules/pg-hstore/lib/index.js
var require_lib = __commonJS({
  "node_modules/pg-hstore/lib/index.js"(exports, module) {
    (function() {
      var _ = require_underscore_node();
      function sanitize_input(input) {
        input = input.replace(/'/g, "''");
        input = input.replace(/\\/g, "\\\\");
        input = input.replace(/"/g, '\\"');
        return input;
      }
      function to_string(input, sanitize) {
        switch (typeof input) {
          case "boolean":
          case "number":
          case "object":
            return String(input);
          case "string":
            return sanitize ? sanitize_input(input) : input;
          default:
            return "";
        }
      }
      module.exports = function(options) {
        options = _.defaults({}, options, { sanitize: false });
        return {
          stringify: function(data, callback) {
            var hstore = Object.keys(data).map(function(key) {
              if (data[key] === null) {
                return '"' + to_string(key, options.sanitize) + '"=>NULL';
              } else {
                return '"' + to_string(key, options.sanitize) + '"=>"' + to_string(data[key], options.sanitize) + '"';
              }
            });
            var joined = hstore.join();
            if (!callback || callback === null)
              return joined;
            callback(joined);
          },
          parse: function(string, callback) {
            var result = {}, r = /(["])(?:\\\1|\\\\|[\s\S])*?\1|NULL/g, matches = string.match(r), i, l, clean = function(value2) {
              value2 = value2.replace(/^\"|\"$/g, "");
              value2 = value2.replace(/\\"/g, '"');
              value2 = value2.replace(/\\\\/g, "\\");
              value2 = value2.replace(/''/g, "'");
              return value2;
            };
            if (matches) {
              for (i = 0, l = matches.length; i < l; i += 2) {
                if (matches[i] && matches[i + 1]) {
                  var key = clean(matches[i]);
                  var value = matches[i + 1];
                  result[key] = value == "NULL" ? null : clean(value);
                }
              }
            }
            if (!callback || callback === null)
              return result;
            callback(result);
          }
        };
      };
    })();
  }
});

// node_modules/sequelize/lib/dialects/postgres/hstore.js
var require_hstore = __commonJS({
  "node_modules/sequelize/lib/dialects/postgres/hstore.js"(exports) {
    "use strict";
    var hstore = require_lib()({ sanitize: true });
    function stringify(data) {
      if (data === null)
        return null;
      return hstore.stringify(data);
    }
    exports.stringify = stringify;
    function parse(value) {
      if (value === null)
        return null;
      return hstore.parse(value);
    }
    exports.parse = parse;
  }
});

// node_modules/sequelize/lib/dialects/postgres/range.js
var require_range = __commonJS({
  "node_modules/sequelize/lib/dialects/postgres/range.js"(exports) {
    "use strict";
    var _ = require_lodash();
    function stringifyRangeBound(bound) {
      if (bound === null) {
        return "";
      }
      if (bound === Infinity || bound === -Infinity) {
        return bound.toString().toLowerCase();
      }
      return JSON.stringify(bound);
    }
    function parseRangeBound(bound, parseType) {
      if (!bound) {
        return null;
      }
      if (bound === "infinity") {
        return Infinity;
      }
      if (bound === "-infinity") {
        return -Infinity;
      }
      return parseType(bound);
    }
    function stringify(data) {
      if (data === null)
        return null;
      if (!Array.isArray(data))
        throw new Error("range must be an array");
      if (!data.length)
        return "empty";
      if (data.length !== 2)
        throw new Error("range array length must be 0 (empty) or 2 (lower and upper bounds)");
      if (Object.prototype.hasOwnProperty.call(data, "inclusive")) {
        if (data.inclusive === false)
          data.inclusive = [false, false];
        else if (!data.inclusive)
          data.inclusive = [true, false];
        else if (data.inclusive === true)
          data.inclusive = [true, true];
      } else {
        data.inclusive = [true, false];
      }
      _.each(data, (value, index) => {
        if (_.isObject(value)) {
          if (Object.prototype.hasOwnProperty.call(value, "inclusive"))
            data.inclusive[index] = !!value.inclusive;
          if (Object.prototype.hasOwnProperty.call(value, "value"))
            data[index] = value.value;
        }
      });
      const lowerBound = stringifyRangeBound(data[0]);
      const upperBound = stringifyRangeBound(data[1]);
      return `${(data.inclusive[0] ? "[" : "(") + lowerBound},${upperBound}${data.inclusive[1] ? "]" : ")"}`;
    }
    exports.stringify = stringify;
    function parse(value, parser) {
      if (value === null)
        return null;
      if (value === "empty") {
        return [];
      }
      let result = value.substring(1, value.length - 1).split(",", 2);
      if (result.length !== 2)
        return value;
      result = result.map((item, index) => {
        return {
          value: parseRangeBound(item, parser),
          inclusive: index === 0 ? value[0] === "[" : value[value.length - 1] === "]"
        };
      });
      return result;
    }
    exports.parse = parse;
  }
});

// node_modules/sequelize/lib/dialects/postgres/data-types.js
var require_data_types = __commonJS({
  "node_modules/sequelize/lib/dialects/postgres/data-types.js"(exports, module) {
    "use strict";
    var _ = require_lodash();
    var wkx = require_wkx();
    module.exports = (BaseTypes) => {
      const warn = BaseTypes.ABSTRACT.warn.bind(void 0, "http://www.postgresql.org/docs/9.4/static/datatype.html");
      function removeUnsupportedIntegerOptions(dataType) {
        if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {
          warn(`PostgresSQL does not support '${dataType.key}' with LENGTH, UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);
          dataType._length = void 0;
          dataType.options.length = void 0;
          dataType._unsigned = void 0;
          dataType._zerofill = void 0;
        }
      }
      BaseTypes.UUID.types.postgres = ["uuid"];
      BaseTypes.CIDR.types.postgres = ["cidr"];
      BaseTypes.INET.types.postgres = ["inet"];
      BaseTypes.MACADDR.types.postgres = ["macaddr"];
      BaseTypes.TSVECTOR.types.postgres = ["tsvector"];
      BaseTypes.JSON.types.postgres = ["json"];
      BaseTypes.JSONB.types.postgres = ["jsonb"];
      BaseTypes.TIME.types.postgres = ["time"];
      class DATEONLY2 extends BaseTypes.DATEONLY {
        _stringify(value, options) {
          if (value === Infinity) {
            return "Infinity";
          }
          if (value === -Infinity) {
            return "-Infinity";
          }
          return super._stringify(value, options);
        }
        _sanitize(value, options) {
          if ((!options || options && !options.raw) && value !== Infinity && value !== -Infinity) {
            if (typeof value === "string") {
              const lower = value.toLowerCase();
              if (lower === "infinity") {
                return Infinity;
              }
              if (lower === "-infinity") {
                return -Infinity;
              }
            }
            return super._sanitize(value);
          }
          return value;
        }
        static parse(value) {
          if (value === "infinity") {
            return Infinity;
          }
          if (value === "-infinity") {
            return -Infinity;
          }
          return value;
        }
      }
      BaseTypes.DATEONLY.types.postgres = ["date"];
      class DECIMAL2 extends BaseTypes.DECIMAL {
        static parse(value) {
          return value;
        }
      }
      BaseTypes.DECIMAL.types.postgres = ["numeric"];
      class STRING2 extends BaseTypes.STRING {
        toSql() {
          if (this._binary) {
            return "BYTEA";
          }
          return super.toSql();
        }
      }
      BaseTypes.STRING.types.postgres = ["varchar"];
      class TEXT2 extends BaseTypes.TEXT {
        toSql() {
          if (this._length) {
            warn("PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.");
            this._length = void 0;
          }
          return "TEXT";
        }
      }
      BaseTypes.TEXT.types.postgres = ["text"];
      class CITEXT2 extends BaseTypes.CITEXT {
        static parse(value) {
          return value;
        }
      }
      BaseTypes.CITEXT.types.postgres = ["citext"];
      class CHAR2 extends BaseTypes.CHAR {
        toSql() {
          if (this._binary) {
            return "BYTEA";
          }
          return super.toSql();
        }
      }
      BaseTypes.CHAR.types.postgres = ["char", "bpchar"];
      class BOOLEAN2 extends BaseTypes.BOOLEAN {
        toSql() {
          return "BOOLEAN";
        }
        _sanitize(value) {
          if (value !== null && value !== void 0) {
            if (Buffer.isBuffer(value) && value.length === 1) {
              value = value[0];
            }
            if (typeof value === "string") {
              return ["true", "t"].includes(value) ? true : ["false", "f"].includes(value) ? false : value;
            }
            if (typeof value === "number") {
              return value === 1 ? true : value === 0 ? false : value;
            }
          }
          return value;
        }
      }
      BOOLEAN2.parse = BOOLEAN2.prototype._sanitize;
      BaseTypes.BOOLEAN.types.postgres = ["bool"];
      class DATE2 extends BaseTypes.DATE {
        toSql() {
          return "TIMESTAMP WITH TIME ZONE";
        }
        validate(value) {
          if (value !== Infinity && value !== -Infinity) {
            return super.validate(value);
          }
          return true;
        }
        _stringify(value, options) {
          if (value === Infinity) {
            return "Infinity";
          }
          if (value === -Infinity) {
            return "-Infinity";
          }
          return super._stringify(value, options);
        }
        _sanitize(value, options) {
          if ((!options || options && !options.raw) && !(value instanceof Date) && !!value && value !== Infinity && value !== -Infinity) {
            if (typeof value === "string") {
              const lower = value.toLowerCase();
              if (lower === "infinity") {
                return Infinity;
              }
              if (lower === "-infinity") {
                return -Infinity;
              }
            }
            return new Date(value);
          }
          return value;
        }
      }
      BaseTypes.DATE.types.postgres = ["timestamptz"];
      class TINYINT2 extends BaseTypes.TINYINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      BaseTypes.TINYINT.types.postgres = ["int2"];
      class SMALLINT2 extends BaseTypes.SMALLINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      BaseTypes.SMALLINT.types.postgres = ["int2"];
      class INTEGER2 extends BaseTypes.INTEGER {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      INTEGER2.parse = function parse(value) {
        return parseInt(value, 10);
      };
      BaseTypes.INTEGER.types.postgres = ["int4"];
      class BIGINT2 extends BaseTypes.BIGINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      BaseTypes.BIGINT.types.postgres = ["int8"];
      class REAL2 extends BaseTypes.REAL {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      BaseTypes.REAL.types.postgres = ["float4"];
      class DOUBLE2 extends BaseTypes.DOUBLE {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      BaseTypes.DOUBLE.types.postgres = ["float8"];
      class FLOAT2 extends BaseTypes.FLOAT {
        constructor(length, decimals) {
          super(length, decimals);
          if (this._decimals) {
            warn("PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.");
            this._length = void 0;
            this.options.length = void 0;
            this._decimals = void 0;
          }
          if (this._unsigned) {
            warn("PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.");
            this._unsigned = void 0;
          }
          if (this._zerofill) {
            warn("PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.");
            this._zerofill = void 0;
          }
        }
      }
      delete FLOAT2.parse;
      class BLOB2 extends BaseTypes.BLOB {
        toSql() {
          if (this._length) {
            warn("PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.");
            this._length = void 0;
          }
          return "BYTEA";
        }
        _hexify(hex) {
          return `E'\\\\x${hex}'`;
        }
      }
      BaseTypes.BLOB.types.postgres = ["bytea"];
      class GEOMETRY2 extends BaseTypes.GEOMETRY {
        toSql() {
          let result = this.key;
          if (this.type) {
            result += `(${this.type}`;
            if (this.srid) {
              result += `,${this.srid}`;
            }
            result += ")";
          }
          return result;
        }
        static parse(value) {
          const b = Buffer.from(value, "hex");
          return wkx.Geometry.parse(b).toGeoJSON({ shortCrs: true });
        }
        _stringify(value, options) {
          return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;
        }
        _bindParam(value, options) {
          return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;
        }
      }
      BaseTypes.GEOMETRY.types.postgres = ["geometry"];
      class GEOGRAPHY2 extends BaseTypes.GEOGRAPHY {
        toSql() {
          let result = "GEOGRAPHY";
          if (this.type) {
            result += `(${this.type}`;
            if (this.srid) {
              result += `,${this.srid}`;
            }
            result += ")";
          }
          return result;
        }
        static parse(value) {
          const b = Buffer.from(value, "hex");
          return wkx.Geometry.parse(b).toGeoJSON({ shortCrs: true });
        }
        _stringify(value, options) {
          return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;
        }
        bindParam(value, options) {
          return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;
        }
      }
      BaseTypes.GEOGRAPHY.types.postgres = ["geography"];
      let hstore;
      class HSTORE2 extends BaseTypes.HSTORE {
        constructor() {
          super();
          if (!hstore) {
            hstore = require_hstore();
          }
        }
        _value(value) {
          if (!hstore) {
            hstore = require_hstore();
          }
          return hstore.stringify(value);
        }
        _stringify(value) {
          return `'${this._value(value)}'`;
        }
        _bindParam(value, options) {
          return options.bindParam(this._value(value));
        }
        static parse(value) {
          if (!hstore) {
            hstore = require_hstore();
          }
          return hstore.parse(value);
        }
      }
      HSTORE2.prototype.escape = false;
      BaseTypes.HSTORE.types.postgres = ["hstore"];
      class RANGE2 extends BaseTypes.RANGE {
        _value(values, options) {
          if (!Array.isArray(values)) {
            return this.options.subtype.stringify(values, options);
          }
          const valueInclusivity = [true, false];
          const valuesStringified = values.map((value, index) => {
            if (_.isObject(value) && Object.prototype.hasOwnProperty.call(value, "value")) {
              if (Object.prototype.hasOwnProperty.call(value, "inclusive")) {
                valueInclusivity[index] = value.inclusive;
              }
              value = value.value;
            }
            if (value === null || value === -Infinity || value === Infinity) {
              return value;
            }
            if (this.options.subtype.stringify) {
              return this.options.subtype.stringify(value, options);
            }
            return options.escape(value);
          });
          valuesStringified.inclusive = valueInclusivity;
          return range.stringify(valuesStringified);
        }
        _stringify(values, options) {
          const value = this._value(values, options);
          if (!Array.isArray(values)) {
            return `'${value}'::${this.toCastType()}`;
          }
          return `'${value}'`;
        }
        _bindParam(values, options) {
          const value = this._value(values, options);
          if (!Array.isArray(values)) {
            return `${options.bindParam(value)}::${this.toCastType()}`;
          }
          return options.bindParam(value);
        }
        toSql() {
          return BaseTypes.RANGE.types.postgres.subtypes[this._subtype.toLowerCase()];
        }
        toCastType() {
          return BaseTypes.RANGE.types.postgres.castTypes[this._subtype.toLowerCase()];
        }
        static parse(value, options = { parser: (val) => val }) {
          return range.parse(value, options.parser);
        }
      }
      const range = require_range();
      RANGE2.prototype.escape = false;
      BaseTypes.RANGE.types.postgres = {
        subtypes: {
          integer: "int4range",
          decimal: "numrange",
          date: "tstzrange",
          dateonly: "daterange",
          bigint: "int8range"
        },
        castTypes: {
          integer: "int4",
          decimal: "numeric",
          date: "timestamptz",
          dateonly: "date",
          bigint: "int8"
        }
      };
      BaseTypes.ARRAY.prototype.escape = false;
      BaseTypes.ARRAY.prototype._value = function _value(values, options) {
        return values.map((value) => {
          if (options && options.bindParam && this.type && this.type._value) {
            return this.type._value(value, options);
          }
          if (this.type && this.type.stringify) {
            value = this.type.stringify(value, options);
            if (this.type.escape === false) {
              return value;
            }
          }
          return options.escape(value);
        }, this);
      };
      BaseTypes.ARRAY.prototype._stringify = function _stringify(values, options) {
        let str = `ARRAY[${this._value(values, options).join(",")}]`;
        if (this.type) {
          const Utils2 = require_utils();
          let castKey = this.toSql();
          if (this.type instanceof BaseTypes.ENUM) {
            const table = options.field.Model.getTableName();
            const useSchema = table.schema !== void 0;
            const schemaWithDelimiter = useSchema ? `${Utils2.addTicks(table.schema, '"')}${table.delimiter}` : "";
            castKey = `${Utils2.addTicks(Utils2.generateEnumName(useSchema ? table.tableName : table, options.field.field), '"')}[]`;
            str += `::${schemaWithDelimiter}${castKey}`;
          } else {
            str += `::${castKey}`;
          }
        }
        return str;
      };
      BaseTypes.ARRAY.prototype._bindParam = function _bindParam(values, options) {
        return options.bindParam(this._value(values, options));
      };
      class ENUM2 extends BaseTypes.ENUM {
        static parse(value) {
          return value;
        }
      }
      BaseTypes.ENUM.types.postgres = [null];
      return {
        DECIMAL: DECIMAL2,
        BLOB: BLOB2,
        STRING: STRING2,
        CHAR: CHAR2,
        TEXT: TEXT2,
        CITEXT: CITEXT2,
        TINYINT: TINYINT2,
        SMALLINT: SMALLINT2,
        INTEGER: INTEGER2,
        BIGINT: BIGINT2,
        BOOLEAN: BOOLEAN2,
        DATE: DATE2,
        DATEONLY: DATEONLY2,
        REAL: REAL2,
        "DOUBLE PRECISION": DOUBLE2,
        FLOAT: FLOAT2,
        GEOMETRY: GEOMETRY2,
        GEOGRAPHY: GEOGRAPHY2,
        HSTORE: HSTORE2,
        RANGE: RANGE2,
        ENUM: ENUM2
      };
    };
  }
});

// node_modules/sequelize/lib/dialects/mysql/data-types.js
var require_data_types2 = __commonJS({
  "node_modules/sequelize/lib/dialects/mysql/data-types.js"(exports, module) {
    "use strict";
    var wkx = require_wkx();
    var _ = require_lodash();
    var momentTz = require_moment_timezone2();
    var moment = require_moment();
    module.exports = (BaseTypes) => {
      BaseTypes.ABSTRACT.prototype.dialectTypes = "https://dev.mysql.com/doc/refman/5.7/en/data-types.html";
      BaseTypes.DATE.types.mysql = ["DATETIME"];
      BaseTypes.STRING.types.mysql = ["VAR_STRING"];
      BaseTypes.CHAR.types.mysql = ["STRING"];
      BaseTypes.TEXT.types.mysql = ["BLOB"];
      BaseTypes.TINYINT.types.mysql = ["TINY"];
      BaseTypes.SMALLINT.types.mysql = ["SHORT"];
      BaseTypes.MEDIUMINT.types.mysql = ["INT24"];
      BaseTypes.INTEGER.types.mysql = ["LONG"];
      BaseTypes.BIGINT.types.mysql = ["LONGLONG"];
      BaseTypes.FLOAT.types.mysql = ["FLOAT"];
      BaseTypes.TIME.types.mysql = ["TIME"];
      BaseTypes.DATEONLY.types.mysql = ["DATE"];
      BaseTypes.BOOLEAN.types.mysql = ["TINY"];
      BaseTypes.BLOB.types.mysql = ["TINYBLOB", "BLOB", "LONGBLOB"];
      BaseTypes.DECIMAL.types.mysql = ["NEWDECIMAL"];
      BaseTypes.UUID.types.mysql = false;
      BaseTypes.ENUM.types.mysql = false;
      BaseTypes.REAL.types.mysql = ["DOUBLE"];
      BaseTypes.DOUBLE.types.mysql = ["DOUBLE"];
      BaseTypes.GEOMETRY.types.mysql = ["GEOMETRY"];
      BaseTypes.JSON.types.mysql = ["JSON"];
      class DECIMAL2 extends BaseTypes.DECIMAL {
        toSql() {
          let definition = super.toSql();
          if (this._unsigned) {
            definition += " UNSIGNED";
          }
          if (this._zerofill) {
            definition += " ZEROFILL";
          }
          return definition;
        }
      }
      class DATE2 extends BaseTypes.DATE {
        toSql() {
          return this._length ? `DATETIME(${this._length})` : "DATETIME";
        }
        _stringify(date, options) {
          if (!moment.isMoment(date)) {
            date = this._applyTimezone(date, options);
          }
          if (this._length) {
            return date.format("YYYY-MM-DD HH:mm:ss.SSS");
          }
          return date.format("YYYY-MM-DD HH:mm:ss");
        }
        static parse(value, options) {
          value = value.string();
          if (value === null) {
            return value;
          }
          if (momentTz.tz.zone(options.timezone)) {
            value = momentTz.tz(value, options.timezone).toDate();
          } else {
            value = new Date(`${value} ${options.timezone}`);
          }
          return value;
        }
      }
      class DATEONLY2 extends BaseTypes.DATEONLY {
        static parse(value) {
          return value.string();
        }
      }
      class UUID2 extends BaseTypes.UUID {
        toSql() {
          return "CHAR(36) BINARY";
        }
      }
      const SUPPORTED_GEOMETRY_TYPES = ["POINT", "LINESTRING", "POLYGON"];
      class GEOMETRY2 extends BaseTypes.GEOMETRY {
        constructor(type, srid) {
          super(type, srid);
          if (_.isEmpty(this.type)) {
            this.sqlType = this.key;
            return;
          }
          if (SUPPORTED_GEOMETRY_TYPES.includes(this.type)) {
            this.sqlType = this.type;
            return;
          }
          throw new Error(`Supported geometry types are: ${SUPPORTED_GEOMETRY_TYPES.join(", ")}`);
        }
        static parse(value) {
          value = value.buffer();
          if (!value || value.length === 0) {
            return null;
          }
          value = value.slice(4);
          return wkx.Geometry.parse(value).toGeoJSON({ shortCrs: true });
        }
        toSql() {
          return this.sqlType;
        }
      }
      class ENUM2 extends BaseTypes.ENUM {
        toSql(options) {
          return `ENUM(${this.values.map((value) => options.escape(value)).join(", ")})`;
        }
      }
      class JSONTYPE extends BaseTypes.JSON {
        _stringify(value, options) {
          return options.operation === "where" && typeof value === "string" ? value : JSON.stringify(value);
        }
      }
      return {
        ENUM: ENUM2,
        DATE: DATE2,
        DATEONLY: DATEONLY2,
        UUID: UUID2,
        GEOMETRY: GEOMETRY2,
        DECIMAL: DECIMAL2,
        JSON: JSONTYPE
      };
    };
  }
});

// node_modules/sequelize/lib/dialects/mariadb/data-types.js
var require_data_types3 = __commonJS({
  "node_modules/sequelize/lib/dialects/mariadb/data-types.js"(exports, module) {
    "use strict";
    var wkx = require_wkx();
    var _ = require_lodash();
    var momentTz = require_moment_timezone2();
    var moment = require_moment();
    module.exports = (BaseTypes) => {
      BaseTypes.ABSTRACT.prototype.dialectTypes = "https://mariadb.com/kb/en/library/resultset/#field-types";
      BaseTypes.DATE.types.mariadb = ["DATETIME"];
      BaseTypes.STRING.types.mariadb = ["VAR_STRING"];
      BaseTypes.CHAR.types.mariadb = ["STRING"];
      BaseTypes.TEXT.types.mariadb = ["BLOB"];
      BaseTypes.TINYINT.types.mariadb = ["TINY"];
      BaseTypes.SMALLINT.types.mariadb = ["SHORT"];
      BaseTypes.MEDIUMINT.types.mariadb = ["INT24"];
      BaseTypes.INTEGER.types.mariadb = ["LONG"];
      BaseTypes.BIGINT.types.mariadb = ["LONGLONG"];
      BaseTypes.FLOAT.types.mariadb = ["FLOAT"];
      BaseTypes.TIME.types.mariadb = ["TIME"];
      BaseTypes.DATEONLY.types.mariadb = ["DATE"];
      BaseTypes.BOOLEAN.types.mariadb = ["TINY"];
      BaseTypes.BLOB.types.mariadb = ["TINYBLOB", "BLOB", "LONGBLOB"];
      BaseTypes.DECIMAL.types.mariadb = ["NEWDECIMAL"];
      BaseTypes.UUID.types.mariadb = false;
      BaseTypes.ENUM.types.mariadb = false;
      BaseTypes.REAL.types.mariadb = ["DOUBLE"];
      BaseTypes.DOUBLE.types.mariadb = ["DOUBLE"];
      BaseTypes.GEOMETRY.types.mariadb = ["GEOMETRY"];
      BaseTypes.JSON.types.mariadb = ["JSON"];
      class DECIMAL2 extends BaseTypes.DECIMAL {
        toSql() {
          let definition = super.toSql();
          if (this._unsigned) {
            definition += " UNSIGNED";
          }
          if (this._zerofill) {
            definition += " ZEROFILL";
          }
          return definition;
        }
      }
      class DATE2 extends BaseTypes.DATE {
        toSql() {
          return this._length ? `DATETIME(${this._length})` : "DATETIME";
        }
        _stringify(date, options) {
          if (!moment.isMoment(date)) {
            date = this._applyTimezone(date, options);
          }
          return date.format("YYYY-MM-DD HH:mm:ss.SSS");
        }
        static parse(value, options) {
          value = value.string();
          if (value === null) {
            return value;
          }
          if (momentTz.tz.zone(options.timezone)) {
            value = momentTz.tz(value, options.timezone).toDate();
          } else {
            value = new Date(`${value} ${options.timezone}`);
          }
          return value;
        }
      }
      class DATEONLY2 extends BaseTypes.DATEONLY {
        static parse(value) {
          return value.string();
        }
      }
      class UUID2 extends BaseTypes.UUID {
        toSql() {
          return "CHAR(36) BINARY";
        }
      }
      class GEOMETRY2 extends BaseTypes.GEOMETRY {
        constructor(type, srid) {
          super(type, srid);
          if (_.isEmpty(this.type)) {
            this.sqlType = this.key;
          } else {
            this.sqlType = this.type;
          }
        }
        static parse(value) {
          value = value.buffer();
          if (!value || value.length === 0) {
            return null;
          }
          value = value.slice(4);
          return wkx.Geometry.parse(value).toGeoJSON({ shortCrs: true });
        }
        toSql() {
          return this.sqlType;
        }
      }
      class ENUM2 extends BaseTypes.ENUM {
        toSql(options) {
          return `ENUM(${this.values.map((value) => options.escape(value)).join(", ")})`;
        }
      }
      class JSONTYPE extends BaseTypes.JSON {
        _stringify(value, options) {
          return options.operation === "where" && typeof value === "string" ? value : JSON.stringify(value);
        }
      }
      return {
        ENUM: ENUM2,
        DATE: DATE2,
        DATEONLY: DATEONLY2,
        UUID: UUID2,
        GEOMETRY: GEOMETRY2,
        DECIMAL: DECIMAL2,
        JSON: JSONTYPE
      };
    };
  }
});

// node_modules/sequelize/lib/dialects/sqlite/data-types.js
var require_data_types4 = __commonJS({
  "node_modules/sequelize/lib/dialects/sqlite/data-types.js"(exports, module) {
    "use strict";
    module.exports = (BaseTypes) => {
      const warn = BaseTypes.ABSTRACT.warn.bind(void 0, "https://www.sqlite.org/datatype3.html");
      function removeUnsupportedIntegerOptions(dataType) {
        if (dataType._zerofill || dataType._unsigned) {
          warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);
          dataType._unsigned = void 0;
          dataType._zerofill = void 0;
        }
      }
      BaseTypes.DATE.types.sqlite = ["DATETIME"];
      BaseTypes.STRING.types.sqlite = ["VARCHAR", "VARCHAR BINARY"];
      BaseTypes.CHAR.types.sqlite = ["CHAR", "CHAR BINARY"];
      BaseTypes.TEXT.types.sqlite = ["TEXT"];
      BaseTypes.TINYINT.types.sqlite = ["TINYINT"];
      BaseTypes.SMALLINT.types.sqlite = ["SMALLINT"];
      BaseTypes.MEDIUMINT.types.sqlite = ["MEDIUMINT"];
      BaseTypes.INTEGER.types.sqlite = ["INTEGER"];
      BaseTypes.BIGINT.types.sqlite = ["BIGINT"];
      BaseTypes.FLOAT.types.sqlite = ["FLOAT"];
      BaseTypes.TIME.types.sqlite = ["TIME"];
      BaseTypes.DATEONLY.types.sqlite = ["DATE"];
      BaseTypes.BOOLEAN.types.sqlite = ["TINYINT"];
      BaseTypes.BLOB.types.sqlite = ["TINYBLOB", "BLOB", "LONGBLOB"];
      BaseTypes.DECIMAL.types.sqlite = ["DECIMAL"];
      BaseTypes.UUID.types.sqlite = ["UUID"];
      BaseTypes.ENUM.types.sqlite = false;
      BaseTypes.REAL.types.sqlite = ["REAL"];
      BaseTypes.DOUBLE.types.sqlite = ["DOUBLE PRECISION"];
      BaseTypes.GEOMETRY.types.sqlite = false;
      BaseTypes.JSON.types.sqlite = ["JSON", "JSONB"];
      class JSONTYPE extends BaseTypes.JSON {
        static parse(data) {
          return JSON.parse(data);
        }
      }
      class DATE2 extends BaseTypes.DATE {
        static parse(date, options) {
          if (!date.includes("+")) {
            return new Date(date + options.timezone);
          }
          return new Date(date);
        }
      }
      class DATEONLY2 extends BaseTypes.DATEONLY {
        static parse(date) {
          return date;
        }
      }
      class STRING2 extends BaseTypes.STRING {
        toSql() {
          if (this._binary) {
            return `VARCHAR BINARY(${this._length})`;
          }
          return super.toSql(this);
        }
      }
      class TEXT2 extends BaseTypes.TEXT {
        toSql() {
          if (this._length) {
            warn("SQLite does not support TEXT with options. Plain `TEXT` will be used instead.");
            this._length = void 0;
          }
          return "TEXT";
        }
      }
      class CITEXT2 extends BaseTypes.CITEXT {
        toSql() {
          return "TEXT COLLATE NOCASE";
        }
      }
      class CHAR2 extends BaseTypes.CHAR {
        toSql() {
          if (this._binary) {
            return `CHAR BINARY(${this._length})`;
          }
          return super.toSql();
        }
      }
      class NUMBER2 extends BaseTypes.NUMBER {
        toSql() {
          let result = this.key;
          if (this._unsigned) {
            result += " UNSIGNED";
          }
          if (this._zerofill) {
            result += " ZEROFILL";
          }
          if (this._length) {
            result += `(${this._length}`;
            if (typeof this._decimals === "number") {
              result += `,${this._decimals}`;
            }
            result += ")";
          }
          return result;
        }
      }
      class TINYINT2 extends BaseTypes.TINYINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class SMALLINT2 extends BaseTypes.SMALLINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class MEDIUMINT2 extends BaseTypes.MEDIUMINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class INTEGER2 extends BaseTypes.INTEGER {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class BIGINT2 extends BaseTypes.BIGINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class FLOAT2 extends BaseTypes.FLOAT {
      }
      class DOUBLE2 extends BaseTypes.DOUBLE {
      }
      class REAL2 extends BaseTypes.REAL {
      }
      function parseFloating(value) {
        if (typeof value !== "string") {
          return value;
        }
        if (value === "NaN") {
          return NaN;
        }
        if (value === "Infinity") {
          return Infinity;
        }
        if (value === "-Infinity") {
          return -Infinity;
        }
      }
      for (const floating of [FLOAT2, DOUBLE2, REAL2]) {
        floating.parse = parseFloating;
      }
      for (const num of [FLOAT2, DOUBLE2, REAL2, TINYINT2, SMALLINT2, MEDIUMINT2, INTEGER2, BIGINT2]) {
        num.prototype.toSql = NUMBER2.prototype.toSql;
      }
      class ENUM2 extends BaseTypes.ENUM {
        toSql() {
          return "TEXT";
        }
      }
      return {
        DATE: DATE2,
        DATEONLY: DATEONLY2,
        STRING: STRING2,
        CHAR: CHAR2,
        NUMBER: NUMBER2,
        FLOAT: FLOAT2,
        REAL: REAL2,
        "DOUBLE PRECISION": DOUBLE2,
        TINYINT: TINYINT2,
        SMALLINT: SMALLINT2,
        MEDIUMINT: MEDIUMINT2,
        INTEGER: INTEGER2,
        BIGINT: BIGINT2,
        TEXT: TEXT2,
        ENUM: ENUM2,
        JSON: JSONTYPE,
        CITEXT: CITEXT2
      };
    };
  }
});

// node_modules/sequelize/lib/dialects/mssql/data-types.js
var require_data_types5 = __commonJS({
  "node_modules/sequelize/lib/dialects/mssql/data-types.js"(exports, module) {
    "use strict";
    var moment = require_moment();
    module.exports = (BaseTypes) => {
      const warn = BaseTypes.ABSTRACT.warn.bind(void 0, "https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx");
      function removeUnsupportedIntegerOptions(dataType) {
        if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {
          warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);
          dataType._length = void 0;
          dataType.options.length = void 0;
          dataType._unsigned = void 0;
          dataType._zerofill = void 0;
        }
      }
      BaseTypes.DATE.types.mssql = [43];
      BaseTypes.STRING.types.mssql = [231, 173];
      BaseTypes.CHAR.types.mssql = [175];
      BaseTypes.TEXT.types.mssql = false;
      BaseTypes.TINYINT.types.mssql = [30];
      BaseTypes.SMALLINT.types.mssql = [34];
      BaseTypes.MEDIUMINT.types.mssql = false;
      BaseTypes.INTEGER.types.mssql = [38];
      BaseTypes.BIGINT.types.mssql = false;
      BaseTypes.FLOAT.types.mssql = [109];
      BaseTypes.TIME.types.mssql = [41];
      BaseTypes.DATEONLY.types.mssql = [40];
      BaseTypes.BOOLEAN.types.mssql = [104];
      BaseTypes.BLOB.types.mssql = [165];
      BaseTypes.DECIMAL.types.mssql = [106];
      BaseTypes.UUID.types.mssql = false;
      BaseTypes.ENUM.types.mssql = false;
      BaseTypes.REAL.types.mssql = [109];
      BaseTypes.DOUBLE.types.mssql = [109];
      BaseTypes.GEOMETRY.types.mssql = false;
      class BLOB2 extends BaseTypes.BLOB {
        toSql() {
          if (this._length) {
            if (this._length.toLowerCase() === "tiny") {
              warn("MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.");
              return "VARBINARY(256)";
            }
            warn("MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.");
          }
          return "VARBINARY(MAX)";
        }
        _hexify(hex) {
          return `0x${hex}`;
        }
      }
      class STRING2 extends BaseTypes.STRING {
        toSql() {
          if (!this._binary) {
            return `NVARCHAR(${this._length})`;
          }
          return `BINARY(${this._length})`;
        }
        _stringify(value, options) {
          if (this._binary) {
            return BLOB2.prototype._stringify(value);
          }
          return options.escape(value);
        }
        _bindParam(value, options) {
          return options.bindParam(this._binary ? Buffer.from(value) : value);
        }
      }
      STRING2.prototype.escape = false;
      class TEXT2 extends BaseTypes.TEXT {
        toSql() {
          if (this._length) {
            if (this._length.toLowerCase() === "tiny") {
              warn("MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.");
              return "NVARCHAR(256)";
            }
            warn("MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.");
          }
          return "NVARCHAR(MAX)";
        }
      }
      class BOOLEAN2 extends BaseTypes.BOOLEAN {
        toSql() {
          return "BIT";
        }
      }
      class UUID2 extends BaseTypes.UUID {
        toSql() {
          return "CHAR(36)";
        }
      }
      class NOW2 extends BaseTypes.NOW {
        toSql() {
          return "GETDATE()";
        }
      }
      class DATE2 extends BaseTypes.DATE {
        toSql() {
          return "DATETIMEOFFSET";
        }
      }
      class DATEONLY2 extends BaseTypes.DATEONLY {
        static parse(value) {
          return moment(value).format("YYYY-MM-DD");
        }
      }
      class INTEGER2 extends BaseTypes.INTEGER {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class TINYINT2 extends BaseTypes.TINYINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class SMALLINT2 extends BaseTypes.SMALLINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class BIGINT2 extends BaseTypes.BIGINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class REAL2 extends BaseTypes.REAL {
        constructor(length, decimals) {
          super(length, decimals);
          if (this._length || this.options.length || this._unsigned || this._zerofill) {
            warn("MSSQL does not support REAL with options. Plain `REAL` will be used instead.");
            this._length = void 0;
            this.options.length = void 0;
            this._unsigned = void 0;
            this._zerofill = void 0;
          }
        }
      }
      class FLOAT2 extends BaseTypes.FLOAT {
        constructor(length, decimals) {
          super(length, decimals);
          if (this._decimals) {
            warn("MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.");
            this._length = void 0;
            this.options.length = void 0;
          }
          if (this._unsigned) {
            warn("MSSQL does not support Float unsigned. `UNSIGNED` was removed.");
            this._unsigned = void 0;
          }
          if (this._zerofill) {
            warn("MSSQL does not support Float zerofill. `ZEROFILL` was removed.");
            this._zerofill = void 0;
          }
        }
      }
      class ENUM2 extends BaseTypes.ENUM {
        toSql() {
          return "VARCHAR(255)";
        }
      }
      return {
        BLOB: BLOB2,
        BOOLEAN: BOOLEAN2,
        ENUM: ENUM2,
        STRING: STRING2,
        UUID: UUID2,
        DATE: DATE2,
        DATEONLY: DATEONLY2,
        NOW: NOW2,
        TINYINT: TINYINT2,
        SMALLINT: SMALLINT2,
        INTEGER: INTEGER2,
        BIGINT: BIGINT2,
        REAL: REAL2,
        FLOAT: FLOAT2,
        TEXT: TEXT2
      };
    };
  }
});

// node_modules/sequelize/lib/dialects/db2/data-types.js
var require_data_types6 = __commonJS({
  "node_modules/sequelize/lib/dialects/db2/data-types.js"(exports, module) {
    "use strict";
    var momentTz = require_moment_timezone2();
    var moment = require_moment();
    module.exports = (BaseTypes) => {
      const warn = BaseTypes.ABSTRACT.warn.bind(void 0, "https://www.ibm.com/support/knowledgecenter/SSEPGG_11.1.0/com.ibm.db2.luw.sql.ref.doc/doc/r0008478.html");
      function removeUnsupportedIntegerOptions(dataType) {
        if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {
          warn(`Db2 does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);
          dataType._length = void 0;
          dataType.options.length = void 0;
          dataType._unsigned = void 0;
          dataType._zerofill = void 0;
        }
      }
      BaseTypes.DATE.types.db2 = ["TIMESTAMP"];
      BaseTypes.STRING.types.db2 = ["VARCHAR"];
      BaseTypes.CHAR.types.db2 = ["CHAR"];
      BaseTypes.TEXT.types.db2 = ["VARCHAR", "CLOB"];
      BaseTypes.TINYINT.types.db2 = ["SMALLINT"];
      BaseTypes.SMALLINT.types.db2 = ["SMALLINT"];
      BaseTypes.MEDIUMINT.types.db2 = ["INTEGER"];
      BaseTypes.INTEGER.types.db2 = ["INTEGER"];
      BaseTypes.BIGINT.types.db2 = ["BIGINT"];
      BaseTypes.FLOAT.types.db2 = ["DOUBLE", "REAL", "FLOAT"];
      BaseTypes.TIME.types.db2 = ["TIME"];
      BaseTypes.DATEONLY.types.db2 = ["DATE"];
      BaseTypes.BOOLEAN.types.db2 = ["BOOLEAN", "BOOL", "SMALLINT", "BIT"];
      BaseTypes.BLOB.types.db2 = ["BLOB"];
      BaseTypes.DECIMAL.types.db2 = ["DECIMAL"];
      BaseTypes.UUID.types.db2 = ["CHAR () FOR BIT DATA"];
      BaseTypes.ENUM.types.db2 = ["VARCHAR"];
      BaseTypes.REAL.types.db2 = ["REAL"];
      BaseTypes.DOUBLE.types.db2 = ["DOUBLE"];
      BaseTypes.GEOMETRY.types.db2 = false;
      class BLOB2 extends BaseTypes.BLOB {
        toSql() {
          if (this._length) {
            if (this._length.toLowerCase() === "tiny") {
              return "BLOB(255)";
            }
            if (this._length.toLowerCase() === "medium") {
              return "BLOB(16M)";
            }
            if (this._length.toLowerCase() === "long") {
              return "BLOB(2G)";
            }
            return `BLOB(${this._length})`;
          }
          return "BLOB";
        }
        escape(blob) {
          return `BLOB('${blob.toString().replace(/'/g, "''")}')`;
        }
        _stringify(value) {
          if (Buffer.isBuffer(value)) {
            return `BLOB('${value.toString().replace(/'/g, "''")}')`;
          }
          if (Array.isArray(value)) {
            value = Buffer.from(value);
          } else {
            value = Buffer.from(value.toString());
          }
          const hex = value.toString("hex");
          return this._hexify(hex);
        }
        _hexify(hex) {
          return `x'${hex}'`;
        }
      }
      class STRING2 extends BaseTypes.STRING {
        toSql() {
          if (!this._binary) {
            if (this._length <= 4e3) {
              return `VARCHAR(${this._length})`;
            }
            return `CLOB(${this._length})`;
          }
          if (this._length < 255) {
            return `CHAR(${this._length}) FOR BIT DATA`;
          }
          if (this._length <= 4e3) {
            return `VARCHAR(${this._length}) FOR BIT DATA`;
          }
          return `BLOB(${this._length})`;
        }
        _stringify(value, options) {
          if (this._binary) {
            return BLOB2.prototype._hexify(value.toString("hex"));
          }
          return options.escape(value);
        }
        _bindParam(value, options) {
          return options.bindParam(this._binary ? Buffer.from(value) : value);
        }
      }
      STRING2.prototype.escape = false;
      class TEXT2 extends BaseTypes.TEXT {
        toSql() {
          let len = 0;
          if (this._length) {
            switch (this._length.toLowerCase()) {
              case "tiny":
                len = 256;
                break;
              case "medium":
                len = 8192;
                break;
              case "long":
                len = 65536;
                break;
            }
            if (isNaN(this._length)) {
              this._length = 32672;
            }
            if (len > 0) {
              this._length = len;
            }
          } else {
            this._length = 32672;
          }
          if (this._length > 32672) {
            len = `CLOB(${this._length})`;
          } else {
            len = `VARCHAR(${this._length})`;
          }
          warn(`Db2 does not support TEXT datatype. ${len} will be used instead.`);
          return len;
        }
      }
      class BOOLEAN2 extends BaseTypes.BOOLEAN {
        toSql() {
          return "BOOLEAN";
        }
        _sanitize(value) {
          if (value !== null && value !== void 0) {
            if (Buffer.isBuffer(value) && value.length === 1) {
              value = value[0];
            }
            if (typeof value === "string") {
              value = value === "true" ? true : value === "false" ? false : value;
              value = value === "" ? true : value === "\0" ? false : value;
            } else if (typeof value === "number") {
              value = value === 1 ? true : value === 0 ? false : value;
            }
          }
          return value;
        }
      }
      BOOLEAN2.parse = BOOLEAN2.prototype._sanitize;
      class UUID2 extends BaseTypes.UUID {
        toSql() {
          return "CHAR(36) FOR BIT DATA";
        }
      }
      class NOW2 extends BaseTypes.NOW {
        toSql() {
          return "CURRENT TIME";
        }
      }
      class DATE2 extends BaseTypes.DATE {
        toSql() {
          if (this._length < 0) {
            this._length = 0;
          }
          if (this._length > 6) {
            this._length = 6;
          }
          return `TIMESTAMP${this._length ? `(${this._length})` : ""}`;
        }
        _stringify(date, options) {
          if (!moment.isMoment(date)) {
            date = this._applyTimezone(date, options);
          }
          if (this._length > 0) {
            let msec = ".";
            for (let i = 0; i < this._length && i < 6; i++) {
              msec += "S";
            }
            return date.format(`YYYY-MM-DD HH:mm:ss${msec}`);
          }
          return date.format("YYYY-MM-DD HH:mm:ss");
        }
        static parse(value) {
          if (typeof value !== "string") {
            value = value.string();
          }
          if (value === null) {
            return value;
          }
          value = new Date(momentTz.utc(value));
          return value;
        }
      }
      class DATEONLY2 extends BaseTypes.DATEONLY {
        static parse(value) {
          return momentTz(value).format("YYYY-MM-DD");
        }
      }
      class INTEGER2 extends BaseTypes.INTEGER {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class TINYINT2 extends BaseTypes.TINYINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class SMALLINT2 extends BaseTypes.SMALLINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class BIGINT2 extends BaseTypes.BIGINT {
        constructor(length) {
          super(length);
          removeUnsupportedIntegerOptions(this);
        }
      }
      class REAL2 extends BaseTypes.REAL {
        constructor(length, decimals) {
          super(length, decimals);
          if (this._length || this.options.length || this._unsigned || this._zerofill) {
            warn("Db2 does not support REAL with options. Plain `REAL` will be used instead.");
            this._length = void 0;
            this.options.length = void 0;
            this._unsigned = void 0;
            this._zerofill = void 0;
          }
        }
      }
      class FLOAT2 extends BaseTypes.FLOAT {
        constructor(length, decimals) {
          super(length, decimals);
          if (this._decimals) {
            warn("Db2 does not support Float with decimals. Plain `FLOAT` will be used instead.");
            this._length = void 0;
            this.options.length = void 0;
          }
          if (this._unsigned) {
            warn("Db2 does not support Float unsigned. `UNSIGNED` was removed.");
            this._unsigned = void 0;
          }
          if (this._zerofill) {
            warn("Db2 does not support Float zerofill. `ZEROFILL` was removed.");
            this._zerofill = void 0;
          }
        }
      }
      class ENUM2 extends BaseTypes.ENUM {
        toSql() {
          return "VARCHAR(255)";
        }
      }
      class DOUBLE2 extends BaseTypes.DOUBLE {
        constructor(length, decimals) {
          super(length, decimals);
          if (this._length || this.options.length || this._unsigned || this._zerofill) {
            warn("db2 does not support DOUBLE with options. Plain DOUBLE will be used instead.");
            this._length = void 0;
            this.options.length = void 0;
            this._unsigned = void 0;
            this._zerofill = void 0;
          }
        }
        toSql() {
          return "DOUBLE";
        }
      }
      DOUBLE2.prototype.key = DOUBLE2.key = "DOUBLE";
      return {
        BLOB: BLOB2,
        BOOLEAN: BOOLEAN2,
        ENUM: ENUM2,
        STRING: STRING2,
        UUID: UUID2,
        DATE: DATE2,
        DATEONLY: DATEONLY2,
        NOW: NOW2,
        TINYINT: TINYINT2,
        SMALLINT: SMALLINT2,
        INTEGER: INTEGER2,
        DOUBLE: DOUBLE2,
        "DOUBLE PRECISION": DOUBLE2,
        BIGINT: BIGINT2,
        REAL: REAL2,
        FLOAT: FLOAT2,
        TEXT: TEXT2
      };
    };
  }
});

// node_modules/sequelize/lib/dialects/snowflake/data-types.js
var require_data_types7 = __commonJS({
  "node_modules/sequelize/lib/dialects/snowflake/data-types.js"(exports, module) {
    "use strict";
    var momentTz = require_moment_timezone2();
    var moment = require_moment();
    module.exports = (BaseTypes) => {
      BaseTypes.ABSTRACT.prototype.dialectTypes = "https://dev.snowflake.com/doc/refman/5.7/en/data-types.html";
      BaseTypes.DATE.types.snowflake = ["DATETIME"];
      BaseTypes.STRING.types.snowflake = ["VAR_STRING"];
      BaseTypes.CHAR.types.snowflake = ["STRING"];
      BaseTypes.TEXT.types.snowflake = ["BLOB"];
      BaseTypes.TINYINT.types.snowflake = ["TINY"];
      BaseTypes.SMALLINT.types.snowflake = ["SHORT"];
      BaseTypes.MEDIUMINT.types.snowflake = ["INT24"];
      BaseTypes.INTEGER.types.snowflake = ["LONG"];
      BaseTypes.BIGINT.types.snowflake = ["LONGLONG"];
      BaseTypes.FLOAT.types.snowflake = ["FLOAT"];
      BaseTypes.TIME.types.snowflake = ["TIME"];
      BaseTypes.DATEONLY.types.snowflake = ["DATE"];
      BaseTypes.BOOLEAN.types.snowflake = ["TINY"];
      BaseTypes.BLOB.types.snowflake = ["TINYBLOB", "BLOB", "LONGBLOB"];
      BaseTypes.DECIMAL.types.snowflake = ["NEWDECIMAL"];
      BaseTypes.UUID.types.snowflake = false;
      BaseTypes.ENUM.types.snowflake = false;
      BaseTypes.REAL.types.snowflake = ["DOUBLE"];
      BaseTypes.DOUBLE.types.snowflake = ["DOUBLE"];
      BaseTypes.GEOMETRY.types.snowflake = ["GEOMETRY"];
      BaseTypes.JSON.types.snowflake = ["JSON"];
      class DATE2 extends BaseTypes.DATE {
        toSql() {
          return "TIMESTAMP";
        }
        _stringify(date, options) {
          if (!moment.isMoment(date)) {
            date = this._applyTimezone(date, options);
          }
          if (this._length) {
            return date.format("YYYY-MM-DD HH:mm:ss.SSS");
          }
          return date.format("YYYY-MM-DD HH:mm:ss");
        }
        static parse(value, options) {
          value = value.string();
          if (value === null) {
            return value;
          }
          if (momentTz.tz.zone(options.timezone)) {
            value = momentTz.tz(value, options.timezone).toDate();
          } else {
            value = new Date(`${value} ${options.timezone}`);
          }
          return value;
        }
      }
      class DATEONLY2 extends BaseTypes.DATEONLY {
        static parse(value) {
          return value.string();
        }
      }
      class UUID2 extends BaseTypes.UUID {
        toSql() {
          return "VARCHAR(36)";
        }
      }
      class TEXT2 extends BaseTypes.TEXT {
        toSql() {
          return "TEXT";
        }
      }
      class BOOLEAN2 extends BaseTypes.BOOLEAN {
        toSql() {
          return "BOOLEAN";
        }
      }
      class JSONTYPE extends BaseTypes.JSON {
        _stringify(value, options) {
          return options.operation === "where" && typeof value === "string" ? value : JSON.stringify(value);
        }
      }
      return {
        TEXT: TEXT2,
        DATE: DATE2,
        BOOLEAN: BOOLEAN2,
        DATEONLY: DATEONLY2,
        UUID: UUID2,
        JSON: JSONTYPE
      };
    };
  }
});

// node_modules/sequelize/lib/data-types.js
var require_data_types8 = __commonJS({
  "node_modules/sequelize/lib/data-types.js"(exports, module) {
    "use strict";
    var util = __require("util");
    var _ = require_lodash();
    var wkx = require_wkx();
    var sequelizeErrors = require_errors();
    var Validator2 = require_validator_extras().validator;
    var momentTz = require_moment_timezone2();
    var moment = require_moment();
    var { logger } = require_logger();
    var warnings = {};
    var { classToInvokable } = require_class_to_invokable();
    var { joinSQLFragments } = require_join_sql_fragments();
    var ABSTRACT2 = class {
      toString(options) {
        return this.toSql(options);
      }
      toSql() {
        return this.key;
      }
      stringify(value, options) {
        if (this._stringify) {
          return this._stringify(value, options);
        }
        return value;
      }
      bindParam(value, options) {
        if (this._bindParam) {
          return this._bindParam(value, options);
        }
        return options.bindParam(this.stringify(value, options));
      }
      static toString() {
        return this.name;
      }
      static warn(link, text) {
        if (!warnings[text]) {
          warnings[text] = true;
          logger.warn(`${text} 
>> Check: ${link}`);
        }
      }
      static extend(oldType) {
        return new this(oldType.options);
      }
    };
    ABSTRACT2.prototype.dialectTypes = "";
    var STRING2 = class extends ABSTRACT2 {
      constructor(length, binary) {
        super();
        const options = typeof length === "object" && length || { length, binary };
        this.options = options;
        this._binary = options.binary;
        this._length = options.length || 255;
      }
      toSql() {
        return joinSQLFragments([
          `VARCHAR(${this._length})`,
          this._binary && "BINARY"
        ]);
      }
      validate(value) {
        if (Object.prototype.toString.call(value) !== "[object String]") {
          if (this.options.binary && Buffer.isBuffer(value) || typeof value === "number") {
            return true;
          }
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid string", value));
        }
        return true;
      }
      get BINARY() {
        this._binary = true;
        this.options.binary = true;
        return this;
      }
      static get BINARY() {
        return new this().BINARY;
      }
    };
    var CHAR2 = class extends STRING2 {
      constructor(length, binary) {
        super(typeof length === "object" && length || { length, binary });
      }
      toSql() {
        return joinSQLFragments([
          `CHAR(${this._length})`,
          this._binary && "BINARY"
        ]);
      }
    };
    var TEXT2 = class extends ABSTRACT2 {
      constructor(length) {
        super();
        const options = typeof length === "object" && length || { length };
        this.options = options;
        this._length = options.length || "";
      }
      toSql() {
        switch (this._length.toLowerCase()) {
          case "tiny":
            return "TINYTEXT";
          case "medium":
            return "MEDIUMTEXT";
          case "long":
            return "LONGTEXT";
          default:
            return this.key;
        }
      }
      validate(value) {
        if (typeof value !== "string") {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid string", value));
        }
        return true;
      }
    };
    var CITEXT2 = class extends ABSTRACT2 {
      toSql() {
        return "CITEXT";
      }
      validate(value) {
        if (typeof value !== "string") {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid string", value));
        }
        return true;
      }
    };
    var NUMBER2 = class extends ABSTRACT2 {
      constructor(options = {}) {
        super();
        if (typeof options === "number") {
          options = {
            length: options
          };
        }
        this.options = options;
        this._length = options.length;
        this._zerofill = options.zerofill;
        this._decimals = options.decimals;
        this._precision = options.precision;
        this._scale = options.scale;
        this._unsigned = options.unsigned;
      }
      toSql() {
        let result = this.key;
        if (this._length) {
          result += `(${this._length}`;
          if (typeof this._decimals === "number") {
            result += `,${this._decimals}`;
          }
          result += ")";
        }
        if (this._unsigned) {
          result += " UNSIGNED";
        }
        if (this._zerofill) {
          result += " ZEROFILL";
        }
        return result;
      }
      validate(value) {
        if (!Validator2.isFloat(String(value))) {
          throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));
        }
        return true;
      }
      _stringify(number) {
        if (typeof number === "number" || typeof number === "boolean" || number === null || number === void 0) {
          return number;
        }
        if (typeof number.toString === "function") {
          return number.toString();
        }
        return number;
      }
      get UNSIGNED() {
        this._unsigned = true;
        this.options.unsigned = true;
        return this;
      }
      get ZEROFILL() {
        this._zerofill = true;
        this.options.zerofill = true;
        return this;
      }
      static get UNSIGNED() {
        return new this().UNSIGNED;
      }
      static get ZEROFILL() {
        return new this().ZEROFILL;
      }
    };
    var INTEGER2 = class extends NUMBER2 {
      validate(value) {
        if (!Validator2.isInt(String(value))) {
          throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));
        }
        return true;
      }
    };
    var TINYINT2 = class extends INTEGER2 {
    };
    var SMALLINT2 = class extends INTEGER2 {
    };
    var MEDIUMINT2 = class extends INTEGER2 {
    };
    var BIGINT2 = class extends INTEGER2 {
    };
    var FLOAT2 = class extends NUMBER2 {
      constructor(length, decimals) {
        super(typeof length === "object" && length || { length, decimals });
      }
      validate(value) {
        if (!Validator2.isFloat(String(value))) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid float", value));
        }
        return true;
      }
    };
    var REAL2 = class extends NUMBER2 {
      constructor(length, decimals) {
        super(typeof length === "object" && length || { length, decimals });
      }
    };
    var DOUBLE2 = class extends NUMBER2 {
      constructor(length, decimals) {
        super(typeof length === "object" && length || { length, decimals });
      }
    };
    var DECIMAL2 = class extends NUMBER2 {
      constructor(precision, scale) {
        super(typeof precision === "object" && precision || { precision, scale });
      }
      toSql() {
        if (this._precision || this._scale) {
          return `DECIMAL(${[this._precision, this._scale].filter(_.identity).join(",")})`;
        }
        return "DECIMAL";
      }
      validate(value) {
        if (!Validator2.isDecimal(String(value))) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid decimal", value));
        }
        return true;
      }
    };
    var protoExtensions = {
      escape: false,
      _value(value) {
        if (isNaN(value)) {
          return "NaN";
        }
        if (!isFinite(value)) {
          const sign = value < 0 ? "-" : "";
          return `${sign}Infinity`;
        }
        return value;
      },
      _stringify(value) {
        return `'${this._value(value)}'`;
      },
      _bindParam(value, options) {
        return options.bindParam(this._value(value));
      }
    };
    for (const floating of [FLOAT2, DOUBLE2, REAL2]) {
      Object.assign(floating.prototype, protoExtensions);
    }
    var BOOLEAN2 = class extends ABSTRACT2 {
      toSql() {
        return "TINYINT(1)";
      }
      validate(value) {
        if (!Validator2.isBoolean(String(value))) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid boolean", value));
        }
        return true;
      }
      _sanitize(value) {
        if (value !== null && value !== void 0) {
          if (Buffer.isBuffer(value) && value.length === 1) {
            value = value[0];
          }
          const type = typeof value;
          if (type === "string") {
            return value === "true" ? true : value === "false" ? false : value;
          }
          if (type === "number") {
            return value === 1 ? true : value === 0 ? false : value;
          }
        }
        return value;
      }
    };
    BOOLEAN2.parse = BOOLEAN2.prototype._sanitize;
    var TIME2 = class extends ABSTRACT2 {
      toSql() {
        return "TIME";
      }
    };
    var DATE2 = class extends ABSTRACT2 {
      constructor(length) {
        super();
        const options = typeof length === "object" && length || { length };
        this.options = options;
        this._length = options.length || "";
      }
      toSql() {
        return "DATETIME";
      }
      validate(value) {
        if (!Validator2.isDate(String(value))) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid date", value));
        }
        return true;
      }
      _sanitize(value, options) {
        if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {
          return new Date(value);
        }
        return value;
      }
      _isChanged(value, originalValue) {
        if (originalValue && !!value && (value === originalValue || value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {
          return false;
        }
        if (!originalValue && !value && originalValue === value) {
          return false;
        }
        return true;
      }
      _applyTimezone(date, options) {
        if (options.timezone) {
          if (momentTz.tz.zone(options.timezone)) {
            return momentTz(date).tz(options.timezone);
          }
          return date = moment(date).utcOffset(options.timezone);
        }
        return momentTz(date);
      }
      _stringify(date, options) {
        if (!moment.isMoment(date)) {
          date = this._applyTimezone(date, options);
        }
        return date.format("YYYY-MM-DD HH:mm:ss.SSS Z");
      }
    };
    var DATEONLY2 = class extends ABSTRACT2 {
      toSql() {
        return "DATE";
      }
      _stringify(date) {
        return moment(date).format("YYYY-MM-DD");
      }
      _sanitize(value, options) {
        if ((!options || options && !options.raw) && !!value) {
          return moment(value).format("YYYY-MM-DD");
        }
        return value;
      }
      _isChanged(value, originalValue) {
        if (originalValue && !!value && originalValue === value) {
          return false;
        }
        if (!originalValue && !value && originalValue === value) {
          return false;
        }
        return true;
      }
    };
    var HSTORE2 = class extends ABSTRACT2 {
      validate(value) {
        if (!_.isPlainObject(value)) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid hstore", value));
        }
        return true;
      }
    };
    var JSONTYPE = class extends ABSTRACT2 {
      validate() {
        return true;
      }
      _stringify(value) {
        return JSON.stringify(value);
      }
    };
    var JSONB2 = class extends JSONTYPE {
    };
    var NOW2 = class extends ABSTRACT2 {
    };
    var BLOB2 = class extends ABSTRACT2 {
      constructor(length) {
        super();
        const options = typeof length === "object" && length || { length };
        this.options = options;
        this._length = options.length || "";
      }
      toSql() {
        switch (this._length.toLowerCase()) {
          case "tiny":
            return "TINYBLOB";
          case "medium":
            return "MEDIUMBLOB";
          case "long":
            return "LONGBLOB";
          default:
            return this.key;
        }
      }
      validate(value) {
        if (typeof value !== "string" && !Buffer.isBuffer(value)) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid blob", value));
        }
        return true;
      }
      _stringify(value) {
        if (!Buffer.isBuffer(value)) {
          if (Array.isArray(value)) {
            value = Buffer.from(value);
          } else {
            value = Buffer.from(value.toString());
          }
        }
        const hex = value.toString("hex");
        return this._hexify(hex);
      }
      _hexify(hex) {
        return `X'${hex}'`;
      }
      _bindParam(value, options) {
        if (!Buffer.isBuffer(value)) {
          if (Array.isArray(value)) {
            value = Buffer.from(value);
          } else {
            value = Buffer.from(value.toString());
          }
        }
        return options.bindParam(value);
      }
    };
    BLOB2.prototype.escape = false;
    var RANGE2 = class extends ABSTRACT2 {
      constructor(subtype) {
        super();
        const options = _.isPlainObject(subtype) ? subtype : { subtype };
        if (!options.subtype)
          options.subtype = new INTEGER2();
        if (typeof options.subtype === "function") {
          options.subtype = new options.subtype();
        }
        this._subtype = options.subtype.key;
        this.options = options;
      }
      validate(value) {
        if (!Array.isArray(value)) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid range", value));
        }
        if (value.length !== 2) {
          throw new sequelizeErrors.ValidationError("A range must be an array with two elements");
        }
        return true;
      }
    };
    var UUID2 = class extends ABSTRACT2 {
      validate(value, options) {
        if (typeof value !== "string" || !Validator2.isUUID(value) && (!options || !options.acceptStrings)) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid uuid", value));
        }
        return true;
      }
    };
    var UUIDV12 = class extends ABSTRACT2 {
      validate(value, options) {
        if (typeof value !== "string" || !Validator2.isUUID(value) && (!options || !options.acceptStrings)) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid uuid", value));
        }
        return true;
      }
    };
    var UUIDV42 = class extends ABSTRACT2 {
      validate(value, options) {
        if (typeof value !== "string" || !Validator2.isUUID(value, 4) && (!options || !options.acceptStrings)) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid uuidv4", value));
        }
        return true;
      }
    };
    var VIRTUAL2 = class extends ABSTRACT2 {
      constructor(ReturnType, fields) {
        super();
        if (typeof ReturnType === "function")
          ReturnType = new ReturnType();
        this.returnType = ReturnType;
        this.fields = fields;
      }
    };
    var ENUM2 = class extends ABSTRACT2 {
      constructor(...args) {
        super();
        const value = args[0];
        const options = typeof value === "object" && !Array.isArray(value) && value || {
          values: args.reduce((result, element) => {
            return result.concat(Array.isArray(element) ? element : [element]);
          }, [])
        };
        this.values = options.values;
        this.options = options;
      }
      validate(value) {
        if (!this.values.includes(value)) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid choice in %j", value, this.values));
        }
        return true;
      }
    };
    var ARRAY2 = class extends ABSTRACT2 {
      constructor(type) {
        super();
        const options = _.isPlainObject(type) ? type : { type };
        this.options = options;
        this.type = typeof options.type === "function" ? new options.type() : options.type;
      }
      toSql() {
        return `${this.type.toSql()}[]`;
      }
      validate(value) {
        if (!Array.isArray(value)) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid array", value));
        }
        return true;
      }
      static is(obj, type) {
        return obj instanceof ARRAY2 && obj.type instanceof type;
      }
    };
    var GEOMETRY2 = class extends ABSTRACT2 {
      constructor(type, srid) {
        super();
        const options = _.isPlainObject(type) ? type : { type, srid };
        this.options = options;
        this.type = options.type;
        this.srid = options.srid;
      }
      _stringify(value, options) {
        return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;
      }
      _bindParam(value, options) {
        return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;
      }
    };
    GEOMETRY2.prototype.escape = false;
    var GEOGRAPHY2 = class extends ABSTRACT2 {
      constructor(type, srid) {
        super();
        const options = _.isPlainObject(type) ? type : { type, srid };
        this.options = options;
        this.type = options.type;
        this.srid = options.srid;
      }
      _stringify(value, options) {
        return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;
      }
      _bindParam(value, options) {
        return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;
      }
    };
    GEOGRAPHY2.prototype.escape = false;
    var CIDR2 = class extends ABSTRACT2 {
      validate(value) {
        if (typeof value !== "string" || !Validator2.isIPRange(value)) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid CIDR", value));
        }
        return true;
      }
    };
    var INET2 = class extends ABSTRACT2 {
      validate(value) {
        if (typeof value !== "string" || !Validator2.isIP(value)) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid INET", value));
        }
        return true;
      }
    };
    var MACADDR2 = class extends ABSTRACT2 {
      validate(value) {
        if (typeof value !== "string" || !Validator2.isMACAddress(value)) {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid MACADDR", value));
        }
        return true;
      }
    };
    var TSVECTOR2 = class extends ABSTRACT2 {
      validate(value) {
        if (typeof value !== "string") {
          throw new sequelizeErrors.ValidationError(util.format("%j is not a valid string", value));
        }
        return true;
      }
    };
    var DataTypes2 = module.exports = {
      ABSTRACT: ABSTRACT2,
      STRING: STRING2,
      CHAR: CHAR2,
      TEXT: TEXT2,
      NUMBER: NUMBER2,
      TINYINT: TINYINT2,
      SMALLINT: SMALLINT2,
      MEDIUMINT: MEDIUMINT2,
      INTEGER: INTEGER2,
      BIGINT: BIGINT2,
      FLOAT: FLOAT2,
      TIME: TIME2,
      DATE: DATE2,
      DATEONLY: DATEONLY2,
      BOOLEAN: BOOLEAN2,
      NOW: NOW2,
      BLOB: BLOB2,
      DECIMAL: DECIMAL2,
      NUMERIC: DECIMAL2,
      UUID: UUID2,
      UUIDV1: UUIDV12,
      UUIDV4: UUIDV42,
      HSTORE: HSTORE2,
      JSON: JSONTYPE,
      JSONB: JSONB2,
      VIRTUAL: VIRTUAL2,
      ARRAY: ARRAY2,
      ENUM: ENUM2,
      RANGE: RANGE2,
      REAL: REAL2,
      "DOUBLE PRECISION": DOUBLE2,
      DOUBLE: DOUBLE2,
      GEOMETRY: GEOMETRY2,
      GEOGRAPHY: GEOGRAPHY2,
      CIDR: CIDR2,
      INET: INET2,
      MACADDR: MACADDR2,
      CITEXT: CITEXT2,
      TSVECTOR: TSVECTOR2
    };
    _.each(DataTypes2, (dataType, name) => {
      if (!Object.prototype.hasOwnProperty.call(dataType, "key")) {
        dataType.types = {};
        dataType.key = dataType.prototype.key = name;
      }
    });
    var dialectMap = {};
    dialectMap.postgres = require_data_types()(DataTypes2);
    dialectMap.mysql = require_data_types2()(DataTypes2);
    dialectMap.mariadb = require_data_types3()(DataTypes2);
    dialectMap.sqlite = require_data_types4()(DataTypes2);
    dialectMap.mssql = require_data_types5()(DataTypes2);
    dialectMap.db2 = require_data_types6()(DataTypes2);
    dialectMap.snowflake = require_data_types7()(DataTypes2);
    var dialectList = Object.values(dialectMap);
    for (const dataTypes of dialectList) {
      _.each(dataTypes, (DataType, key) => {
        if (!DataType.key) {
          DataType.key = DataType.prototype.key = key;
        }
      });
    }
    for (const dataTypes of [DataTypes2, ...dialectList]) {
      _.each(dataTypes, (DataType, key) => {
        dataTypes[key] = classToInvokable(DataType);
      });
    }
    Object.assign(DataTypes2, dialectMap);
  }
});

// node_modules/sequelize/lib/sql-string.js
var require_sql_string = __commonJS({
  "node_modules/sequelize/lib/sql-string.js"(exports) {
    "use strict";
    var dataTypes = require_data_types8();
    var { logger } = require_logger();
    function arrayToList(array, timeZone, dialect, format2) {
      return array.reduce((sql, val, i) => {
        if (i !== 0) {
          sql += ", ";
        }
        if (Array.isArray(val)) {
          sql += `(${arrayToList(val, timeZone, dialect, format2)})`;
        } else {
          sql += escape(val, timeZone, dialect, format2);
        }
        return sql;
      }, "");
    }
    exports.arrayToList = arrayToList;
    function escape(val, timeZone, dialect, format2) {
      let prependN = false;
      if (val === void 0 || val === null) {
        return "NULL";
      }
      switch (typeof val) {
        case "boolean":
          if (["sqlite", "mssql"].includes(dialect)) {
            return +!!val;
          }
          return (!!val).toString();
        case "number":
          return val.toString();
        case "string":
          prependN = dialect === "mssql";
          break;
      }
      if (val instanceof Date) {
        val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });
      }
      if (Buffer.isBuffer(val)) {
        if (dataTypes[dialect].BLOB) {
          return dataTypes[dialect].BLOB.prototype.stringify(val);
        }
        return dataTypes.BLOB.prototype.stringify(val);
      }
      if (Array.isArray(val)) {
        const partialEscape = (escVal) => escape(escVal, timeZone, dialect, format2);
        if (dialect === "postgres" && !format2) {
          return dataTypes.ARRAY.prototype.stringify(val, { escape: partialEscape });
        }
        return arrayToList(val, timeZone, dialect, format2);
      }
      if (!val.replace) {
        throw new Error(`Invalid value ${logger.inspect(val)}`);
      }
      if (["postgres", "sqlite", "mssql", "snowflake", "db2"].includes(dialect)) {
        val = val.replace(/'/g, "''");
        if (dialect === "postgres") {
          val = val.replace(/\0/g, "\\0");
        }
      } else {
        val = val.replace(/[\0\n\r\b\t\\'"\x1a]/g, (s) => {
          switch (s) {
            case "\0":
              return "\\0";
            case "\n":
              return "\\n";
            case "\r":
              return "\\r";
            case "\b":
              return "\\b";
            case "	":
              return "\\t";
            case "":
              return "\\Z";
            default:
              return `\\${s}`;
          }
        });
      }
      return `${(prependN ? "N'" : "'") + val}'`;
    }
    exports.escape = escape;
    function format(sql, values, timeZone, dialect) {
      values = [].concat(values);
      if (typeof sql !== "string") {
        throw new Error(`Invalid SQL string provided: ${sql}`);
      }
      return sql.replace(/\?/g, (match) => {
        if (!values.length) {
          return match;
        }
        return escape(values.shift(), timeZone, dialect, true);
      });
    }
    exports.format = format;
    function formatNamedParameters(sql, values, timeZone, dialect) {
      return sql.replace(/:+(?!\d)(\w+)/g, (value, key) => {
        if (dialect === "postgres" && value.slice(0, 2) === "::") {
          return value;
        }
        if (values[key] !== void 0) {
          return escape(values[key], timeZone, dialect, true);
        }
        throw new Error(`Named parameter "${value}" has no value in the given object.`);
      });
    }
    exports.formatNamedParameters = formatNamedParameters;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/uuid/dist/rng.js
var require_rng = __commonJS({
  "node_modules/uuid/dist/rng.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rng;
    var _crypto = _interopRequireDefault(__require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var rnds8Pool = new Uint8Array(256);
    var poolPtr = rnds8Pool.length;
    function rng() {
      if (poolPtr > rnds8Pool.length - 16) {
        _crypto.default.randomFillSync(rnds8Pool);
        poolPtr = 0;
      }
      return rnds8Pool.slice(poolPtr, poolPtr += 16);
    }
  }
});

// node_modules/uuid/dist/regex.js
var require_regex = __commonJS({
  "node_modules/uuid/dist/regex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/validate.js
var require_validate = __commonJS({
  "node_modules/uuid/dist/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === "string" && _regex.default.test(uuid);
    }
    var _default = validate;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS({
  "node_modules/uuid/dist/stringify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    function stringify(arr, offset = 0) {
      const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid;
    }
    var _default = stringify;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v1.js
var require_v1 = __commonJS({
  "node_modules/uuid/dist/v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = buf && offset || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.default)(b);
    }
    var _default = v1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/parse.js
var require_parse = __commonJS({
  "node_modules/uuid/dist/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 255;
      arr[2] = v >>> 8 & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
      arr[11] = v / 4294967296 & 255;
      arr[12] = v >>> 24 & 255;
      arr[13] = v >>> 16 & 255;
      arr[14] = v >>> 8 & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v35.js
var require_v35 = __commonJS({
  "node_modules/uuid/dist/v35.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    exports.URL = exports.DNS = void 0;
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports.DNS = DNS;
    var URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports.URL = URL;
    function _default(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === "string") {
          value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
          namespace = (0, _parse.default)(namespace);
        }
        if (namespace.length !== 16) {
          throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 15 | version;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.default)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS;
      generateUUID.URL = URL;
      return generateUUID;
    }
  }
});

// node_modules/uuid/dist/md5.js
var require_md5 = __commonJS({
  "node_modules/uuid/dist/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(__require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function md5(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("md5").update(bytes).digest();
    }
    var _default = md5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v3.js
var require_v3 = __commonJS({
  "node_modules/uuid/dist/v3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)("v3", 48, _md.default);
    var _default = v3;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/dist/v4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.default)(rnds);
    }
    var _default = v4;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS({
  "node_modules/uuid/dist/sha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(__require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function sha1(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("sha1").update(bytes).digest();
    }
    var _default = sha1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v5.js
var require_v5 = __commonJS({
  "node_modules/uuid/dist/v5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)("v5", 80, _sha.default);
    var _default = v5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/nil.js
var require_nil = __commonJS({
  "node_modules/uuid/dist/nil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = "00000000-0000-0000-0000-000000000000";
    exports.default = _default;
  }
});

// node_modules/uuid/dist/version.js
var require_version = __commonJS({
  "node_modules/uuid/dist/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid.substr(14, 1), 16);
    }
    var _default = version;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/index.js
var require_dist = __commonJS({
  "node_modules/uuid/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "v1", {
      enumerable: true,
      get: function() {
        return _v.default;
      }
    });
    Object.defineProperty(exports, "v3", {
      enumerable: true,
      get: function() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports, "v4", {
      enumerable: true,
      get: function() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports, "v5", {
      enumerable: true,
      get: function() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports, "NIL", {
      enumerable: true,
      get: function() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function() {
        return _version.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "stringify", {
      enumerable: true,
      get: function() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function() {
        return _parse.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/sequelize/lib/operators.js
var require_operators = __commonJS({
  "node_modules/sequelize/lib/operators.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    __export(exports, {
      Op: () => Op2,
      default: () => operators_default
    });
    var Op2 = {
      eq: Symbol.for("eq"),
      ne: Symbol.for("ne"),
      gte: Symbol.for("gte"),
      gt: Symbol.for("gt"),
      lte: Symbol.for("lte"),
      lt: Symbol.for("lt"),
      not: Symbol.for("not"),
      is: Symbol.for("is"),
      in: Symbol.for("in"),
      notIn: Symbol.for("notIn"),
      like: Symbol.for("like"),
      notLike: Symbol.for("notLike"),
      iLike: Symbol.for("iLike"),
      notILike: Symbol.for("notILike"),
      startsWith: Symbol.for("startsWith"),
      endsWith: Symbol.for("endsWith"),
      substring: Symbol.for("substring"),
      regexp: Symbol.for("regexp"),
      notRegexp: Symbol.for("notRegexp"),
      iRegexp: Symbol.for("iRegexp"),
      notIRegexp: Symbol.for("notIRegexp"),
      between: Symbol.for("between"),
      notBetween: Symbol.for("notBetween"),
      overlap: Symbol.for("overlap"),
      contains: Symbol.for("contains"),
      contained: Symbol.for("contained"),
      adjacent: Symbol.for("adjacent"),
      strictLeft: Symbol.for("strictLeft"),
      strictRight: Symbol.for("strictRight"),
      noExtendRight: Symbol.for("noExtendRight"),
      noExtendLeft: Symbol.for("noExtendLeft"),
      and: Symbol.for("and"),
      or: Symbol.for("or"),
      any: Symbol.for("any"),
      all: Symbol.for("all"),
      values: Symbol.for("values"),
      col: Symbol.for("col"),
      placeholder: Symbol.for("placeholder"),
      join: Symbol.for("join"),
      match: Symbol.for("match")
    };
    var operators_default = Op2;
    module.exports = Op2;
  }
});

// node_modules/inflection/lib/inflection.js
var require_inflection = __commonJS({
  "node_modules/inflection/lib/inflection.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define([], factory);
      } else if (typeof exports === "object") {
        module.exports = factory();
      } else {
        root.inflection = factory();
      }
    })(exports, function() {
      var uncountable_words = [
        "accommodation",
        "adulthood",
        "advertising",
        "advice",
        "aggression",
        "aid",
        "air",
        "aircraft",
        "alcohol",
        "anger",
        "applause",
        "arithmetic",
        "assistance",
        "athletics",
        "bacon",
        "baggage",
        "beef",
        "biology",
        "blood",
        "botany",
        "bread",
        "butter",
        "carbon",
        "cardboard",
        "cash",
        "chalk",
        "chaos",
        "chess",
        "crossroads",
        "countryside",
        "dancing",
        "deer",
        "dignity",
        "dirt",
        "dust",
        "economics",
        "education",
        "electricity",
        "engineering",
        "enjoyment",
        "envy",
        "equipment",
        "ethics",
        "evidence",
        "evolution",
        "fame",
        "fiction",
        "flour",
        "flu",
        "food",
        "fuel",
        "fun",
        "furniture",
        "gallows",
        "garbage",
        "garlic",
        "genetics",
        "gold",
        "golf",
        "gossip",
        "gratitude",
        "grief",
        "guilt",
        "gymnastics",
        "happiness",
        "hardware",
        "harm",
        "hate",
        "hatred",
        "health",
        "heat",
        "help",
        "homework",
        "honesty",
        "honey",
        "hospitality",
        "housework",
        "humour",
        "hunger",
        "hydrogen",
        "ice",
        "importance",
        "inflation",
        "information",
        "innocence",
        "iron",
        "irony",
        "jam",
        "jewelry",
        "judo",
        "karate",
        "knowledge",
        "lack",
        "laughter",
        "lava",
        "leather",
        "leisure",
        "lightning",
        "linguine",
        "linguini",
        "linguistics",
        "literature",
        "litter",
        "livestock",
        "logic",
        "loneliness",
        "luck",
        "luggage",
        "macaroni",
        "machinery",
        "magic",
        "management",
        "mankind",
        "marble",
        "mathematics",
        "mayonnaise",
        "measles",
        "methane",
        "milk",
        "minus",
        "money",
        "mud",
        "music",
        "mumps",
        "nature",
        "news",
        "nitrogen",
        "nonsense",
        "nurture",
        "nutrition",
        "obedience",
        "obesity",
        "oxygen",
        "pasta",
        "patience",
        "physics",
        "poetry",
        "pollution",
        "poverty",
        "pride",
        "psychology",
        "publicity",
        "punctuation",
        "quartz",
        "racism",
        "relaxation",
        "reliability",
        "research",
        "respect",
        "revenge",
        "rice",
        "rubbish",
        "rum",
        "safety",
        "scenery",
        "seafood",
        "seaside",
        "series",
        "shame",
        "sheep",
        "shopping",
        "sleep",
        "smoke",
        "smoking",
        "snow",
        "soap",
        "software",
        "soil",
        "spaghetti",
        "species",
        "steam",
        "stuff",
        "stupidity",
        "sunshine",
        "symmetry",
        "tennis",
        "thirst",
        "thunder",
        "timber",
        "traffic",
        "transportation",
        "trust",
        "underwear",
        "unemployment",
        "unity",
        "validity",
        "veal",
        "vegetation",
        "vegetarianism",
        "vengeance",
        "violence",
        "vitality",
        "warmth",
        "wealth",
        "weather",
        "welfare",
        "wheat",
        "wildlife",
        "wisdom",
        "yoga",
        "zinc",
        "zoology"
      ];
      var regex = {
        plural: {
          men: new RegExp("^(m|wom)en$", "gi"),
          people: new RegExp("(pe)ople$", "gi"),
          children: new RegExp("(child)ren$", "gi"),
          tia: new RegExp("([ti])a$", "gi"),
          analyses: new RegExp("((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$", "gi"),
          drives: new RegExp("(drive)s$", "gi"),
          hives: new RegExp("(hi|ti)ves$", "gi"),
          curves: new RegExp("(curve)s$", "gi"),
          lrves: new RegExp("([lr])ves$", "gi"),
          aves: new RegExp("([a])ves$", "gi"),
          foves: new RegExp("([^fo])ves$", "gi"),
          movies: new RegExp("(m)ovies$", "gi"),
          aeiouyies: new RegExp("([^aeiouy]|qu)ies$", "gi"),
          series: new RegExp("(s)eries$", "gi"),
          xes: new RegExp("(x|ch|ss|sh)es$", "gi"),
          mice: new RegExp("([m|l])ice$", "gi"),
          buses: new RegExp("(bus)es$", "gi"),
          oes: new RegExp("(o)es$", "gi"),
          shoes: new RegExp("(shoe)s$", "gi"),
          crises: new RegExp("(cris|ax|test)es$", "gi"),
          octopuses: new RegExp("(octop|vir)uses$", "gi"),
          aliases: new RegExp("(alias|canvas|status|campus)es$", "gi"),
          summonses: new RegExp("^(summons|bonus)es$", "gi"),
          oxen: new RegExp("^(ox)en", "gi"),
          matrices: new RegExp("(matr)ices$", "gi"),
          vertices: new RegExp("(vert|ind)ices$", "gi"),
          feet: new RegExp("^feet$", "gi"),
          teeth: new RegExp("^teeth$", "gi"),
          geese: new RegExp("^geese$", "gi"),
          quizzes: new RegExp("(quiz)zes$", "gi"),
          whereases: new RegExp("^(whereas)es$", "gi"),
          criteria: new RegExp("^(criteri)a$", "gi"),
          genera: new RegExp("^genera$", "gi"),
          ss: new RegExp("ss$", "gi"),
          s: new RegExp("s$", "gi")
        },
        singular: {
          man: new RegExp("^(m|wom)an$", "gi"),
          person: new RegExp("(pe)rson$", "gi"),
          child: new RegExp("(child)$", "gi"),
          drive: new RegExp("(drive)$", "gi"),
          ox: new RegExp("^(ox)$", "gi"),
          axis: new RegExp("(ax|test)is$", "gi"),
          octopus: new RegExp("(octop|vir)us$", "gi"),
          alias: new RegExp("(alias|status|canvas|campus)$", "gi"),
          summons: new RegExp("^(summons|bonus)$", "gi"),
          bus: new RegExp("(bu)s$", "gi"),
          buffalo: new RegExp("(buffal|tomat|potat)o$", "gi"),
          tium: new RegExp("([ti])um$", "gi"),
          sis: new RegExp("sis$", "gi"),
          ffe: new RegExp("(?:([^f])fe|([lr])f)$", "gi"),
          hive: new RegExp("(hi|ti)ve$", "gi"),
          aeiouyy: new RegExp("([^aeiouy]|qu)y$", "gi"),
          x: new RegExp("(x|ch|ss|sh)$", "gi"),
          matrix: new RegExp("(matr)ix$", "gi"),
          vertex: new RegExp("(vert|ind)ex$", "gi"),
          mouse: new RegExp("([m|l])ouse$", "gi"),
          foot: new RegExp("^foot$", "gi"),
          tooth: new RegExp("^tooth$", "gi"),
          goose: new RegExp("^goose$", "gi"),
          quiz: new RegExp("(quiz)$", "gi"),
          whereas: new RegExp("^(whereas)$", "gi"),
          criterion: new RegExp("^(criteri)on$", "gi"),
          genus: new RegExp("^genus$", "gi"),
          s: new RegExp("s$", "gi"),
          common: new RegExp("$", "gi")
        }
      };
      var plural_rules = [
        [regex.plural.men],
        [regex.plural.people],
        [regex.plural.children],
        [regex.plural.tia],
        [regex.plural.analyses],
        [regex.plural.drives],
        [regex.plural.hives],
        [regex.plural.curves],
        [regex.plural.lrves],
        [regex.plural.foves],
        [regex.plural.aeiouyies],
        [regex.plural.series],
        [regex.plural.movies],
        [regex.plural.xes],
        [regex.plural.mice],
        [regex.plural.buses],
        [regex.plural.oes],
        [regex.plural.shoes],
        [regex.plural.crises],
        [regex.plural.octopuses],
        [regex.plural.aliases],
        [regex.plural.summonses],
        [regex.plural.oxen],
        [regex.plural.matrices],
        [regex.plural.feet],
        [regex.plural.teeth],
        [regex.plural.geese],
        [regex.plural.quizzes],
        [regex.plural.whereases],
        [regex.plural.criteria],
        [regex.plural.genera],
        [regex.singular.man, "$1en"],
        [regex.singular.person, "$1ople"],
        [regex.singular.child, "$1ren"],
        [regex.singular.drive, "$1s"],
        [regex.singular.ox, "$1en"],
        [regex.singular.axis, "$1es"],
        [regex.singular.octopus, "$1uses"],
        [regex.singular.alias, "$1es"],
        [regex.singular.summons, "$1es"],
        [regex.singular.bus, "$1ses"],
        [regex.singular.buffalo, "$1oes"],
        [regex.singular.tium, "$1a"],
        [regex.singular.sis, "ses"],
        [regex.singular.ffe, "$1$2ves"],
        [regex.singular.hive, "$1ves"],
        [regex.singular.aeiouyy, "$1ies"],
        [regex.singular.matrix, "$1ices"],
        [regex.singular.vertex, "$1ices"],
        [regex.singular.x, "$1es"],
        [regex.singular.mouse, "$1ice"],
        [regex.singular.foot, "feet"],
        [regex.singular.tooth, "teeth"],
        [regex.singular.goose, "geese"],
        [regex.singular.quiz, "$1zes"],
        [regex.singular.whereas, "$1es"],
        [regex.singular.criterion, "$1a"],
        [regex.singular.genus, "genera"],
        [regex.singular.s, "s"],
        [regex.singular.common, "s"]
      ];
      var singular_rules = [
        [regex.singular.man],
        [regex.singular.person],
        [regex.singular.child],
        [regex.singular.drive],
        [regex.singular.ox],
        [regex.singular.axis],
        [regex.singular.octopus],
        [regex.singular.alias],
        [regex.singular.summons],
        [regex.singular.bus],
        [regex.singular.buffalo],
        [regex.singular.tium],
        [regex.singular.sis],
        [regex.singular.ffe],
        [regex.singular.hive],
        [regex.singular.aeiouyy],
        [regex.singular.x],
        [regex.singular.matrix],
        [regex.singular.mouse],
        [regex.singular.foot],
        [regex.singular.tooth],
        [regex.singular.goose],
        [regex.singular.quiz],
        [regex.singular.whereas],
        [regex.singular.criterion],
        [regex.singular.genus],
        [regex.plural.men, "$1an"],
        [regex.plural.people, "$1rson"],
        [regex.plural.children, "$1"],
        [regex.plural.drives, "$1"],
        [regex.plural.genera, "genus"],
        [regex.plural.criteria, "$1on"],
        [regex.plural.tia, "$1um"],
        [regex.plural.analyses, "$1$2sis"],
        [regex.plural.hives, "$1ve"],
        [regex.plural.curves, "$1"],
        [regex.plural.lrves, "$1f"],
        [regex.plural.aves, "$1ve"],
        [regex.plural.foves, "$1fe"],
        [regex.plural.movies, "$1ovie"],
        [regex.plural.aeiouyies, "$1y"],
        [regex.plural.series, "$1eries"],
        [regex.plural.xes, "$1"],
        [regex.plural.mice, "$1ouse"],
        [regex.plural.buses, "$1"],
        [regex.plural.oes, "$1"],
        [regex.plural.shoes, "$1"],
        [regex.plural.crises, "$1is"],
        [regex.plural.octopuses, "$1us"],
        [regex.plural.aliases, "$1"],
        [regex.plural.summonses, "$1"],
        [regex.plural.oxen, "$1"],
        [regex.plural.matrices, "$1ix"],
        [regex.plural.vertices, "$1ex"],
        [regex.plural.feet, "foot"],
        [regex.plural.teeth, "tooth"],
        [regex.plural.geese, "goose"],
        [regex.plural.quizzes, "$1"],
        [regex.plural.whereases, "$1"],
        [regex.plural.ss, "ss"],
        [regex.plural.s, ""]
      ];
      var non_titlecased_words = [
        "and",
        "or",
        "nor",
        "a",
        "an",
        "the",
        "so",
        "but",
        "to",
        "of",
        "at",
        "by",
        "from",
        "into",
        "on",
        "onto",
        "off",
        "out",
        "in",
        "over",
        "with",
        "for"
      ];
      var id_suffix = new RegExp("(_ids|_id)$", "g");
      var underbar = new RegExp("_", "g");
      var space_or_underbar = new RegExp("[ _]", "g");
      var uppercase = new RegExp("([A-Z])", "g");
      var underbar_prefix = new RegExp("^_");
      var inflector = {
        _apply_rules: function(str, rules, skip, override) {
          if (override) {
            str = override;
          } else {
            var ignore = inflector.indexOf(skip, str.toLowerCase()) > -1;
            if (!ignore) {
              var i = 0;
              var j = rules.length;
              for (; i < j; i++) {
                if (str.match(rules[i][0])) {
                  if (rules[i][1] !== void 0) {
                    str = str.replace(rules[i][0], rules[i][1]);
                  }
                  break;
                }
              }
            }
          }
          return str;
        },
        indexOf: function(arr, item, from_index, compare_func) {
          if (!from_index) {
            from_index = -1;
          }
          var index = -1;
          var i = from_index;
          var j = arr.length;
          for (; i < j; i++) {
            if (arr[i] === item || compare_func && compare_func(arr[i], item)) {
              index = i;
              break;
            }
          }
          return index;
        },
        pluralize: function(str, plural) {
          return inflector._apply_rules(str, plural_rules, uncountable_words, plural);
        },
        singularize: function(str, singular2) {
          return inflector._apply_rules(str, singular_rules, uncountable_words, singular2);
        },
        inflect: function(str, count, singular2, plural) {
          count = parseFloat(count, 10);
          if (isNaN(count))
            return str;
          if (count === 1) {
            return inflector._apply_rules(str, singular_rules, uncountable_words, singular2);
          } else {
            return inflector._apply_rules(str, plural_rules, uncountable_words, plural);
          }
        },
        camelize: function(str, low_first_letter) {
          var str_path = str.split("/");
          var i = 0;
          var j = str_path.length;
          var str_arr, init_x, k, l, first;
          for (; i < j; i++) {
            str_arr = str_path[i].split("_");
            k = 0;
            l = str_arr.length;
            for (; k < l; k++) {
              if (k !== 0) {
                str_arr[k] = str_arr[k].toLowerCase();
              }
              first = str_arr[k].charAt(0);
              first = low_first_letter && i === 0 && k === 0 ? first.toLowerCase() : first.toUpperCase();
              str_arr[k] = first + str_arr[k].substring(1);
            }
            str_path[i] = str_arr.join("");
          }
          return str_path.join("::");
        },
        underscore: function(str, all_upper_case) {
          if (all_upper_case && str === str.toUpperCase())
            return str;
          var str_path = str.split("::");
          var i = 0;
          var j = str_path.length;
          for (; i < j; i++) {
            str_path[i] = str_path[i].replace(uppercase, "_$1");
            str_path[i] = str_path[i].replace(underbar_prefix, "");
          }
          return str_path.join("/").toLowerCase();
        },
        humanize: function(str, low_first_letter) {
          str = str.toLowerCase();
          str = str.replace(id_suffix, "");
          str = str.replace(underbar, " ");
          if (!low_first_letter) {
            str = inflector.capitalize(str);
          }
          return str;
        },
        capitalize: function(str) {
          str = str.toLowerCase();
          return str.substring(0, 1).toUpperCase() + str.substring(1);
        },
        dasherize: function(str) {
          return str.replace(space_or_underbar, "-");
        },
        titleize: function(str) {
          str = str.toLowerCase().replace(underbar, " ");
          var str_arr = str.split(" ");
          var i = 0;
          var j = str_arr.length;
          var d, k, l;
          for (; i < j; i++) {
            d = str_arr[i].split("-");
            k = 0;
            l = d.length;
            for (; k < l; k++) {
              if (inflector.indexOf(non_titlecased_words, d[k].toLowerCase()) < 0) {
                d[k] = inflector.capitalize(d[k]);
              }
            }
            str_arr[i] = d.join("-");
          }
          str = str_arr.join(" ");
          str = str.substring(0, 1).toUpperCase() + str.substring(1);
          return str;
        },
        demodulize: function(str) {
          var str_arr = str.split("::");
          return str_arr[str_arr.length - 1];
        },
        tableize: function(str) {
          str = inflector.underscore(str);
          str = inflector.pluralize(str);
          return str;
        },
        classify: function(str) {
          str = inflector.camelize(str);
          str = inflector.singularize(str);
          return str;
        },
        foreign_key: function(str, drop_id_ubar) {
          str = inflector.demodulize(str);
          str = inflector.underscore(str) + (drop_id_ubar ? "" : "_") + "id";
          return str;
        },
        ordinalize: function(str) {
          var str_arr = str.split(" ");
          var i = 0;
          var j = str_arr.length;
          for (; i < j; i++) {
            var k = parseInt(str_arr[i], 10);
            if (!isNaN(k)) {
              var ltd = str_arr[i].substring(str_arr[i].length - 2);
              var ld = str_arr[i].substring(str_arr[i].length - 1);
              var suf = "th";
              if (ltd != "11" && ltd != "12" && ltd != "13") {
                if (ld === "1") {
                  suf = "st";
                } else if (ld === "2") {
                  suf = "nd";
                } else if (ld === "3") {
                  suf = "rd";
                }
              }
              str_arr[i] += suf;
            }
          }
          return str_arr.join(" ");
        },
        transform: function(str, arr) {
          var i = 0;
          var j = arr.length;
          for (; i < j; i++) {
            var method = arr[i];
            if (inflector.hasOwnProperty(method)) {
              str = inflector[method](str);
            }
          }
          return str;
        }
      };
      inflector.version = "1.13.1";
      return inflector;
    });
  }
});

// node_modules/sequelize/lib/utils.js
var require_utils = __commonJS({
  "node_modules/sequelize/lib/utils.js"(exports) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var DataTypes2 = require_data_types8();
    var SqlString = require_sql_string();
    var _ = require_lodash();
    var baseIsNative = require_baseIsNative();
    var uuidv1 = require_dist().v1;
    var uuidv4 = require_dist().v4;
    var operators = require_operators();
    var operatorsSet = new Set(Object.values(operators));
    var inflection = require_inflection();
    exports.classToInvokable = require_class_to_invokable().classToInvokable;
    exports.joinSQLFragments = require_join_sql_fragments().joinSQLFragments;
    function useInflection2(_inflection) {
      inflection = _inflection;
    }
    exports.useInflection = useInflection2;
    function camelizeIf(str, condition) {
      let result = str;
      if (condition) {
        result = camelize(str);
      }
      return result;
    }
    exports.camelizeIf = camelizeIf;
    function underscoredIf(str, condition) {
      let result = str;
      if (condition) {
        result = underscore(str);
      }
      return result;
    }
    exports.underscoredIf = underscoredIf;
    function isPrimitive(val) {
      const type = typeof val;
      return ["string", "number", "boolean"].includes(type);
    }
    exports.isPrimitive = isPrimitive;
    function mergeDefaults(a, b) {
      return _.mergeWith(a, b, (objectValue, sourceValue) => {
        if (!_.isPlainObject(objectValue) && objectValue !== void 0) {
          if (_.isFunction(objectValue) && baseIsNative(objectValue)) {
            return sourceValue || objectValue;
          }
          return objectValue;
        }
      });
    }
    exports.mergeDefaults = mergeDefaults;
    function merge() {
      const result = {};
      for (const obj of arguments) {
        _.forOwn(obj, (value, key) => {
          if (value !== void 0) {
            if (!result[key]) {
              result[key] = value;
            } else if (_.isPlainObject(value) && _.isPlainObject(result[key])) {
              result[key] = merge(result[key], value);
            } else if (Array.isArray(value) && Array.isArray(result[key])) {
              result[key] = value.concat(result[key]);
            } else {
              result[key] = value;
            }
          }
        });
      }
      return result;
    }
    exports.merge = merge;
    function spliceStr(str, index, count, add) {
      return str.slice(0, index) + add + str.slice(index + count);
    }
    exports.spliceStr = spliceStr;
    function camelize(str) {
      return str.trim().replace(/[-_\s]+(.)?/g, (match, c) => c.toUpperCase());
    }
    exports.camelize = camelize;
    function underscore(str) {
      return inflection.underscore(str);
    }
    exports.underscore = underscore;
    function singularize(str) {
      return inflection.singularize(str);
    }
    exports.singularize = singularize;
    function pluralize(str) {
      return inflection.pluralize(str);
    }
    exports.pluralize = pluralize;
    function format(arr, dialect) {
      const timeZone = null;
      return SqlString.format(arr[0], arr.slice(1), timeZone, dialect);
    }
    exports.format = format;
    function formatNamedParameters(sql, parameters, dialect) {
      const timeZone = null;
      return SqlString.formatNamedParameters(sql, parameters, timeZone, dialect);
    }
    exports.formatNamedParameters = formatNamedParameters;
    function cloneDeep(obj, onlyPlain) {
      obj = obj || {};
      return _.cloneDeepWith(obj, (elem) => {
        if (Array.isArray(elem) || _.isPlainObject(elem)) {
          return void 0;
        }
        if (onlyPlain || typeof elem === "object") {
          return elem;
        }
        if (elem && typeof elem.clone === "function") {
          return elem.clone();
        }
      });
    }
    exports.cloneDeep = cloneDeep;
    function mapFinderOptions(options, Model3) {
      if (options.attributes && Array.isArray(options.attributes)) {
        options.attributes = Model3._injectDependentVirtualAttributes(options.attributes);
        options.attributes = options.attributes.filter((v) => !Model3._virtualAttributes.has(v));
      }
      mapOptionFieldNames(options, Model3);
      return options;
    }
    exports.mapFinderOptions = mapFinderOptions;
    function mapOptionFieldNames(options, Model3) {
      if (Array.isArray(options.attributes)) {
        options.attributes = options.attributes.map((attr) => {
          if (typeof attr !== "string")
            return attr;
          if (Model3.rawAttributes[attr] && attr !== Model3.rawAttributes[attr].field) {
            return [Model3.rawAttributes[attr].field, attr];
          }
          return attr;
        });
      }
      if (options.where && _.isPlainObject(options.where)) {
        options.where = mapWhereFieldNames(options.where, Model3);
      }
      return options;
    }
    exports.mapOptionFieldNames = mapOptionFieldNames;
    function mapWhereFieldNames(attributes, Model3) {
      if (attributes) {
        attributes = cloneDeep(attributes);
        getComplexKeys(attributes).forEach((attribute) => {
          const rawAttribute = Model3.rawAttributes[attribute];
          if (rawAttribute && rawAttribute.field !== rawAttribute.fieldName) {
            attributes[rawAttribute.field] = attributes[attribute];
            delete attributes[attribute];
          }
          if (_.isPlainObject(attributes[attribute]) && !(rawAttribute && (rawAttribute.type instanceof DataTypes2.HSTORE || rawAttribute.type instanceof DataTypes2.JSON))) {
            attributes[attribute] = mapOptionFieldNames({
              where: attributes[attribute]
            }, Model3).where;
          }
          if (Array.isArray(attributes[attribute])) {
            attributes[attribute].forEach((where2, index) => {
              if (_.isPlainObject(where2)) {
                attributes[attribute][index] = mapWhereFieldNames(where2, Model3);
              }
            });
          }
        });
      }
      return attributes;
    }
    exports.mapWhereFieldNames = mapWhereFieldNames;
    function mapValueFieldNames(dataValues, fields, Model3) {
      const values = {};
      for (const attr of fields) {
        if (dataValues[attr] !== void 0 && !Model3._virtualAttributes.has(attr)) {
          if (Model3.rawAttributes[attr] && Model3.rawAttributes[attr].field && Model3.rawAttributes[attr].field !== attr) {
            values[Model3.rawAttributes[attr].field] = dataValues[attr];
          } else {
            values[attr] = dataValues[attr];
          }
        }
      }
      return values;
    }
    exports.mapValueFieldNames = mapValueFieldNames;
    function isColString(value) {
      return typeof value === "string" && value[0] === "$" && value[value.length - 1] === "$";
    }
    exports.isColString = isColString;
    function canTreatArrayAsAnd(arr) {
      return arr.some((arg) => _.isPlainObject(arg) || arg instanceof Where);
    }
    exports.canTreatArrayAsAnd = canTreatArrayAsAnd;
    function combineTableNames(tableName1, tableName2) {
      return tableName1.toLowerCase() < tableName2.toLowerCase() ? tableName1 + tableName2 : tableName2 + tableName1;
    }
    exports.combineTableNames = combineTableNames;
    function toDefaultValue(value, dialect) {
      if (typeof value === "function") {
        const tmp = value();
        if (tmp instanceof DataTypes2.ABSTRACT) {
          return tmp.toSql();
        }
        return tmp;
      }
      if (value instanceof DataTypes2.UUIDV1) {
        return uuidv1();
      }
      if (value instanceof DataTypes2.UUIDV4) {
        return uuidv4();
      }
      if (value instanceof DataTypes2.NOW) {
        return now(dialect);
      }
      if (Array.isArray(value)) {
        return value.slice();
      }
      if (_.isPlainObject(value)) {
        return __spreadValues({}, value);
      }
      return value;
    }
    exports.toDefaultValue = toDefaultValue;
    function defaultValueSchemable(value) {
      if (value === void 0) {
        return false;
      }
      if (value instanceof DataTypes2.NOW) {
        return false;
      }
      if (value instanceof DataTypes2.UUIDV1 || value instanceof DataTypes2.UUIDV4) {
        return false;
      }
      return typeof value !== "function";
    }
    exports.defaultValueSchemable = defaultValueSchemable;
    function removeNullValuesFromHash(hash, omitNull, options) {
      let result = hash;
      options = options || {};
      options.allowNull = options.allowNull || [];
      if (omitNull) {
        const _hash = {};
        _.forIn(hash, (val, key) => {
          if (options.allowNull.includes(key) || key.endsWith("Id") || val !== null && val !== void 0) {
            _hash[key] = val;
          }
        });
        result = _hash;
      }
      return result;
    }
    exports.removeNullValuesFromHash = removeNullValuesFromHash;
    var dialects = /* @__PURE__ */ new Set(["mariadb", "mysql", "postgres", "sqlite", "mssql", "db2"]);
    function now(dialect) {
      const d = new Date();
      if (!dialects.has(dialect)) {
        d.setMilliseconds(0);
      }
      return d;
    }
    exports.now = now;
    var TICK_CHAR = "`";
    exports.TICK_CHAR = TICK_CHAR;
    function addTicks(s, tickChar) {
      tickChar = tickChar || TICK_CHAR;
      return tickChar + removeTicks(s, tickChar) + tickChar;
    }
    exports.addTicks = addTicks;
    function removeTicks(s, tickChar) {
      tickChar = tickChar || TICK_CHAR;
      return s.replace(new RegExp(tickChar, "g"), "");
    }
    exports.removeTicks = removeTicks;
    function flattenObjectDeep(value) {
      if (!_.isPlainObject(value))
        return value;
      const flattenedObj = {};
      function flattenObject(obj, subPath) {
        Object.keys(obj).forEach((key) => {
          const pathToProperty = subPath ? `${subPath}.${key}` : key;
          if (typeof obj[key] === "object" && obj[key] !== null) {
            flattenObject(obj[key], pathToProperty);
          } else {
            flattenedObj[pathToProperty] = _.get(obj, key);
          }
        });
        return flattenedObj;
      }
      return flattenObject(value, void 0);
    }
    exports.flattenObjectDeep = flattenObjectDeep;
    var SequelizeMethod = class {
    };
    exports.SequelizeMethod = SequelizeMethod;
    var Fn = class extends SequelizeMethod {
      constructor(fn2, args) {
        super();
        this.fn = fn2;
        this.args = args;
      }
      clone() {
        return new Fn(this.fn, this.args);
      }
    };
    exports.Fn = Fn;
    var Col = class extends SequelizeMethod {
      constructor(col2, ...args) {
        super();
        if (args.length > 0) {
          col2 = args;
        }
        this.col = col2;
      }
    };
    exports.Col = Col;
    var Cast = class extends SequelizeMethod {
      constructor(val, type, json2) {
        super();
        this.val = val;
        this.type = (type || "").trim();
        this.json = json2 || false;
      }
    };
    exports.Cast = Cast;
    var Literal = class extends SequelizeMethod {
      constructor(val) {
        super();
        this.val = val;
      }
    };
    exports.Literal = Literal;
    var Json = class extends SequelizeMethod {
      constructor(conditionsOrPath, value) {
        super();
        if (_.isObject(conditionsOrPath)) {
          this.conditions = conditionsOrPath;
        } else {
          this.path = conditionsOrPath;
          if (value) {
            this.value = value;
          }
        }
      }
    };
    exports.Json = Json;
    var Where = class extends SequelizeMethod {
      constructor(attribute, comparator, logic) {
        super();
        if (logic === void 0) {
          logic = comparator;
          comparator = "=";
        }
        this.attribute = attribute;
        this.comparator = comparator;
        this.logic = logic;
      }
    };
    exports.Where = Where;
    function getOperators(obj) {
      return Object.getOwnPropertySymbols(obj).filter((s) => operatorsSet.has(s));
    }
    exports.getOperators = getOperators;
    function getComplexKeys(obj) {
      return getOperators(obj).concat(Object.keys(obj));
    }
    exports.getComplexKeys = getComplexKeys;
    function getComplexSize(obj) {
      return Array.isArray(obj) ? obj.length : getComplexKeys(obj).length;
    }
    exports.getComplexSize = getComplexSize;
    function isWhereEmpty(obj) {
      return !!obj && _.isEmpty(obj) && getOperators(obj).length === 0;
    }
    exports.isWhereEmpty = isWhereEmpty;
    function generateEnumName(tableName, columnName) {
      return `enum_${tableName}_${columnName}`;
    }
    exports.generateEnumName = generateEnumName;
    function camelizeObjectKeys(obj) {
      const newObj = new Object();
      Object.keys(obj).forEach((key) => {
        newObj[camelize(key)] = obj[key];
      });
      return newObj;
    }
    exports.camelizeObjectKeys = camelizeObjectKeys;
    function defaults(object, ...sources) {
      object = Object(object);
      sources.forEach((source) => {
        if (source) {
          source = Object(source);
          getComplexKeys(source).forEach((key) => {
            const value = object[key];
            if (value === void 0 || _.eq(value, Object.prototype[key]) && !Object.prototype.hasOwnProperty.call(object, key)) {
              object[key] = source[key];
            }
          });
        }
      });
      return object;
    }
    exports.defaults = defaults;
    function nameIndex(index, tableName) {
      if (tableName.tableName)
        tableName = tableName.tableName;
      if (!Object.prototype.hasOwnProperty.call(index, "name")) {
        const fields = index.fields.map((field) => typeof field === "string" ? field : field.name || field.attribute);
        index.name = underscore(`${tableName}_${fields.join("_")}`);
      }
      return index;
    }
    exports.nameIndex = nameIndex;
    function intersects(arr1, arr2) {
      return arr1.some((v) => arr2.includes(v));
    }
    exports.intersects = intersects;
    function safeStringifyJson(value) {
      return JSON.stringify(value, (key, value2) => {
        if (typeof value2 === "bigint") {
          return String(value2);
        }
        return value2;
      });
    }
    exports.safeStringifyJson = safeStringifyJson;
  }
});

// node_modules/dottie/dottie.js
var require_dottie = __commonJS({
  "node_modules/dottie/dottie.js"(exports, module) {
    (function(undefined2) {
      var root = this;
      var hasOwnProp = Object.prototype.hasOwnProperty;
      var reverseDupArray = function(array) {
        var result = new Array(array.length);
        var index = array.length;
        var arrayMaxIndex = index - 1;
        while (index--) {
          result[arrayMaxIndex - index] = array[index];
        }
        return result;
      };
      var Dottie = function() {
        var args = Array.prototype.slice.call(arguments);
        if (args.length == 2) {
          return Dottie.find.apply(this, args);
        }
        return Dottie.transform.apply(this, args);
      };
      Dottie.find = function(path, object) {
        return Dottie.get(object, path);
      };
      Dottie.memoizePath = true;
      var memoized = {};
      Dottie.get = function(object, path, defaultVal) {
        if (object === undefined2 || object === null || path === undefined2 || path === null) {
          return defaultVal;
        }
        var names;
        if (typeof path === "string") {
          if (Dottie.memoizePath) {
            if (memoized[path]) {
              names = memoized[path].slice(0);
            } else {
              names = path.split(".").reverse();
              memoized[path] = names.slice(0);
            }
          } else {
            names = path.split(".").reverse();
          }
        } else if (Array.isArray(path)) {
          names = reverseDupArray(path);
        }
        while (names.length && (object = object[names.pop()]) !== undefined2 && object !== null)
          ;
        if (object === null && names.length)
          object = undefined2;
        return object === undefined2 ? defaultVal : object;
      };
      Dottie.exists = function(object, path) {
        return Dottie.get(object, path) !== undefined2;
      };
      Dottie.set = function(object, path, value, options) {
        var pieces = Array.isArray(path) ? path : path.split("."), current = object, piece, length = pieces.length;
        if (typeof current !== "object") {
          throw new Error("Parent is not an object.");
        }
        for (var index = 0; index < length; index++) {
          piece = pieces[index];
          if (!hasOwnProp.call(current, piece) || current[piece] === undefined2 || typeof current[piece] !== "object" && options && options.force === true) {
            current[piece] = {};
          }
          if (index == length - 1) {
            current[piece] = value;
          } else {
            if (typeof current[piece] !== "object") {
              throw new Error('Target key "' + piece + '" is not suitable for a nested value. (It is in use as non-object. Set `force` to `true` to override.)');
            }
            current = current[piece];
          }
        }
        current[piece] = value;
      };
      Dottie["default"] = function(object, path, value) {
        if (Dottie.get(object, path) === undefined2) {
          Dottie.set(object, path, value);
        }
      };
      Dottie.transform = function Dottie$transformfunction(object, options) {
        if (Array.isArray(object)) {
          return object.map(function(o) {
            return Dottie.transform(o, options);
          });
        }
        options = options || {};
        options.delimiter = options.delimiter || ".";
        var pieces, piecesLength, piece, current, transformed = {}, key, keys = Object.keys(object), length = keys.length, i;
        for (i = 0; i < length; i++) {
          key = keys[i];
          if (key.indexOf(options.delimiter) !== -1) {
            pieces = key.split(options.delimiter);
            piecesLength = pieces.length;
            current = transformed;
            for (var index = 0; index < piecesLength; index++) {
              piece = pieces[index];
              if (index != piecesLength - 1 && !current.hasOwnProperty(piece)) {
                current[piece] = {};
              }
              if (index == piecesLength - 1) {
                current[piece] = object[key];
              }
              current = current[piece];
              if (current === null) {
                break;
              }
            }
          } else {
            transformed[key] = object[key];
          }
        }
        return transformed;
      };
      Dottie.flatten = function(object, seperator) {
        if (typeof seperator === "undefined")
          seperator = ".";
        var flattened = {}, current, nested;
        for (var key in object) {
          if (hasOwnProp.call(object, key)) {
            current = object[key];
            if (Object.prototype.toString.call(current) === "[object Object]") {
              nested = Dottie.flatten(current, seperator);
              for (var _key in nested) {
                flattened[key + seperator + _key] = nested[_key];
              }
            } else {
              flattened[key] = current;
            }
          }
        }
        return flattened;
      };
      Dottie.paths = function(object, prefixes) {
        var paths = [];
        var value;
        var key;
        prefixes = prefixes || [];
        if (typeof object === "object") {
          for (key in object) {
            value = object[key];
            if (typeof value === "object" && value !== null) {
              paths = paths.concat(Dottie.paths(value, prefixes.concat([key])));
            } else {
              paths.push(prefixes.concat(key).join("."));
            }
          }
        } else {
          throw new Error("Paths was called with non-object argument.");
        }
        return paths;
      };
      if (typeof module !== "undefined" && module.exports) {
        exports = module.exports = Dottie;
      } else {
        root["Dottie"] = Dottie;
        root["Dot"] = Dottie;
        if (typeof define === "function") {
          define([], function() {
            return Dottie;
          });
        }
      }
    })();
  }
});

// node_modules/sequelize/lib/associations/helpers.js
var require_helpers = __commonJS({
  "node_modules/sequelize/lib/associations/helpers.js"(exports) {
    "use strict";
    function checkNamingCollision(association) {
      if (Object.prototype.hasOwnProperty.call(association.source.rawAttributes, association.as)) {
        throw new Error(`Naming collision between attribute '${association.as}' and association '${association.as}' on model ${association.source.name}. To remedy this, change either foreignKey or as in your association definition`);
      }
    }
    exports.checkNamingCollision = checkNamingCollision;
    function addForeignKeyConstraints(newAttribute, source, target, options, key) {
      if (options.foreignKeyConstraint || options.onDelete || options.onUpdate) {
        const primaryKeys = Object.keys(source.primaryKeys).map((primaryKeyAttribute) => source.rawAttributes[primaryKeyAttribute].field || primaryKeyAttribute);
        if (primaryKeys.length === 1 || !primaryKeys.includes(key)) {
          newAttribute.references = {
            model: source.getTableName(),
            key: key || primaryKeys[0]
          };
          newAttribute.onDelete = options.onDelete;
          newAttribute.onUpdate = options.onUpdate;
        }
      }
    }
    exports.addForeignKeyConstraints = addForeignKeyConstraints;
    function mixinMethods(association, obj, methods, aliases) {
      aliases = aliases || {};
      for (const method of methods) {
        if (!Object.prototype.hasOwnProperty.call(obj, association.accessors[method])) {
          const realMethod = aliases[method] || method;
          obj[association.accessors[method]] = function() {
            return association[realMethod](this, ...Array.from(arguments));
          };
        }
      }
    }
    exports.mixinMethods = mixinMethods;
  }
});

// node_modules/sequelize/lib/associations/base.js
var require_base = __commonJS({
  "node_modules/sequelize/lib/associations/base.js"(exports, module) {
    "use strict";
    var { AssociationError: AssociationError2 } = require_errors();
    var Association2 = class {
      constructor(source, target, options = {}) {
        this.source = source;
        this.target = target;
        this.options = options;
        this.scope = options.scope;
        this.isSelfAssociation = this.source === this.target;
        this.as = options.as;
        this.associationType = "";
        if (source.hasAlias(options.as)) {
          throw new AssociationError2(`You have used the alias ${options.as} in two separate associations. Aliased associations must have unique aliases.`);
        }
      }
      toInstanceArray(input) {
        if (!Array.isArray(input)) {
          input = [input];
        }
        return input.map((element) => {
          if (element instanceof this.target)
            return element;
          const tmpInstance = {};
          tmpInstance[this.target.primaryKeyAttribute] = element;
          return this.target.build(tmpInstance, { isNewRecord: false });
        });
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return this.as;
      }
    };
    module.exports = Association2;
  }
});

// node_modules/sequelize/lib/associations/belongs-to.js
var require_belongs_to = __commonJS({
  "node_modules/sequelize/lib/associations/belongs-to.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var Utils2 = require_utils();
    var Helpers = require_helpers();
    var _ = require_lodash();
    var Association2 = require_base();
    var Op2 = require_operators();
    var BelongsTo2 = class extends Association2 {
      constructor(source, target, options) {
        super(source, target, options);
        this.associationType = "BelongsTo";
        this.isSingleAssociation = true;
        this.foreignKeyAttribute = {};
        if (this.as) {
          this.isAliased = true;
          this.options.name = {
            singular: this.as
          };
        } else {
          this.as = this.target.options.name.singular;
          this.options.name = this.target.options.name;
        }
        if (_.isObject(this.options.foreignKey)) {
          this.foreignKeyAttribute = this.options.foreignKey;
          this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;
        } else if (this.options.foreignKey) {
          this.foreignKey = this.options.foreignKey;
        }
        if (!this.foreignKey) {
          this.foreignKey = Utils2.camelize([
            this.as,
            this.target.primaryKeyAttribute
          ].join("_"));
        }
        this.identifier = this.foreignKey;
        if (this.source.rawAttributes[this.identifier]) {
          this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;
        }
        if (this.options.targetKey && !this.target.rawAttributes[this.options.targetKey]) {
          throw new Error(`Unknown attribute "${this.options.targetKey}" passed as targetKey, define this attribute on model "${this.target.name}" first`);
        }
        this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;
        this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;
        this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;
        this.targetIdentifier = this.targetKey;
        this.associationAccessor = this.as;
        this.options.useHooks = options.useHooks;
        const singular2 = _.upperFirst(this.options.name.singular);
        this.accessors = {
          get: `get${singular2}`,
          set: `set${singular2}`,
          create: `create${singular2}`
        };
      }
      _injectAttributes() {
        const newAttributes = {
          [this.foreignKey]: __spreadValues({
            type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,
            allowNull: true
          }, this.foreignKeyAttribute)
        };
        if (this.options.constraints !== false) {
          const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];
          this.options.onDelete = this.options.onDelete || (source.allowNull ? "SET NULL" : "NO ACTION");
          this.options.onUpdate = this.options.onUpdate || "CASCADE";
        }
        Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);
        Utils2.mergeDefaults(this.source.rawAttributes, newAttributes);
        this.source.refreshAttributes();
        this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;
        Helpers.checkNamingCollision(this);
        return this;
      }
      mixin(obj) {
        const methods = ["get", "set", "create"];
        Helpers.mixinMethods(this, obj, methods);
      }
      async get(instances, options) {
        const where2 = {};
        let Target = this.target;
        let instance;
        options = Utils2.cloneDeep(options);
        if (Object.prototype.hasOwnProperty.call(options, "scope")) {
          if (!options.scope) {
            Target = Target.unscoped();
          } else {
            Target = Target.scope(options.scope);
          }
        }
        if (Object.prototype.hasOwnProperty.call(options, "schema")) {
          Target = Target.schema(options.schema, options.schemaDelimiter);
        }
        if (!Array.isArray(instances)) {
          instance = instances;
          instances = void 0;
        }
        if (instances) {
          where2[this.targetKey] = {
            [Op2.in]: instances.map((_instance) => _instance.get(this.foreignKey))
          };
        } else {
          if (this.targetKeyIsPrimary && !options.where) {
            return Target.findByPk(instance.get(this.foreignKey), options);
          }
          where2[this.targetKey] = instance.get(this.foreignKey);
          options.limit = null;
        }
        options.where = options.where ? { [Op2.and]: [where2, options.where] } : where2;
        if (instances) {
          const results = await Target.findAll(options);
          const result = {};
          for (const _instance of instances) {
            result[_instance.get(this.foreignKey, { raw: true })] = null;
          }
          for (const _instance of results) {
            result[_instance.get(this.targetKey, { raw: true })] = _instance;
          }
          return result;
        }
        return Target.findOne(options);
      }
      async set(sourceInstance, associatedInstance, options = {}) {
        let value = associatedInstance;
        if (associatedInstance instanceof this.target) {
          value = associatedInstance[this.targetKey];
        }
        sourceInstance.set(this.foreignKey, value);
        if (options.save === false)
          return;
        options = __spreadValues({
          fields: [this.foreignKey],
          allowNull: [this.foreignKey],
          association: true
        }, options);
        return await sourceInstance.save(options);
      }
      async create(sourceInstance, values, options) {
        values = values || {};
        options = options || {};
        const newAssociatedObject = await this.target.create(values, options);
        await sourceInstance[this.accessors.set](newAssociatedObject, options);
        return newAssociatedObject;
      }
      verifyAssociationAlias(alias) {
        if (typeof alias === "string") {
          return this.as === alias;
        }
        if (alias && alias.singular) {
          return this.as === alias.singular;
        }
        return !this.isAliased;
      }
    };
    module.exports = BelongsTo2;
    module.exports.BelongsTo = BelongsTo2;
    module.exports.default = BelongsTo2;
  }
});

// node_modules/sequelize/lib/associations/has-many.js
var require_has_many = __commonJS({
  "node_modules/sequelize/lib/associations/has-many.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var Utils2 = require_utils();
    var Helpers = require_helpers();
    var _ = require_lodash();
    var Association2 = require_base();
    var Op2 = require_operators();
    var HasMany2 = class extends Association2 {
      constructor(source, target, options) {
        super(source, target, options);
        this.associationType = "HasMany";
        this.targetAssociation = null;
        this.sequelize = source.sequelize;
        this.isMultiAssociation = true;
        this.foreignKeyAttribute = {};
        if (this.options.through) {
          throw new Error("N:M associations are not supported with hasMany. Use belongsToMany instead");
        }
        if (this.isSelfAssociation) {
          this.targetAssociation = this;
        }
        if (this.as) {
          this.isAliased = true;
          if (_.isPlainObject(this.as)) {
            this.options.name = this.as;
            this.as = this.as.plural;
          } else {
            this.options.name = {
              plural: this.as,
              singular: Utils2.singularize(this.as)
            };
          }
        } else {
          this.as = this.target.options.name.plural;
          this.options.name = this.target.options.name;
        }
        if (_.isObject(this.options.foreignKey)) {
          this.foreignKeyAttribute = this.options.foreignKey;
          this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;
        } else if (this.options.foreignKey) {
          this.foreignKey = this.options.foreignKey;
        }
        if (!this.foreignKey) {
          this.foreignKey = Utils2.camelize([
            this.source.options.name.singular,
            this.source.primaryKeyAttribute
          ].join("_"));
        }
        if (this.target.rawAttributes[this.foreignKey]) {
          this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;
          this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;
        }
        this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;
        if (this.source.rawAttributes[this.sourceKey]) {
          this.sourceKeyAttribute = this.sourceKey;
          this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;
        } else {
          this.sourceKeyAttribute = this.source.primaryKeyAttribute;
          this.sourceKeyField = this.source.primaryKeyField;
        }
        const plural = _.upperFirst(this.options.name.plural);
        const singular2 = _.upperFirst(this.options.name.singular);
        this.associationAccessor = this.as;
        this.accessors = {
          get: `get${plural}`,
          set: `set${plural}`,
          addMultiple: `add${plural}`,
          add: `add${singular2}`,
          create: `create${singular2}`,
          remove: `remove${singular2}`,
          removeMultiple: `remove${plural}`,
          hasSingle: `has${singular2}`,
          hasAll: `has${plural}`,
          count: `count${plural}`
        };
      }
      _injectAttributes() {
        const newAttributes = {
          [this.foreignKey]: __spreadValues({
            type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,
            allowNull: true
          }, this.foreignKeyAttribute)
        };
        const constraintOptions = __spreadValues({}, this.options);
        if (this.options.constraints !== false) {
          const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];
          constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? "SET NULL" : "CASCADE");
          constraintOptions.onUpdate = constraintOptions.onUpdate || "CASCADE";
        }
        Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);
        Utils2.mergeDefaults(this.target.rawAttributes, newAttributes);
        this.target.refreshAttributes();
        this.source.refreshAttributes();
        this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;
        this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;
        this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;
        Helpers.checkNamingCollision(this);
        return this;
      }
      mixin(obj) {
        const methods = ["get", "count", "hasSingle", "hasAll", "set", "add", "addMultiple", "remove", "removeMultiple", "create"];
        const aliases = {
          hasSingle: "has",
          hasAll: "has",
          addMultiple: "add",
          removeMultiple: "remove"
        };
        Helpers.mixinMethods(this, obj, methods, aliases);
      }
      async get(instances, options = {}) {
        const where2 = {};
        let Model3 = this.target;
        let instance;
        let values;
        if (!Array.isArray(instances)) {
          instance = instances;
          instances = void 0;
        }
        options = __spreadValues({}, options);
        if (this.scope) {
          Object.assign(where2, this.scope);
        }
        if (instances) {
          values = instances.map((_instance) => _instance.get(this.sourceKey, { raw: true }));
          if (options.limit && instances.length > 1) {
            options.groupedLimit = {
              limit: options.limit,
              on: this,
              values
            };
            delete options.limit;
          } else {
            where2[this.foreignKey] = {
              [Op2.in]: values
            };
            delete options.groupedLimit;
          }
        } else {
          where2[this.foreignKey] = instance.get(this.sourceKey, { raw: true });
        }
        options.where = options.where ? { [Op2.and]: [where2, options.where] } : where2;
        if (Object.prototype.hasOwnProperty.call(options, "scope")) {
          if (!options.scope) {
            Model3 = Model3.unscoped();
          } else {
            Model3 = Model3.scope(options.scope);
          }
        }
        if (Object.prototype.hasOwnProperty.call(options, "schema")) {
          Model3 = Model3.schema(options.schema, options.schemaDelimiter);
        }
        const results = await Model3.findAll(options);
        if (instance)
          return results;
        const result = {};
        for (const _instance of instances) {
          result[_instance.get(this.sourceKey, { raw: true })] = [];
        }
        for (const _instance of results) {
          result[_instance.get(this.foreignKey, { raw: true })].push(_instance);
        }
        return result;
      }
      async count(instance, options) {
        options = Utils2.cloneDeep(options);
        options.attributes = [
          [
            this.sequelize.fn("COUNT", this.sequelize.col(`${this.target.name}.${this.target.primaryKeyField}`)),
            "count"
          ]
        ];
        options.raw = true;
        options.plain = true;
        const result = await this.get(instance, options);
        return parseInt(result.count, 10);
      }
      async has(sourceInstance, targetInstances, options) {
        const where2 = {};
        if (!Array.isArray(targetInstances)) {
          targetInstances = [targetInstances];
        }
        options = __spreadProps(__spreadValues({}, options), {
          scope: false,
          attributes: [this.target.primaryKeyAttribute],
          raw: true
        });
        where2[Op2.or] = targetInstances.map((instance) => {
          if (instance instanceof this.target) {
            return instance.where();
          }
          return {
            [this.target.primaryKeyAttribute]: instance
          };
        });
        options.where = {
          [Op2.and]: [
            where2,
            options.where
          ]
        };
        const associatedObjects = await this.get(sourceInstance, options);
        return associatedObjects.length === targetInstances.length;
      }
      async set(sourceInstance, targetInstances, options) {
        if (targetInstances === null) {
          targetInstances = [];
        } else {
          targetInstances = this.toInstanceArray(targetInstances);
        }
        const oldAssociations = await this.get(sourceInstance, __spreadProps(__spreadValues({}, options), { scope: false, raw: true }));
        const promises = [];
        const obsoleteAssociations = oldAssociations.filter((old) => !targetInstances.find((obj) => obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]));
        const unassociatedObjects = targetInstances.filter((obj) => !oldAssociations.find((old) => obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]));
        let updateWhere;
        let update;
        if (obsoleteAssociations.length > 0) {
          update = {};
          update[this.foreignKey] = null;
          updateWhere = {
            [this.target.primaryKeyAttribute]: obsoleteAssociations.map((associatedObject) => associatedObject[this.target.primaryKeyAttribute])
          };
          promises.push(this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {
            where: updateWhere
          })));
        }
        if (unassociatedObjects.length > 0) {
          updateWhere = {};
          update = {};
          update[this.foreignKey] = sourceInstance.get(this.sourceKey);
          Object.assign(update, this.scope);
          updateWhere[this.target.primaryKeyAttribute] = unassociatedObjects.map((unassociatedObject) => unassociatedObject[this.target.primaryKeyAttribute]);
          promises.push(this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), {
            where: updateWhere
          })));
        }
        await Promise.all(promises);
        return sourceInstance;
      }
      async add(sourceInstance, targetInstances, options = {}) {
        if (!targetInstances)
          return Promise.resolve();
        targetInstances = this.toInstanceArray(targetInstances);
        const update = __spreadValues({
          [this.foreignKey]: sourceInstance.get(this.sourceKey)
        }, this.scope);
        const where2 = {
          [this.target.primaryKeyAttribute]: targetInstances.map((unassociatedObject) => unassociatedObject.get(this.target.primaryKeyAttribute))
        };
        await this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), { where: where2 }));
        return sourceInstance;
      }
      async remove(sourceInstance, targetInstances, options = {}) {
        const update = {
          [this.foreignKey]: null
        };
        targetInstances = this.toInstanceArray(targetInstances);
        const where2 = {
          [this.foreignKey]: sourceInstance.get(this.sourceKey),
          [this.target.primaryKeyAttribute]: targetInstances.map((targetInstance) => targetInstance.get(this.target.primaryKeyAttribute))
        };
        await this.target.unscoped().update(update, __spreadProps(__spreadValues({}, options), { where: where2 }));
        return this;
      }
      async create(sourceInstance, values, options = {}) {
        if (Array.isArray(options)) {
          options = {
            fields: options
          };
        }
        if (values === void 0) {
          values = {};
        }
        if (this.scope) {
          for (const attribute of Object.keys(this.scope)) {
            values[attribute] = this.scope[attribute];
            if (options.fields)
              options.fields.push(attribute);
          }
        }
        values[this.foreignKey] = sourceInstance.get(this.sourceKey);
        if (options.fields)
          options.fields.push(this.foreignKey);
        return await this.target.create(values, options);
      }
      verifyAssociationAlias(alias) {
        if (typeof alias === "string") {
          return this.as === alias;
        }
        if (alias && alias.plural) {
          return this.as === alias.plural;
        }
        return !this.isAliased;
      }
    };
    module.exports = HasMany2;
    module.exports.HasMany = HasMany2;
    module.exports.default = HasMany2;
  }
});

// node_modules/sequelize/lib/associations/has-one.js
var require_has_one = __commonJS({
  "node_modules/sequelize/lib/associations/has-one.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var Utils2 = require_utils();
    var Helpers = require_helpers();
    var _ = require_lodash();
    var Association2 = require_base();
    var Op2 = require_operators();
    var HasOne2 = class extends Association2 {
      constructor(source, target, options) {
        super(source, target, options);
        this.associationType = "HasOne";
        this.isSingleAssociation = true;
        this.foreignKeyAttribute = {};
        if (this.as) {
          this.isAliased = true;
          this.options.name = {
            singular: this.as
          };
        } else {
          this.as = this.target.options.name.singular;
          this.options.name = this.target.options.name;
        }
        if (_.isObject(this.options.foreignKey)) {
          this.foreignKeyAttribute = this.options.foreignKey;
          this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;
        } else if (this.options.foreignKey) {
          this.foreignKey = this.options.foreignKey;
        }
        if (!this.foreignKey) {
          this.foreignKey = Utils2.camelize([
            Utils2.singularize(this.options.as || this.source.name),
            this.source.primaryKeyAttribute
          ].join("_"));
        }
        if (this.options.sourceKey && !this.source.rawAttributes[this.options.sourceKey]) {
          throw new Error(`Unknown attribute "${this.options.sourceKey}" passed as sourceKey, define this attribute on model "${this.source.name}" first`);
        }
        this.sourceKey = this.sourceKeyAttribute = this.options.sourceKey || this.source.primaryKeyAttribute;
        this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;
        this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute;
        this.associationAccessor = this.as;
        this.options.useHooks = options.useHooks;
        if (this.target.rawAttributes[this.foreignKey]) {
          this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;
        }
        const singular2 = _.upperFirst(this.options.name.singular);
        this.accessors = {
          get: `get${singular2}`,
          set: `set${singular2}`,
          create: `create${singular2}`
        };
      }
      _injectAttributes() {
        const newAttributes = {
          [this.foreignKey]: __spreadValues({
            type: this.options.keyType || this.source.rawAttributes[this.sourceKey].type,
            allowNull: true
          }, this.foreignKeyAttribute)
        };
        if (this.options.constraints !== false) {
          const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];
          this.options.onDelete = this.options.onDelete || (target.allowNull ? "SET NULL" : "CASCADE");
          this.options.onUpdate = this.options.onUpdate || "CASCADE";
        }
        Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, this.options, this.sourceKeyField);
        Utils2.mergeDefaults(this.target.rawAttributes, newAttributes);
        this.target.refreshAttributes();
        this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;
        Helpers.checkNamingCollision(this);
        return this;
      }
      mixin(obj) {
        const methods = ["get", "set", "create"];
        Helpers.mixinMethods(this, obj, methods);
      }
      async get(instances, options) {
        const where2 = {};
        let Target = this.target;
        let instance;
        options = Utils2.cloneDeep(options);
        if (Object.prototype.hasOwnProperty.call(options, "scope")) {
          if (!options.scope) {
            Target = Target.unscoped();
          } else {
            Target = Target.scope(options.scope);
          }
        }
        if (Object.prototype.hasOwnProperty.call(options, "schema")) {
          Target = Target.schema(options.schema, options.schemaDelimiter);
        }
        if (!Array.isArray(instances)) {
          instance = instances;
          instances = void 0;
        }
        if (instances) {
          where2[this.foreignKey] = {
            [Op2.in]: instances.map((_instance) => _instance.get(this.sourceKey))
          };
        } else {
          where2[this.foreignKey] = instance.get(this.sourceKey);
        }
        if (this.scope) {
          Object.assign(where2, this.scope);
        }
        options.where = options.where ? { [Op2.and]: [where2, options.where] } : where2;
        if (instances) {
          const results = await Target.findAll(options);
          const result = {};
          for (const _instance of instances) {
            result[_instance.get(this.sourceKey, { raw: true })] = null;
          }
          for (const _instance of results) {
            result[_instance.get(this.foreignKey, { raw: true })] = _instance;
          }
          return result;
        }
        return Target.findOne(options);
      }
      async set(sourceInstance, associatedInstance, options) {
        options = __spreadProps(__spreadValues({}, options), { scope: false });
        const oldInstance = await sourceInstance[this.accessors.get](options);
        const alreadyAssociated = oldInstance && associatedInstance && this.target.primaryKeyAttributes.every((attribute) => oldInstance.get(attribute, { raw: true }) === (associatedInstance.get ? associatedInstance.get(attribute, { raw: true }) : associatedInstance));
        if (oldInstance && !alreadyAssociated) {
          oldInstance[this.foreignKey] = null;
          await oldInstance.save(__spreadProps(__spreadValues({}, options), {
            fields: [this.foreignKey],
            allowNull: [this.foreignKey],
            association: true
          }));
        }
        if (associatedInstance && !alreadyAssociated) {
          if (!(associatedInstance instanceof this.target)) {
            const tmpInstance = {};
            tmpInstance[this.target.primaryKeyAttribute] = associatedInstance;
            associatedInstance = this.target.build(tmpInstance, {
              isNewRecord: false
            });
          }
          Object.assign(associatedInstance, this.scope);
          associatedInstance.set(this.foreignKey, sourceInstance.get(this.sourceKeyAttribute));
          return associatedInstance.save(options);
        }
        return null;
      }
      async create(sourceInstance, values, options) {
        values = values || {};
        options = options || {};
        if (this.scope) {
          for (const attribute of Object.keys(this.scope)) {
            values[attribute] = this.scope[attribute];
            if (options.fields) {
              options.fields.push(attribute);
            }
          }
        }
        values[this.foreignKey] = sourceInstance.get(this.sourceKeyAttribute);
        if (options.fields) {
          options.fields.push(this.foreignKey);
        }
        return await this.target.create(values, options);
      }
      verifyAssociationAlias(alias) {
        if (typeof alias === "string") {
          return this.as === alias;
        }
        if (alias && alias.singular) {
          return this.as === alias.singular;
        }
        return !this.isAliased;
      }
    };
    module.exports = HasOne2;
  }
});

// node_modules/sequelize/lib/associations/belongs-to-many.js
var require_belongs_to_many = __commonJS({
  "node_modules/sequelize/lib/associations/belongs-to-many.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var Utils2 = require_utils();
    var Helpers = require_helpers();
    var _ = require_lodash();
    var Association2 = require_base();
    var BelongsTo2 = require_belongs_to();
    var HasMany2 = require_has_many();
    var HasOne2 = require_has_one();
    var AssociationError2 = require_errors().AssociationError;
    var EmptyResultError2 = require_errors().EmptyResultError;
    var Op2 = require_operators();
    var BelongsToMany2 = class extends Association2 {
      constructor(source, target, options) {
        super(source, target, options);
        if (this.options.through === void 0 || this.options.through === true || this.options.through === null) {
          throw new AssociationError2(`${source.name}.belongsToMany(${target.name}) requires through option, pass either a string or a model`);
        }
        if (!this.options.through.model) {
          this.options.through = {
            model: options.through
          };
        }
        this.associationType = "BelongsToMany";
        this.targetAssociation = null;
        this.sequelize = source.sequelize;
        this.through = __spreadValues({}, this.options.through);
        this.isMultiAssociation = true;
        this.doubleLinked = false;
        if (!this.as && this.isSelfAssociation) {
          throw new AssociationError2("'as' must be defined for many-to-many self-associations");
        }
        if (this.as) {
          this.isAliased = true;
          if (_.isPlainObject(this.as)) {
            this.options.name = this.as;
            this.as = this.as.plural;
          } else {
            this.options.name = {
              plural: this.as,
              singular: Utils2.singularize(this.as)
            };
          }
        } else {
          this.as = this.target.options.name.plural;
          this.options.name = this.target.options.name;
        }
        this.combinedTableName = Utils2.combineTableNames(this.source.tableName, this.isSelfAssociation ? this.as || this.target.tableName : this.target.tableName);
        if (this.isSelfAssociation) {
          this.targetAssociation = this;
        }
        _.each(this.target.associations, (association) => {
          if (association.associationType !== "BelongsToMany")
            return;
          if (association.target !== this.source)
            return;
          if (this.options.through.model === association.options.through.model) {
            this.paired = association;
            association.paired = this;
          }
        });
        this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;
        this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;
        if (this.options.targetKey) {
          this.targetKey = this.options.targetKey;
          this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;
        } else {
          this.targetKeyDefault = true;
          this.targetKey = this.target.primaryKeyAttribute;
          this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;
        }
        this._createForeignAndOtherKeys();
        if (typeof this.through.model === "string") {
          if (!this.sequelize.isDefined(this.through.model)) {
            this.through.model = this.sequelize.define(this.through.model, {}, Object.assign(this.options, {
              tableName: this.through.model,
              indexes: [],
              paranoid: this.through.paranoid ? this.through.paranoid : false,
              validate: {}
            }));
          } else {
            this.through.model = this.sequelize.model(this.through.model);
          }
        }
        Object.assign(this.options, _.pick(this.through.model.options, [
          "timestamps",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "paranoid"
        ]));
        if (this.paired) {
          let needInjectPaired = false;
          if (this.targetKeyDefault) {
            this.targetKey = this.paired.sourceKey;
            this.targetKeyField = this.paired.sourceKeyField;
            this._createForeignAndOtherKeys();
          }
          if (this.paired.targetKeyDefault) {
            if (this.paired.targetKey !== this.sourceKey) {
              delete this.through.model.rawAttributes[this.paired.otherKey];
              this.paired.targetKey = this.sourceKey;
              this.paired.targetKeyField = this.sourceKeyField;
              this.paired._createForeignAndOtherKeys();
              needInjectPaired = true;
            }
          }
          if (this.otherKeyDefault) {
            this.otherKey = this.paired.foreignKey;
          }
          if (this.paired.otherKeyDefault) {
            if (this.paired.otherKey !== this.foreignKey) {
              delete this.through.model.rawAttributes[this.paired.otherKey];
              this.paired.otherKey = this.foreignKey;
              needInjectPaired = true;
            }
          }
          if (needInjectPaired) {
            this.paired._injectAttributes();
          }
        }
        if (this.through) {
          this.throughModel = this.through.model;
        }
        this.options.tableName = this.combinedName = this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model;
        this.associationAccessor = this.as;
        const plural = _.upperFirst(this.options.name.plural);
        const singular2 = _.upperFirst(this.options.name.singular);
        this.accessors = {
          get: `get${plural}`,
          set: `set${plural}`,
          addMultiple: `add${plural}`,
          add: `add${singular2}`,
          create: `create${singular2}`,
          remove: `remove${singular2}`,
          removeMultiple: `remove${plural}`,
          hasSingle: `has${singular2}`,
          hasAll: `has${plural}`,
          count: `count${plural}`
        };
      }
      _createForeignAndOtherKeys() {
        if (_.isObject(this.options.foreignKey)) {
          this.foreignKeyAttribute = this.options.foreignKey;
          this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;
        } else {
          this.foreignKeyAttribute = {};
          this.foreignKey = this.options.foreignKey || Utils2.camelize([
            this.source.options.name.singular,
            this.sourceKey
          ].join("_"));
        }
        if (_.isObject(this.options.otherKey)) {
          this.otherKeyAttribute = this.options.otherKey;
          this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;
        } else {
          if (!this.options.otherKey) {
            this.otherKeyDefault = true;
          }
          this.otherKeyAttribute = {};
          this.otherKey = this.options.otherKey || Utils2.camelize([
            this.isSelfAssociation ? Utils2.singularize(this.as) : this.target.options.name.singular,
            this.targetKey
          ].join("_"));
        }
      }
      _injectAttributes() {
        this.identifier = this.foreignKey;
        this.foreignIdentifier = this.otherKey;
        _.each(this.through.model.rawAttributes, (attribute, attributeName) => {
          if (attribute.primaryKey === true && attribute._autoGenerated === true) {
            if ([this.foreignKey, this.otherKey].includes(attributeName)) {
              attribute.primaryKey = false;
            } else {
              delete this.through.model.rawAttributes[attributeName];
            }
            this.primaryKeyDeleted = true;
          }
        });
        const sourceKey = this.source.rawAttributes[this.sourceKey];
        const sourceKeyType = sourceKey.type;
        const sourceKeyField = this.sourceKeyField;
        const targetKey = this.target.rawAttributes[this.targetKey];
        const targetKeyType = targetKey.type;
        const targetKeyField = this.targetKeyField;
        const sourceAttribute = __spreadValues({ type: sourceKeyType }, this.foreignKeyAttribute);
        const targetAttribute = __spreadValues({ type: targetKeyType }, this.otherKeyAttribute);
        if (this.primaryKeyDeleted === true) {
          targetAttribute.primaryKey = sourceAttribute.primaryKey = true;
        } else if (this.through.unique !== false) {
          let uniqueKey;
          if (typeof this.options.uniqueKey === "string" && this.options.uniqueKey !== "") {
            uniqueKey = this.options.uniqueKey;
          } else {
            uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, "unique"].join("_");
          }
          targetAttribute.unique = sourceAttribute.unique = uniqueKey;
        }
        if (!this.through.model.rawAttributes[this.foreignKey]) {
          this.through.model.rawAttributes[this.foreignKey] = {
            _autoGenerated: true
          };
        }
        if (!this.through.model.rawAttributes[this.otherKey]) {
          this.through.model.rawAttributes[this.otherKey] = {
            _autoGenerated: true
          };
        }
        if (this.options.constraints !== false) {
          sourceAttribute.references = {
            model: this.source.getTableName(),
            key: sourceKeyField
          };
          sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;
          sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;
          if (!sourceAttribute.onDelete)
            sourceAttribute.onDelete = "CASCADE";
          if (!sourceAttribute.onUpdate)
            sourceAttribute.onUpdate = "CASCADE";
          targetAttribute.references = {
            model: this.target.getTableName(),
            key: targetKeyField
          };
          targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;
          targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;
          if (!targetAttribute.onDelete)
            targetAttribute.onDelete = "CASCADE";
          if (!targetAttribute.onUpdate)
            targetAttribute.onUpdate = "CASCADE";
        }
        Object.assign(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);
        Object.assign(this.through.model.rawAttributes[this.otherKey], targetAttribute);
        this.through.model.refreshAttributes();
        this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;
        this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;
        if (this.options.sequelize.options.dialect === "db2" && this.source.rawAttributes[this.sourceKey].primaryKey !== true) {
          this.source.rawAttributes[this.sourceKey].unique = true;
        }
        if (this.paired && !this.paired.foreignIdentifierField) {
          this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;
        }
        this.toSource = new BelongsTo2(this.through.model, this.source, {
          foreignKey: this.foreignKey
        });
        this.manyFromSource = new HasMany2(this.source, this.through.model, {
          foreignKey: this.foreignKey
        });
        this.oneFromSource = new HasOne2(this.source, this.through.model, {
          foreignKey: this.foreignKey,
          sourceKey: this.sourceKey,
          as: this.through.model.name
        });
        this.toTarget = new BelongsTo2(this.through.model, this.target, {
          foreignKey: this.otherKey
        });
        this.manyFromTarget = new HasMany2(this.target, this.through.model, {
          foreignKey: this.otherKey
        });
        this.oneFromTarget = new HasOne2(this.target, this.through.model, {
          foreignKey: this.otherKey,
          sourceKey: this.targetKey,
          as: this.through.model.name
        });
        if (this.paired && this.paired.otherKeyDefault) {
          this.paired.toTarget = new BelongsTo2(this.paired.through.model, this.paired.target, {
            foreignKey: this.paired.otherKey
          });
          this.paired.oneFromTarget = new HasOne2(this.paired.target, this.paired.through.model, {
            foreignKey: this.paired.otherKey,
            sourceKey: this.paired.targetKey,
            as: this.paired.through.model.name
          });
        }
        Helpers.checkNamingCollision(this);
        return this;
      }
      mixin(obj) {
        const methods = ["get", "count", "hasSingle", "hasAll", "set", "add", "addMultiple", "remove", "removeMultiple", "create"];
        const aliases = {
          hasSingle: "has",
          hasAll: "has",
          addMultiple: "add",
          removeMultiple: "remove"
        };
        Helpers.mixinMethods(this, obj, methods, aliases);
      }
      async get(instance, options) {
        options = Utils2.cloneDeep(options) || {};
        const through = this.through;
        let scopeWhere;
        let throughWhere;
        if (this.scope) {
          scopeWhere = __spreadValues({}, this.scope);
        }
        options.where = {
          [Op2.and]: [
            scopeWhere,
            options.where
          ]
        };
        if (Object(through.model) === through.model) {
          throughWhere = {};
          throughWhere[this.foreignKey] = instance.get(this.sourceKey);
          if (through.scope) {
            Object.assign(throughWhere, through.scope);
          }
          if (options.through && options.through.where) {
            throughWhere = {
              [Op2.and]: [throughWhere, options.through.where]
            };
          }
          options.include = options.include || [];
          options.include.push({
            association: this.oneFromTarget,
            attributes: options.joinTableAttributes,
            required: true,
            paranoid: _.get(options.through, "paranoid", true),
            where: throughWhere
          });
        }
        let model = this.target;
        if (Object.prototype.hasOwnProperty.call(options, "scope")) {
          if (!options.scope) {
            model = model.unscoped();
          } else {
            model = model.scope(options.scope);
          }
        }
        if (Object.prototype.hasOwnProperty.call(options, "schema")) {
          model = model.schema(options.schema, options.schemaDelimiter);
        }
        return model.findAll(options);
      }
      async count(instance, options) {
        const sequelize = this.target.sequelize;
        options = Utils2.cloneDeep(options);
        options.attributes = [
          [sequelize.fn("COUNT", sequelize.col([this.target.name, this.targetKeyField].join("."))), "count"]
        ];
        options.joinTableAttributes = [];
        options.raw = true;
        options.plain = true;
        const result = await this.get(instance, options);
        return parseInt(result.count, 10);
      }
      async has(sourceInstance, instances, options) {
        if (!Array.isArray(instances)) {
          instances = [instances];
        }
        options = __spreadProps(__spreadValues({
          raw: true
        }, options), {
          scope: false,
          attributes: [this.targetKey],
          joinTableAttributes: []
        });
        const instancePrimaryKeys = instances.map((instance) => {
          if (instance instanceof this.target) {
            return instance.where();
          }
          return {
            [this.targetKey]: instance
          };
        });
        options.where = {
          [Op2.and]: [
            { [Op2.or]: instancePrimaryKeys },
            options.where
          ]
        };
        const associatedObjects = await this.get(sourceInstance, options);
        return _.differenceWith(instancePrimaryKeys, associatedObjects, (a, b) => _.isEqual(a[this.targetKey], b[this.targetKey])).length === 0;
      }
      async set(sourceInstance, newAssociatedObjects, options) {
        options = options || {};
        const sourceKey = this.sourceKey;
        const targetKey = this.targetKey;
        const identifier2 = this.identifier;
        const foreignIdentifier = this.foreignIdentifier;
        if (newAssociatedObjects === null) {
          newAssociatedObjects = [];
        } else {
          newAssociatedObjects = this.toInstanceArray(newAssociatedObjects);
        }
        const where2 = __spreadValues({
          [identifier2]: sourceInstance.get(sourceKey)
        }, this.through.scope);
        const updateAssociations = (currentRows) => {
          const obsoleteAssociations = [];
          const promises = [];
          const defaultAttributes = options.through || {};
          const unassociatedObjects = newAssociatedObjects.filter((obj) => !currentRows.some((currentRow) => currentRow[foreignIdentifier] === obj.get(targetKey)));
          for (const currentRow of currentRows) {
            const newObj = newAssociatedObjects.find((obj) => currentRow[foreignIdentifier] === obj.get(targetKey));
            if (!newObj) {
              obsoleteAssociations.push(currentRow);
            } else {
              let throughAttributes = newObj[this.through.model.name];
              if (throughAttributes instanceof this.through.model) {
                throughAttributes = {};
              }
              const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);
              if (Object.keys(attributes).length) {
                promises.push(this.through.model.update(attributes, Object.assign(options, {
                  where: {
                    [identifier2]: sourceInstance.get(sourceKey),
                    [foreignIdentifier]: newObj.get(targetKey)
                  }
                })));
              }
            }
          }
          if (obsoleteAssociations.length > 0) {
            promises.push(this.through.model.destroy(__spreadProps(__spreadValues({}, options), {
              where: __spreadValues({
                [identifier2]: sourceInstance.get(sourceKey),
                [foreignIdentifier]: obsoleteAssociations.map((obsoleteAssociation) => obsoleteAssociation[foreignIdentifier])
              }, this.through.scope)
            })));
          }
          if (unassociatedObjects.length > 0) {
            const bulk = unassociatedObjects.map((unassociatedObject) => {
              return __spreadValues(__spreadProps(__spreadValues(__spreadValues({}, defaultAttributes), unassociatedObject[this.through.model.name]), {
                [identifier2]: sourceInstance.get(sourceKey),
                [foreignIdentifier]: unassociatedObject.get(targetKey)
              }), this.through.scope);
            });
            promises.push(this.through.model.bulkCreate(bulk, __spreadValues({ validate: true }, options)));
          }
          return Promise.all(promises);
        };
        try {
          const currentRows = await this.through.model.findAll(__spreadProps(__spreadValues({}, options), { where: where2, raw: true }));
          return await updateAssociations(currentRows);
        } catch (error) {
          if (error instanceof EmptyResultError2)
            return updateAssociations([]);
          throw error;
        }
      }
      async add(sourceInstance, newInstances, options) {
        if (!newInstances)
          return Promise.resolve();
        options = __spreadValues({}, options);
        const association = this;
        const sourceKey = association.sourceKey;
        const targetKey = association.targetKey;
        const identifier2 = association.identifier;
        const foreignIdentifier = association.foreignIdentifier;
        const defaultAttributes = options.through || {};
        newInstances = association.toInstanceArray(newInstances);
        const where2 = __spreadValues({
          [identifier2]: sourceInstance.get(sourceKey),
          [foreignIdentifier]: newInstances.map((newInstance) => newInstance.get(targetKey))
        }, association.through.scope);
        const updateAssociations = (currentRows) => {
          const promises = [];
          const unassociatedObjects = [];
          const changedAssociations = [];
          for (const obj of newInstances) {
            const existingAssociation = currentRows && currentRows.find((current) => current[foreignIdentifier] === obj.get(targetKey));
            if (!existingAssociation) {
              unassociatedObjects.push(obj);
            } else {
              const throughAttributes = obj[association.through.model.name];
              const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);
              if (Object.keys(attributes).some((attribute) => attributes[attribute] !== existingAssociation[attribute])) {
                changedAssociations.push(obj);
              }
            }
          }
          if (unassociatedObjects.length > 0) {
            const bulk = unassociatedObjects.map((unassociatedObject) => {
              const throughAttributes = unassociatedObject[association.through.model.name];
              const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);
              attributes[identifier2] = sourceInstance.get(sourceKey);
              attributes[foreignIdentifier] = unassociatedObject.get(targetKey);
              Object.assign(attributes, association.through.scope);
              return attributes;
            });
            promises.push(association.through.model.bulkCreate(bulk, __spreadValues({ validate: true }, options)));
          }
          for (const assoc of changedAssociations) {
            let throughAttributes = assoc[association.through.model.name];
            const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);
            if (throughAttributes instanceof association.through.model) {
              throughAttributes = {};
            }
            promises.push(association.through.model.update(attributes, Object.assign(options, { where: {
              [identifier2]: sourceInstance.get(sourceKey),
              [foreignIdentifier]: assoc.get(targetKey)
            } })));
          }
          return Promise.all(promises);
        };
        try {
          const currentRows = await association.through.model.findAll(__spreadProps(__spreadValues({}, options), { where: where2, raw: true }));
          const [associations] = await updateAssociations(currentRows);
          return associations;
        } catch (error) {
          if (error instanceof EmptyResultError2)
            return updateAssociations();
          throw error;
        }
      }
      remove(sourceInstance, oldAssociatedObjects, options) {
        const association = this;
        options = options || {};
        oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);
        const where2 = {
          [association.identifier]: sourceInstance.get(association.sourceKey),
          [association.foreignIdentifier]: oldAssociatedObjects.map((newInstance) => newInstance.get(association.targetKey))
        };
        return association.through.model.destroy(__spreadProps(__spreadValues({}, options), { where: where2 }));
      }
      async create(sourceInstance, values, options) {
        const association = this;
        options = options || {};
        values = values || {};
        if (Array.isArray(options)) {
          options = {
            fields: options
          };
        }
        if (association.scope) {
          Object.assign(values, association.scope);
          if (options.fields) {
            options.fields = options.fields.concat(Object.keys(association.scope));
          }
        }
        const newAssociatedObject = await association.target.create(values, options);
        await sourceInstance[association.accessors.add](newAssociatedObject, _.omit(options, ["fields"]));
        return newAssociatedObject;
      }
      verifyAssociationAlias(alias) {
        if (typeof alias === "string") {
          return this.as === alias;
        }
        if (alias && alias.plural) {
          return this.as === alias.plural;
        }
        return !this.isAliased;
      }
    };
    module.exports = BelongsToMany2;
    module.exports.BelongsToMany = BelongsToMany2;
    module.exports.default = BelongsToMany2;
  }
});

// node_modules/sequelize/lib/instance-validator.js
var require_instance_validator = __commonJS({
  "node_modules/sequelize/lib/instance-validator.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var _ = require_lodash();
    var Utils2 = require_utils();
    var sequelizeError = require_errors();
    var DataTypes2 = require_data_types8();
    var BelongsTo2 = require_belongs_to();
    var validator = require_validator_extras().validator;
    var { promisify } = __require("util");
    var InstanceValidator = class {
      constructor(modelInstance, options) {
        options = __spreadValues({
          hooks: true
        }, options);
        if (options.fields && !options.skip) {
          options.skip = _.difference(Object.keys(modelInstance.constructor.rawAttributes), options.fields);
        } else {
          options.skip = options.skip || [];
        }
        this.options = options;
        this.modelInstance = modelInstance;
        this.validator = validator;
        this.errors = [];
        this.inProgress = false;
      }
      async _validate() {
        if (this.inProgress)
          throw new Error("Validations already in progress.");
        this.inProgress = true;
        await Promise.all([
          this._perAttributeValidators(),
          this._customValidators()
        ]);
        if (this.errors.length) {
          throw new sequelizeError.ValidationError(null, this.errors);
        }
      }
      async validate() {
        return await (this.options.hooks ? this._validateAndRunHooks() : this._validate());
      }
      async _validateAndRunHooks() {
        const runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);
        await runHooks("beforeValidate", this.modelInstance, this.options);
        try {
          await this._validate();
        } catch (error) {
          const newError = await runHooks("validationFailed", this.modelInstance, this.options, error);
          throw newError || error;
        }
        await runHooks("afterValidate", this.modelInstance, this.options);
        return this.modelInstance;
      }
      async _perAttributeValidators() {
        const validators = [];
        _.forIn(this.modelInstance.rawAttributes, (rawAttribute, field) => {
          if (this.options.skip.includes(field)) {
            return;
          }
          const value = this.modelInstance.dataValues[field];
          if (value instanceof Utils2.SequelizeMethod) {
            return;
          }
          if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {
            this._validateSchema(rawAttribute, field, value);
          }
          if (Object.prototype.hasOwnProperty.call(this.modelInstance.validators, field)) {
            validators.push(this._singleAttrValidate(value, field, rawAttribute.allowNull));
          }
        });
        return await Promise.all(validators);
      }
      async _customValidators() {
        const validators = [];
        _.each(this.modelInstance.constructor.options.validate, (validator2, validatorType) => {
          if (this.options.skip.includes(validatorType)) {
            return;
          }
          const valprom = this._invokeCustomValidator(validator2, validatorType).catch(() => {
          });
          validators.push(valprom);
        });
        return await Promise.all(validators);
      }
      async _singleAttrValidate(value, field, allowNull) {
        if ((value === null || value === void 0) && !allowNull) {
          return;
        }
        const validators = [];
        _.forIn(this.modelInstance.validators[field], (test, validatorType) => {
          if (["isUrl", "isURL", "isEmail"].includes(validatorType)) {
            if (typeof test === "object" && test !== null && test.msg) {
              test = {
                msg: test.msg
              };
            } else if (test === true) {
              test = {};
            }
          }
          if (typeof test === "function") {
            validators.push(this._invokeCustomValidator(test, validatorType, true, value, field));
            return;
          }
          if (value === null || value === void 0) {
            return;
          }
          const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, field);
          validatorPromise.catch(() => {
          });
          validators.push(validatorPromise);
        });
        return Promise.all(validators.map((validator2) => validator2.catch((rejection) => {
          const isBuiltIn = !!rejection.validatorName;
          this._pushError(isBuiltIn, field, rejection, value, rejection.validatorName, rejection.validatorArgs);
        })));
      }
      async _invokeCustomValidator(validator2, validatorType, optAttrDefined, optValue, optField) {
        let isAsync = false;
        const validatorArity = validator2.length;
        let asyncArity = 1;
        let errorKey = validatorType;
        let invokeArgs;
        if (optAttrDefined) {
          asyncArity = 2;
          invokeArgs = optValue;
          errorKey = optField;
        }
        if (validatorArity === asyncArity) {
          isAsync = true;
        }
        if (isAsync) {
          try {
            if (optAttrDefined) {
              return await promisify(validator2.bind(this.modelInstance, invokeArgs))();
            }
            return await promisify(validator2.bind(this.modelInstance))();
          } catch (e) {
            return this._pushError(false, errorKey, e, optValue, validatorType);
          }
        }
        try {
          return await validator2.call(this.modelInstance, invokeArgs);
        } catch (e) {
          return this._pushError(false, errorKey, e, optValue, validatorType);
        }
      }
      async _invokeBuiltinValidator(value, test, validatorType, field) {
        const valueString = String(value);
        if (typeof validator[validatorType] !== "function") {
          throw new Error(`Invalid validator function: ${validatorType}`);
        }
        const validatorArgs = this._extractValidatorArgs(test, validatorType, field);
        if (!validator[validatorType](valueString, ...validatorArgs)) {
          throw Object.assign(new Error(test.msg || `Validation ${validatorType} on ${field} failed`), { validatorName: validatorType, validatorArgs });
        }
      }
      _extractValidatorArgs(test, validatorType, field) {
        let validatorArgs = test.args || test;
        const isLocalizedValidator = typeof validatorArgs !== "string" && ["isAlpha", "isAlphanumeric", "isMobilePhone"].includes(validatorType);
        if (!Array.isArray(validatorArgs)) {
          if (validatorType === "isImmutable") {
            validatorArgs = [validatorArgs, field, this.modelInstance];
          } else if (isLocalizedValidator || validatorType === "isIP") {
            validatorArgs = [];
          } else {
            validatorArgs = [validatorArgs];
          }
        } else {
          validatorArgs = validatorArgs.slice(0);
        }
        return validatorArgs;
      }
      _validateSchema(rawAttribute, field, value) {
        if (rawAttribute.allowNull === false && (value === null || value === void 0)) {
          const association = Object.values(this.modelInstance.constructor.associations).find((association2) => association2 instanceof BelongsTo2 && association2.foreignKey === rawAttribute.fieldName);
          if (!association || !this.modelInstance.get(association.associationAccessor)) {
            const validators = this.modelInstance.validators[field];
            const errMsg = _.get(validators, "notNull.msg", `${this.modelInstance.constructor.name}.${field} cannot be null`);
            this.errors.push(new sequelizeError.ValidationErrorItem(errMsg, "notNull Violation", field, value, this.modelInstance, "is_null"));
          }
        }
        if (rawAttribute.type instanceof DataTypes2.STRING || rawAttribute.type instanceof DataTypes2.TEXT || rawAttribute.type instanceof DataTypes2.CITEXT) {
          if (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils2.SequelizeMethod) && !Buffer.isBuffer(value)) {
            this.errors.push(new sequelizeError.ValidationErrorItem(`${field} cannot be an array or an object`, "string violation", field, value, this.modelInstance, "not_a_string"));
          }
        }
      }
      _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {
        const message = rawError.message || rawError || "Validation error";
        const error = new sequelizeError.ValidationErrorItem(message, "Validation error", errorKey, value, this.modelInstance, fnName, isBuiltin ? fnName : void 0, isBuiltin ? fnArgs : void 0);
        error[InstanceValidator.RAW_KEY_NAME] = rawError;
        this.errors.push(error);
      }
    };
    InstanceValidator.RAW_KEY_NAME = "original";
    module.exports = InstanceValidator;
    module.exports.InstanceValidator = InstanceValidator;
    module.exports.default = InstanceValidator;
  }
});

// node_modules/sequelize/lib/query-types.js
var require_query_types = __commonJS({
  "node_modules/sequelize/lib/query-types.js"(exports, module) {
    "use strict";
    var QueryTypes2 = module.exports = {
      SELECT: "SELECT",
      INSERT: "INSERT",
      UPDATE: "UPDATE",
      BULKUPDATE: "BULKUPDATE",
      BULKDELETE: "BULKDELETE",
      DELETE: "DELETE",
      UPSERT: "UPSERT",
      VERSION: "VERSION",
      SHOWTABLES: "SHOWTABLES",
      SHOWINDEXES: "SHOWINDEXES",
      DESCRIBE: "DESCRIBE",
      RAW: "RAW",
      FOREIGNKEYS: "FOREIGNKEYS",
      SHOWCONSTRAINTS: "SHOWCONSTRAINTS"
    };
  }
});

// node_modules/sequelize/lib/hooks.js
var require_hooks = __commonJS({
  "node_modules/sequelize/lib/hooks.js"(exports) {
    "use strict";
    var _ = require_lodash();
    var { logger } = require_logger();
    var debug = logger.debugContext("hooks");
    var hookTypes = {
      beforeValidate: { params: 2 },
      afterValidate: { params: 2 },
      validationFailed: { params: 3 },
      beforeCreate: { params: 2 },
      afterCreate: { params: 2 },
      beforeDestroy: { params: 2 },
      afterDestroy: { params: 2 },
      beforeRestore: { params: 2 },
      afterRestore: { params: 2 },
      beforeUpdate: { params: 2 },
      afterUpdate: { params: 2 },
      beforeSave: { params: 2, proxies: ["beforeUpdate", "beforeCreate"] },
      afterSave: { params: 2, proxies: ["afterUpdate", "afterCreate"] },
      beforeUpsert: { params: 2 },
      afterUpsert: { params: 2 },
      beforeBulkCreate: { params: 2 },
      afterBulkCreate: { params: 2 },
      beforeBulkDestroy: { params: 1 },
      afterBulkDestroy: { params: 1 },
      beforeBulkRestore: { params: 1 },
      afterBulkRestore: { params: 1 },
      beforeBulkUpdate: { params: 1 },
      afterBulkUpdate: { params: 1 },
      beforeFind: { params: 1 },
      beforeFindAfterExpandIncludeAll: { params: 1 },
      beforeFindAfterOptions: { params: 1 },
      afterFind: { params: 2 },
      beforeCount: { params: 1 },
      beforeDefine: { params: 2, sync: true, noModel: true },
      afterDefine: { params: 1, sync: true, noModel: true },
      beforeInit: { params: 2, sync: true, noModel: true },
      afterInit: { params: 1, sync: true, noModel: true },
      beforeAssociate: { params: 2, sync: true },
      afterAssociate: { params: 2, sync: true },
      beforeConnect: { params: 1, noModel: true },
      afterConnect: { params: 2, noModel: true },
      beforeDisconnect: { params: 1, noModel: true },
      afterDisconnect: { params: 1, noModel: true },
      beforeSync: { params: 1 },
      afterSync: { params: 1 },
      beforeBulkSync: { params: 1 },
      afterBulkSync: { params: 1 },
      beforeQuery: { params: 2 },
      afterQuery: { params: 2 }
    };
    exports.hooks = hookTypes;
    var getProxiedHooks = (hookType) => hookTypes[hookType].proxies ? hookTypes[hookType].proxies.concat(hookType) : [hookType];
    function getHooks(hooked, hookType) {
      return (hooked.options.hooks || {})[hookType] || [];
    }
    var Hooks = {
      _setupHooks(hooks) {
        this.options.hooks = {};
        _.map(hooks || {}, (hooksArray, hookName) => {
          if (!Array.isArray(hooksArray))
            hooksArray = [hooksArray];
          hooksArray.forEach((hookFn) => this.addHook(hookName, hookFn));
        });
      },
      async runHooks(hooks, ...hookArgs) {
        if (!hooks)
          throw new Error("runHooks requires at least 1 argument");
        let hookType;
        if (typeof hooks === "string") {
          hookType = hooks;
          hooks = getHooks(this, hookType);
          if (this.sequelize) {
            hooks = hooks.concat(getHooks(this.sequelize, hookType));
          }
        }
        if (!Array.isArray(hooks)) {
          hooks = [hooks];
        }
        if (hookTypes[hookType] && hookTypes[hookType].sync) {
          for (let hook of hooks) {
            if (typeof hook === "object") {
              hook = hook.fn;
            }
            debug(`running hook(sync) ${hookType}`);
            hook.apply(this, hookArgs);
          }
          return;
        }
        for (let hook of hooks) {
          if (typeof hook === "object") {
            hook = hook.fn;
          }
          debug(`running hook ${hookType}`);
          await hook.apply(this, hookArgs);
        }
      },
      addHook(hookType, name, fn2) {
        if (typeof name === "function") {
          fn2 = name;
          name = null;
        }
        debug(`adding hook ${hookType}`);
        hookType = getProxiedHooks(hookType);
        hookType.forEach((type) => {
          const hooks = getHooks(this, type);
          hooks.push(name ? { name, fn: fn2 } : fn2);
          this.options.hooks[type] = hooks;
        });
        return this;
      },
      removeHook(hookType, name) {
        const isReference = typeof name === "function" ? true : false;
        if (!this.hasHook(hookType)) {
          return this;
        }
        debug(`removing hook ${hookType}`);
        hookType = getProxiedHooks(hookType);
        for (const type of hookType) {
          this.options.hooks[type] = this.options.hooks[type].filter((hook) => {
            if (isReference && typeof hook === "function") {
              return hook !== name;
            }
            if (!isReference && typeof hook === "object") {
              return hook.name !== name;
            }
            return true;
          });
        }
        return this;
      },
      hasHook(hookType) {
        return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;
      }
    };
    Hooks.hasHooks = Hooks.hasHook;
    function applyTo(target, isModel = false) {
      _.mixin(target, Hooks);
      for (const hook of Object.keys(hookTypes)) {
        if (isModel && hookTypes[hook].noModel) {
          continue;
        }
        target[hook] = function(name, callback) {
          return this.addHook(hook, name, callback);
        };
      }
    }
    exports.applyTo = applyTo;
  }
});

// node_modules/sequelize/lib/associations/mixin.js
var require_mixin = __commonJS({
  "node_modules/sequelize/lib/associations/mixin.js"(exports, module) {
    "use strict";
    var _ = require_lodash();
    var HasOne2 = require_has_one();
    var HasMany2 = require_has_many();
    var BelongsToMany2 = require_belongs_to_many();
    var BelongsTo2 = require_belongs_to();
    function isModel(model, sequelize) {
      return model && model.prototype && model.prototype instanceof sequelize.Sequelize.Model;
    }
    var Mixin = {
      hasMany(target, options = {}) {
        if (!isModel(target, this.sequelize)) {
          throw new Error(`${this.name}.hasMany called with something that's not a subclass of Sequelize.Model`);
        }
        const source = this;
        options.hooks = options.hooks === void 0 ? false : Boolean(options.hooks);
        options.useHooks = options.hooks;
        Object.assign(options, _.omit(source.options, ["hooks"]));
        if (options.useHooks) {
          this.runHooks("beforeAssociate", { source, target, type: HasMany2 }, options);
        }
        const association = new HasMany2(source, target, options);
        source.associations[association.associationAccessor] = association;
        association._injectAttributes();
        association.mixin(source.prototype);
        if (options.useHooks) {
          this.runHooks("afterAssociate", { source, target, type: HasMany2, association }, options);
        }
        return association;
      },
      belongsToMany(target, options = {}) {
        if (!isModel(target, this.sequelize)) {
          throw new Error(`${this.name}.belongsToMany called with something that's not a subclass of Sequelize.Model`);
        }
        const source = this;
        options.hooks = options.hooks === void 0 ? false : Boolean(options.hooks);
        options.useHooks = options.hooks;
        options.timestamps = options.timestamps === void 0 ? this.sequelize.options.timestamps : options.timestamps;
        Object.assign(options, _.omit(source.options, ["hooks", "timestamps", "scopes", "defaultScope"]));
        if (options.useHooks) {
          this.runHooks("beforeAssociate", { source, target, type: BelongsToMany2 }, options);
        }
        const association = new BelongsToMany2(source, target, options);
        source.associations[association.associationAccessor] = association;
        association._injectAttributes();
        association.mixin(source.prototype);
        if (options.useHooks) {
          this.runHooks("afterAssociate", { source, target, type: BelongsToMany2, association }, options);
        }
        return association;
      },
      getAssociations(target) {
        return Object.values(this.associations).filter((association) => association.target.name === target.name);
      },
      getAssociationForAlias(target, alias) {
        return this.getAssociations(target).find((association) => association.verifyAssociationAlias(alias)) || null;
      }
    };
    function singleLinked(Type) {
      return function(target, options = {}) {
        const source = this;
        if (!isModel(target, source.sequelize)) {
          throw new Error(`${source.name}.${_.lowerFirst(Type.name)} called with something that's not a subclass of Sequelize.Model`);
        }
        options.hooks = options.hooks === void 0 ? false : Boolean(options.hooks);
        options.useHooks = options.hooks;
        if (options.useHooks) {
          source.runHooks("beforeAssociate", { source, target, type: Type }, options);
        }
        const association = new Type(source, target, Object.assign(options, source.options));
        source.associations[association.associationAccessor] = association;
        association._injectAttributes();
        association.mixin(source.prototype);
        if (options.useHooks) {
          source.runHooks("afterAssociate", { source, target, type: Type, association }, options);
        }
        return association;
      };
    }
    Mixin.hasOne = singleLinked(HasOne2);
    Mixin.belongsTo = singleLinked(BelongsTo2);
    module.exports = Mixin;
    module.exports.Mixin = Mixin;
    module.exports.default = Mixin;
  }
});

// node_modules/sequelize/lib/utils/deprecations.js
var require_deprecations = __commonJS({
  "node_modules/sequelize/lib/utils/deprecations.js"(exports) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule = (target) => __defProp2(target, "__esModule", { value: true });
    var __export = (target, all) => {
      __markAsModule(target);
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module2, desc) => {
      if (module2 && typeof module2 === "object" || typeof module2 === "function") {
        for (let key of __getOwnPropNames2(module2))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule = (module2) => {
      return __reExport(__markAsModule(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
    };
    __export(exports, {
      noBoolOperatorAliases: () => noBoolOperatorAliases,
      noDoubleNestedGroup: () => noDoubleNestedGroup,
      noRawAttributes: () => noRawAttributes,
      noStringOperators: () => noStringOperators,
      noTrueLogging: () => noTrueLogging,
      unsupportedEngine: () => unsupportedEngine
    });
    var import_util = __toModule(__require("util"));
    var noop = () => {
    };
    var noRawAttributes = (0, import_util.deprecate)(noop, "Use sequelize.fn / sequelize.literal to construct attributes", "SEQUELIZE0001");
    var noTrueLogging = (0, import_util.deprecate)(noop, "The logging-option should be either a function or false. Default: console.log", "SEQUELIZE0002");
    var noStringOperators = (0, import_util.deprecate)(noop, "String based operators are deprecated. Please use Symbol based operators for better security, read more at https://sequelize.org/master/manual/querying.html#operators", "SEQUELIZE0003");
    var noBoolOperatorAliases = (0, import_util.deprecate)(noop, "A boolean value was passed to options.operatorsAliases. This is a no-op with v5 and should be removed.", "SEQUELIZE0004");
    var noDoubleNestedGroup = (0, import_util.deprecate)(noop, "Passing a double nested nested array to `group` is unsupported and will be removed in v6.", "SEQUELIZE0005");
    var unsupportedEngine = (0, import_util.deprecate)(noop, "This database engine version is not supported, please update your database server. More information https://github.com/sequelize/sequelize/blob/main/ENGINE.md", "SEQUELIZE0006");
  }
});

// node_modules/sequelize/lib/model.js
var require_model = __commonJS({
  "node_modules/sequelize/lib/model.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var assert = __require("assert");
    var _ = require_lodash();
    var Dottie = require_dottie();
    var Utils2 = require_utils();
    var { logger } = require_logger();
    var BelongsTo2 = require_belongs_to();
    var BelongsToMany2 = require_belongs_to_many();
    var InstanceValidator = require_instance_validator();
    var QueryTypes2 = require_query_types();
    var sequelizeErrors = require_errors();
    var Association2 = require_base();
    var HasMany2 = require_has_many();
    var DataTypes2 = require_data_types8();
    var Hooks = require_hooks();
    var associationsMixin = require_mixin();
    var Op2 = require_operators();
    var { noDoubleNestedGroup } = require_deprecations();
    var validQueryKeywords = /* @__PURE__ */ new Set([
      "where",
      "attributes",
      "paranoid",
      "include",
      "order",
      "limit",
      "offset",
      "transaction",
      "lock",
      "raw",
      "logging",
      "benchmark",
      "having",
      "searchPath",
      "rejectOnEmpty",
      "plain",
      "scope",
      "group",
      "through",
      "defaults",
      "distinct",
      "primary",
      "exception",
      "type",
      "hooks",
      "force",
      "name"
    ]);
    var nonCascadingOptions = ["include", "attributes", "originalAttributes", "order", "where", "limit", "offset", "plain", "group", "having"];
    var Model3 = class {
      static get queryInterface() {
        return this.sequelize.getQueryInterface();
      }
      static get queryGenerator() {
        return this.queryInterface.queryGenerator;
      }
      get sequelize() {
        return this.constructor.sequelize;
      }
      constructor(values = {}, options = {}) {
        if (!this.constructor._overwrittenAttributesChecked) {
          this.constructor._overwrittenAttributesChecked = true;
          setTimeout(() => {
            const overwrittenAttributes = [];
            for (const key of Object.keys(this.constructor._attributeManipulation)) {
              if (Object.prototype.hasOwnProperty.call(this, key)) {
                overwrittenAttributes.push(key);
              }
            }
            if (overwrittenAttributes.length > 0) {
              logger.warn(`Model ${JSON.stringify(this.constructor.name)} is declaring public class fields for attribute(s): ${overwrittenAttributes.map((attr) => JSON.stringify(attr)).join(", ")}.
These class fields are shadowing Sequelize's attribute getters & setters.
See https://sequelize.org/main/manual/model-basics.html#caveat-with-public-class-fields`);
            }
          }, 0);
        }
        options = __spreadValues({
          isNewRecord: true,
          _schema: this.constructor._schema,
          _schemaDelimiter: this.constructor._schemaDelimiter
        }, options);
        if (options.attributes) {
          options.attributes = options.attributes.map((attribute) => Array.isArray(attribute) ? attribute[1] : attribute);
        }
        if (!options.includeValidated) {
          this.constructor._conformIncludes(options, this.constructor);
          if (options.include) {
            this.constructor._expandIncludeAll(options);
            this.constructor._validateIncludedElements(options);
          }
        }
        this.dataValues = {};
        this._previousDataValues = {};
        this.uniqno = 1;
        this._changed = /* @__PURE__ */ new Set();
        this._options = options;
        this.isNewRecord = options.isNewRecord;
        this._initValues(values, options);
      }
      _initValues(values, options) {
        let defaults;
        let key;
        values = __spreadValues({}, values);
        if (options.isNewRecord) {
          defaults = {};
          if (this.constructor._hasDefaultValues) {
            defaults = _.mapValues(this.constructor._defaultValues, (valueFn) => {
              const value = valueFn();
              return value && value instanceof Utils2.SequelizeMethod ? value : _.cloneDeep(value);
            });
          }
          if (this.constructor.primaryKeyAttributes.length) {
            this.constructor.primaryKeyAttributes.forEach((primaryKeyAttribute) => {
              if (!Object.prototype.hasOwnProperty.call(defaults, primaryKeyAttribute)) {
                defaults[primaryKeyAttribute] = null;
              }
            });
          }
          if (this.constructor._timestampAttributes.createdAt && defaults[this.constructor._timestampAttributes.createdAt]) {
            this.dataValues[this.constructor._timestampAttributes.createdAt] = Utils2.toDefaultValue(defaults[this.constructor._timestampAttributes.createdAt], this.sequelize.options.dialect);
            delete defaults[this.constructor._timestampAttributes.createdAt];
          }
          if (this.constructor._timestampAttributes.updatedAt && defaults[this.constructor._timestampAttributes.updatedAt]) {
            this.dataValues[this.constructor._timestampAttributes.updatedAt] = Utils2.toDefaultValue(defaults[this.constructor._timestampAttributes.updatedAt], this.sequelize.options.dialect);
            delete defaults[this.constructor._timestampAttributes.updatedAt];
          }
          if (this.constructor._timestampAttributes.deletedAt && defaults[this.constructor._timestampAttributes.deletedAt]) {
            this.dataValues[this.constructor._timestampAttributes.deletedAt] = Utils2.toDefaultValue(defaults[this.constructor._timestampAttributes.deletedAt], this.sequelize.options.dialect);
            delete defaults[this.constructor._timestampAttributes.deletedAt];
          }
          for (key in defaults) {
            if (values[key] === void 0) {
              this.set(key, Utils2.toDefaultValue(defaults[key], this.sequelize.options.dialect), { raw: true });
              delete values[key];
            }
          }
        }
        this.set(values, options);
      }
      static _paranoidClause(model, options = {}) {
        if (options.include) {
          for (const include of options.include) {
            this._paranoidClause(include.model, include);
          }
        }
        if (_.get(options, "groupedLimit.on.options.paranoid")) {
          const throughModel = _.get(options, "groupedLimit.on.through.model");
          if (throughModel) {
            options.groupedLimit.through = this._paranoidClause(throughModel, options.groupedLimit.through);
          }
        }
        if (!model.options.timestamps || !model.options.paranoid || options.paranoid === false) {
          return options;
        }
        const deletedAtCol = model._timestampAttributes.deletedAt;
        const deletedAtAttribute = model.rawAttributes[deletedAtCol];
        const deletedAtObject = {};
        let deletedAtDefaultValue = Object.prototype.hasOwnProperty.call(deletedAtAttribute, "defaultValue") ? deletedAtAttribute.defaultValue : null;
        deletedAtDefaultValue = deletedAtDefaultValue || {
          [Op2.eq]: null
        };
        deletedAtObject[deletedAtAttribute.field || deletedAtCol] = deletedAtDefaultValue;
        if (Utils2.isWhereEmpty(options.where)) {
          options.where = deletedAtObject;
        } else {
          options.where = { [Op2.and]: [deletedAtObject, options.where] };
        }
        return options;
      }
      static _addDefaultAttributes() {
        const tail = {};
        let head = {};
        if (!_.some(this.rawAttributes, "primaryKey")) {
          if ("id" in this.rawAttributes) {
            throw new Error(`A column called 'id' was added to the attributes of '${this.tableName}' but not marked with 'primaryKey: true'`);
          }
          head = {
            id: {
              type: new DataTypes2.INTEGER(),
              allowNull: false,
              primaryKey: true,
              autoIncrement: true,
              _autoGenerated: true
            }
          };
        }
        if (this._timestampAttributes.createdAt) {
          tail[this._timestampAttributes.createdAt] = {
            type: DataTypes2.DATE,
            allowNull: false,
            _autoGenerated: true
          };
        }
        if (this._timestampAttributes.updatedAt) {
          tail[this._timestampAttributes.updatedAt] = {
            type: DataTypes2.DATE,
            allowNull: false,
            _autoGenerated: true
          };
        }
        if (this._timestampAttributes.deletedAt) {
          tail[this._timestampAttributes.deletedAt] = {
            type: DataTypes2.DATE,
            _autoGenerated: true
          };
        }
        if (this._versionAttribute) {
          tail[this._versionAttribute] = {
            type: DataTypes2.INTEGER,
            allowNull: false,
            defaultValue: 0,
            _autoGenerated: true
          };
        }
        const newRawAttributes = __spreadValues(__spreadValues({}, head), this.rawAttributes);
        _.each(tail, (value, attr) => {
          if (newRawAttributes[attr] === void 0) {
            newRawAttributes[attr] = value;
          }
        });
        this.rawAttributes = newRawAttributes;
        if (!Object.keys(this.primaryKeys).length) {
          this.primaryKeys.id = this.rawAttributes.id;
        }
      }
      static getAttributes() {
        return this.rawAttributes;
      }
      static _findAutoIncrementAttribute() {
        this.autoIncrementAttribute = null;
        for (const name in this.rawAttributes) {
          if (Object.prototype.hasOwnProperty.call(this.rawAttributes, name)) {
            const definition = this.rawAttributes[name];
            if (definition && definition.autoIncrement) {
              if (this.autoIncrementAttribute) {
                throw new Error("Invalid Instance definition. Only one autoincrement field allowed.");
              }
              this.autoIncrementAttribute = name;
            }
          }
        }
      }
      static _conformIncludes(options, self2) {
        if (!options.include)
          return;
        if (!Array.isArray(options.include)) {
          options.include = [options.include];
        } else if (!options.include.length) {
          delete options.include;
          return;
        }
        options.include = options.include.map((include) => this._conformInclude(include, self2));
      }
      static _transformStringAssociation(include, self2) {
        if (self2 && typeof include === "string") {
          if (!Object.prototype.hasOwnProperty.call(self2.associations, include)) {
            throw new Error(`Association with alias "${include}" does not exist on ${self2.name}`);
          }
          return self2.associations[include];
        }
        return include;
      }
      static _conformInclude(include, self2) {
        if (include) {
          let model;
          if (include._pseudo)
            return include;
          include = this._transformStringAssociation(include, self2);
          if (include instanceof Association2) {
            if (self2 && include.target.name === self2.name) {
              model = include.source;
            } else {
              model = include.target;
            }
            return { model, association: include, as: include.as };
          }
          if (include.prototype && include.prototype instanceof Model3) {
            return { model: include };
          }
          if (_.isPlainObject(include)) {
            if (include.association) {
              include.association = this._transformStringAssociation(include.association, self2);
              if (self2 && include.association.target.name === self2.name) {
                model = include.association.source;
              } else {
                model = include.association.target;
              }
              if (!include.model)
                include.model = model;
              if (!include.as)
                include.as = include.association.as;
              this._conformIncludes(include, model);
              return include;
            }
            if (include.model) {
              this._conformIncludes(include, include.model);
              return include;
            }
            if (include.all) {
              this._conformIncludes(include);
              return include;
            }
          }
        }
        throw new Error("Include unexpected. Element has to be either a Model, an Association or an object.");
      }
      static _expandIncludeAllElement(includes, include) {
        let all = include.all;
        delete include.all;
        if (all !== true) {
          if (!Array.isArray(all)) {
            all = [all];
          }
          const validTypes = {
            BelongsTo: true,
            HasOne: true,
            HasMany: true,
            One: ["BelongsTo", "HasOne"],
            Has: ["HasOne", "HasMany"],
            Many: ["HasMany"]
          };
          for (let i = 0; i < all.length; i++) {
            const type = all[i];
            if (type === "All") {
              all = true;
              break;
            }
            const types = validTypes[type];
            if (!types) {
              throw new sequelizeErrors.EagerLoadingError(`include all '${type}' is not valid - must be BelongsTo, HasOne, HasMany, One, Has, Many or All`);
            }
            if (types !== true) {
              all.splice(i, 1);
              i--;
              for (let j = 0; j < types.length; j++) {
                if (!all.includes(types[j])) {
                  all.unshift(types[j]);
                  i++;
                }
              }
            }
          }
        }
        const nested = include.nested;
        if (nested) {
          delete include.nested;
          if (!include.include) {
            include.include = [];
          } else if (!Array.isArray(include.include)) {
            include.include = [include.include];
          }
        }
        const used = [];
        (function addAllIncludes(parent, includes2) {
          _.forEach(parent.associations, (association) => {
            if (all !== true && !all.includes(association.associationType)) {
              return;
            }
            const model = association.target;
            const as = association.options.as;
            const predicate = { model };
            if (as) {
              predicate.as = as;
            }
            if (_.some(includes2, predicate)) {
              return;
            }
            if (nested && used.includes(model)) {
              return;
            }
            used.push(parent);
            const thisInclude = Utils2.cloneDeep(include);
            thisInclude.model = model;
            if (as) {
              thisInclude.as = as;
            }
            includes2.push(thisInclude);
            if (nested) {
              addAllIncludes(model, thisInclude.include);
              if (thisInclude.include.length === 0)
                delete thisInclude.include;
            }
          });
          used.pop();
        })(this, includes);
      }
      static _validateIncludedElements(options, tableNames) {
        if (!options.model)
          options.model = this;
        tableNames = tableNames || {};
        options.includeNames = [];
        options.includeMap = {};
        options.hasSingleAssociation = false;
        options.hasMultiAssociation = false;
        if (!options.parent) {
          options.topModel = options.model;
          options.topLimit = options.limit;
        }
        options.include = options.include.map((include) => {
          include = this._conformInclude(include);
          include.parent = options;
          include.topLimit = options.topLimit;
          this._validateIncludedElement.call(options.model, include, tableNames, options);
          if (include.duplicating === void 0) {
            include.duplicating = include.association.isMultiAssociation;
          }
          include.hasDuplicating = include.hasDuplicating || include.duplicating;
          include.hasRequired = include.hasRequired || include.required;
          options.hasDuplicating = options.hasDuplicating || include.hasDuplicating;
          options.hasRequired = options.hasRequired || include.required;
          options.hasWhere = options.hasWhere || include.hasWhere || !!include.where;
          return include;
        });
        for (const include of options.include) {
          include.hasParentWhere = options.hasParentWhere || !!options.where;
          include.hasParentRequired = options.hasParentRequired || !!options.required;
          if (include.subQuery !== false && options.hasDuplicating && options.topLimit) {
            if (include.duplicating) {
              include.subQuery = include.subQuery || false;
              include.subQueryFilter = include.hasRequired;
            } else {
              include.subQuery = include.hasRequired;
              include.subQueryFilter = false;
            }
          } else {
            include.subQuery = include.subQuery || false;
            if (include.duplicating) {
              include.subQueryFilter = include.subQuery;
            } else {
              include.subQueryFilter = false;
              include.subQuery = include.subQuery || include.hasParentRequired && include.hasRequired && !include.separate;
            }
          }
          options.includeMap[include.as] = include;
          options.includeNames.push(include.as);
          if (options.topModel === options.model && options.subQuery === void 0 && options.topLimit) {
            if (include.subQuery) {
              options.subQuery = include.subQuery;
            } else if (include.hasDuplicating) {
              options.subQuery = true;
            }
          }
          options.hasIncludeWhere = options.hasIncludeWhere || include.hasIncludeWhere || !!include.where;
          options.hasIncludeRequired = options.hasIncludeRequired || include.hasIncludeRequired || !!include.required;
          if (include.association.isMultiAssociation || include.hasMultiAssociation) {
            options.hasMultiAssociation = true;
          }
          if (include.association.isSingleAssociation || include.hasSingleAssociation) {
            options.hasSingleAssociation = true;
          }
        }
        if (options.topModel === options.model && options.subQuery === void 0) {
          options.subQuery = false;
        }
        return options;
      }
      static _validateIncludedElement(include, tableNames, options) {
        tableNames[include.model.getTableName()] = true;
        if (include.attributes && !options.raw) {
          include.model._expandAttributes(include);
          include.originalAttributes = include.model._injectDependentVirtualAttributes(include.attributes);
          include = Utils2.mapFinderOptions(include, include.model);
          if (include.attributes.length) {
            _.each(include.model.primaryKeys, (attr, key) => {
              if (!include.attributes.some((includeAttr) => {
                if (attr.field !== key) {
                  return Array.isArray(includeAttr) && includeAttr[0] === attr.field && includeAttr[1] === key;
                }
                return includeAttr === key;
              })) {
                include.attributes.unshift(key);
              }
            });
          }
        } else {
          include = Utils2.mapFinderOptions(include, include.model);
        }
        if (include._pseudo) {
          if (!include.attributes) {
            include.attributes = Object.keys(include.model.tableAttributes);
          }
          return Utils2.mapFinderOptions(include, include.model);
        }
        const association = include.association || this._getIncludedAssociation(include.model, include.as);
        include.association = association;
        include.as = association.as;
        if (include.association.through && Object(include.association.through.model) === include.association.through.model) {
          if (!include.include)
            include.include = [];
          const through = include.association.through;
          include.through = _.defaults(include.through || {}, {
            model: through.model,
            as: through.model.name,
            association: {
              isSingleAssociation: true
            },
            _pseudo: true,
            parent: include
          });
          if (through.scope) {
            include.through.where = include.through.where ? { [Op2.and]: [include.through.where, through.scope] } : through.scope;
          }
          include.include.push(include.through);
          tableNames[through.tableName] = true;
        }
        let model;
        if (include.model.scoped === true) {
          model = include.model;
        } else {
          model = include.association.target.name === include.model.name ? include.association.target : include.association.source;
        }
        model._injectScope(include);
        if (!include.attributes) {
          include.attributes = Object.keys(include.model.tableAttributes);
        }
        include = Utils2.mapFinderOptions(include, include.model);
        if (include.required === void 0) {
          include.required = !!include.where;
        }
        if (include.association.scope) {
          include.where = include.where ? { [Op2.and]: [include.where, include.association.scope] } : include.association.scope;
        }
        if (include.limit && include.separate === void 0) {
          include.separate = true;
        }
        if (include.separate === true) {
          if (!(include.association instanceof HasMany2)) {
            throw new Error("Only HasMany associations support include.separate");
          }
          include.duplicating = false;
          if (options.attributes && options.attributes.length && !_.flattenDepth(options.attributes, 2).includes(association.sourceKey)) {
            options.attributes.push(association.sourceKey);
          }
          if (include.attributes && include.attributes.length && !_.flattenDepth(include.attributes, 2).includes(association.foreignKey)) {
            include.attributes.push(association.foreignKey);
          }
        }
        if (Object.prototype.hasOwnProperty.call(include, "include")) {
          this._validateIncludedElements.call(include.model, include, tableNames);
        }
        return include;
      }
      static _getIncludedAssociation(targetModel, targetAlias) {
        const associations = this.getAssociations(targetModel);
        let association = null;
        if (associations.length === 0) {
          throw new sequelizeErrors.EagerLoadingError(`${targetModel.name} is not associated to ${this.name}!`);
        }
        if (associations.length === 1) {
          association = this.getAssociationForAlias(targetModel, targetAlias);
          if (association) {
            return association;
          }
          if (targetAlias) {
            const existingAliases = this.getAssociations(targetModel).map((association2) => association2.as);
            throw new sequelizeErrors.EagerLoadingError(`${targetModel.name} is associated to ${this.name} using an alias. You've included an alias (${targetAlias}), but it does not match the alias(es) defined in your association (${existingAliases.join(", ")}).`);
          }
          throw new sequelizeErrors.EagerLoadingError(`${targetModel.name} is associated to ${this.name} using an alias. You must use the 'as' keyword to specify the alias within your include statement.`);
        }
        association = this.getAssociationForAlias(targetModel, targetAlias);
        if (!association) {
          throw new sequelizeErrors.EagerLoadingError(`${targetModel.name} is associated to ${this.name} multiple times. To identify the correct association, you must use the 'as' keyword to specify the alias of the association you want to include.`);
        }
        return association;
      }
      static _expandIncludeAll(options) {
        const includes = options.include;
        if (!includes) {
          return;
        }
        for (let index = 0; index < includes.length; index++) {
          const include = includes[index];
          if (include.all) {
            includes.splice(index, 1);
            index--;
            this._expandIncludeAllElement(includes, include);
          }
        }
        includes.forEach((include) => {
          this._expandIncludeAll.call(include.model, include);
        });
      }
      static _conformIndex(index) {
        if (!index.fields) {
          throw new Error('Missing "fields" property for index definition');
        }
        index = _.defaults(index, {
          type: "",
          parser: null
        });
        if (index.type && index.type.toLowerCase() === "unique") {
          index.unique = true;
          delete index.type;
        }
        return index;
      }
      static _uniqIncludes(options) {
        if (!options.include)
          return;
        options.include = _(options.include).groupBy((include) => `${include.model && include.model.name}-${include.as}`).map((includes) => this._assignOptions(...includes)).value();
      }
      static _baseMerge(...args) {
        _.assignWith(...args);
        this._conformIncludes(args[0], this);
        this._uniqIncludes(args[0]);
        return args[0];
      }
      static _mergeFunction(objValue, srcValue, key) {
        if (Array.isArray(objValue) && Array.isArray(srcValue)) {
          return _.union(objValue, srcValue);
        }
        if (["where", "having"].includes(key)) {
          if (srcValue instanceof Utils2.SequelizeMethod) {
            srcValue = { [Op2.and]: srcValue };
          }
          if (_.isPlainObject(objValue) && _.isPlainObject(srcValue)) {
            return Object.assign(objValue, srcValue);
          }
        } else if (key === "attributes" && _.isPlainObject(objValue) && _.isPlainObject(srcValue)) {
          return _.assignWith(objValue, srcValue, (objValue2, srcValue2) => {
            if (Array.isArray(objValue2) && Array.isArray(srcValue2)) {
              return _.union(objValue2, srcValue2);
            }
          });
        }
        if (srcValue) {
          return Utils2.cloneDeep(srcValue, true);
        }
        return srcValue === void 0 ? objValue : srcValue;
      }
      static _assignOptions(...args) {
        return this._baseMerge(...args, this._mergeFunction);
      }
      static _defaultsOptions(target, opts) {
        return this._baseMerge(target, opts, (srcValue, objValue, key) => {
          return this._mergeFunction(objValue, srcValue, key);
        });
      }
      static init(attributes, options = {}) {
        if (!options.sequelize) {
          throw new Error("No Sequelize instance passed");
        }
        this.sequelize = options.sequelize;
        const globalOptions = this.sequelize.options;
        options = Utils2.merge(_.cloneDeep(globalOptions.define), options);
        if (!options.modelName) {
          options.modelName = this.name;
        }
        options = Utils2.merge({
          name: {
            plural: Utils2.pluralize(options.modelName),
            singular: Utils2.singularize(options.modelName)
          },
          indexes: [],
          omitNull: globalOptions.omitNull,
          schema: globalOptions.schema
        }, options);
        this.sequelize.runHooks("beforeDefine", attributes, options);
        if (options.modelName !== this.name) {
          Object.defineProperty(this, "name", { value: options.modelName });
        }
        delete options.modelName;
        this.options = __spreadValues({
          timestamps: true,
          validate: {},
          freezeTableName: false,
          underscored: false,
          paranoid: false,
          rejectOnEmpty: false,
          whereCollection: null,
          schema: null,
          schemaDelimiter: "",
          defaultScope: {},
          scopes: {},
          indexes: []
        }, options);
        if (this.sequelize.isDefined(this.name)) {
          this.sequelize.modelManager.removeModel(this.sequelize.modelManager.getModel(this.name));
        }
        this.associations = {};
        this._setupHooks(options.hooks);
        this.underscored = this.options.underscored;
        if (!this.options.tableName) {
          this.tableName = this.options.freezeTableName ? this.name : Utils2.underscoredIf(Utils2.pluralize(this.name), this.underscored);
        } else {
          this.tableName = this.options.tableName;
        }
        this._schema = this.options.schema;
        this._schemaDelimiter = this.options.schemaDelimiter;
        _.each(options.validate, (validator, validatorType) => {
          if (Object.prototype.hasOwnProperty.call(attributes, validatorType)) {
            throw new Error(`A model validator function must not have the same name as a field. Model: ${this.name}, field/validation name: ${validatorType}`);
          }
          if (typeof validator !== "function") {
            throw new Error(`Members of the validate option must be functions. Model: ${this.name}, error with validate member ${validatorType}`);
          }
        });
        this.rawAttributes = _.mapValues(attributes, (attribute, name) => {
          attribute = this.sequelize.normalizeAttribute(attribute);
          if (attribute.type === void 0) {
            throw new Error(`Unrecognized datatype for attribute "${this.name}.${name}"`);
          }
          if (attribute.allowNull !== false && _.get(attribute, "validate.notNull")) {
            throw new Error(`Invalid definition for "${this.name}.${name}", "notNull" validator is only allowed with "allowNull:false"`);
          }
          if (_.get(attribute, "references.model.prototype") instanceof Model3) {
            attribute.references.model = attribute.references.model.getTableName();
          }
          return attribute;
        });
        const tableName = this.getTableName();
        this._indexes = this.options.indexes.map((index) => Utils2.nameIndex(this._conformIndex(index), tableName));
        this.primaryKeys = {};
        this._readOnlyAttributes = /* @__PURE__ */ new Set();
        this._timestampAttributes = {};
        if (this.options.timestamps) {
          for (const key of ["createdAt", "updatedAt", "deletedAt"]) {
            if (!["undefined", "string", "boolean"].includes(typeof this.options[key])) {
              throw new Error(`Value for "${key}" option must be a string or a boolean, got ${typeof this.options[key]}`);
            }
            if (this.options[key] === "") {
              throw new Error(`Value for "${key}" option cannot be an empty string`);
            }
          }
          if (this.options.createdAt !== false) {
            this._timestampAttributes.createdAt = typeof this.options.createdAt === "string" ? this.options.createdAt : "createdAt";
            this._readOnlyAttributes.add(this._timestampAttributes.createdAt);
          }
          if (this.options.updatedAt !== false) {
            this._timestampAttributes.updatedAt = typeof this.options.updatedAt === "string" ? this.options.updatedAt : "updatedAt";
            this._readOnlyAttributes.add(this._timestampAttributes.updatedAt);
          }
          if (this.options.paranoid && this.options.deletedAt !== false) {
            this._timestampAttributes.deletedAt = typeof this.options.deletedAt === "string" ? this.options.deletedAt : "deletedAt";
            this._readOnlyAttributes.add(this._timestampAttributes.deletedAt);
          }
        }
        if (this.options.version) {
          this._versionAttribute = typeof this.options.version === "string" ? this.options.version : "version";
          this._readOnlyAttributes.add(this._versionAttribute);
        }
        this._hasReadOnlyAttributes = this._readOnlyAttributes.size > 0;
        this._addDefaultAttributes();
        this.refreshAttributes();
        this._findAutoIncrementAttribute();
        this._scope = this.options.defaultScope;
        this._scopeNames = ["defaultScope"];
        this.sequelize.modelManager.addModel(this);
        this.sequelize.runHooks("afterDefine", this);
        return this;
      }
      static refreshAttributes() {
        const attributeManipulation = {};
        this.prototype._customGetters = {};
        this.prototype._customSetters = {};
        ["get", "set"].forEach((type) => {
          const opt = `${type}terMethods`;
          const funcs = __spreadValues({}, this.options[opt]);
          const _custom = type === "get" ? this.prototype._customGetters : this.prototype._customSetters;
          _.each(funcs, (method, attribute) => {
            _custom[attribute] = method;
            if (type === "get") {
              funcs[attribute] = function() {
                return this.get(attribute);
              };
            }
            if (type === "set") {
              funcs[attribute] = function(value) {
                return this.set(attribute, value);
              };
            }
          });
          _.each(this.rawAttributes, (options, attribute) => {
            if (Object.prototype.hasOwnProperty.call(options, type)) {
              _custom[attribute] = options[type];
            }
            if (type === "get") {
              funcs[attribute] = function() {
                return this.get(attribute);
              };
            }
            if (type === "set") {
              funcs[attribute] = function(value) {
                return this.set(attribute, value);
              };
            }
          });
          _.each(funcs, (fct, name) => {
            if (!attributeManipulation[name]) {
              attributeManipulation[name] = {
                configurable: true
              };
            }
            attributeManipulation[name][type] = fct;
          });
        });
        this._dataTypeChanges = {};
        this._dataTypeSanitizers = {};
        this._hasBooleanAttributes = false;
        this._hasDateAttributes = false;
        this._jsonAttributes = /* @__PURE__ */ new Set();
        this._virtualAttributes = /* @__PURE__ */ new Set();
        this._defaultValues = {};
        this.prototype.validators = {};
        this.fieldRawAttributesMap = {};
        this.primaryKeys = {};
        this.uniqueKeys = {};
        _.each(this.rawAttributes, (definition, name) => {
          definition.type = this.sequelize.normalizeDataType(definition.type);
          definition.Model = this;
          definition.fieldName = name;
          definition._modelAttribute = true;
          if (definition.field === void 0) {
            definition.field = Utils2.underscoredIf(name, this.underscored);
          }
          if (definition.primaryKey === true) {
            this.primaryKeys[name] = definition;
          }
          this.fieldRawAttributesMap[definition.field] = definition;
          if (definition.type._sanitize) {
            this._dataTypeSanitizers[name] = definition.type._sanitize;
          }
          if (definition.type._isChanged) {
            this._dataTypeChanges[name] = definition.type._isChanged;
          }
          if (definition.type instanceof DataTypes2.BOOLEAN) {
            this._hasBooleanAttributes = true;
          } else if (definition.type instanceof DataTypes2.DATE || definition.type instanceof DataTypes2.DATEONLY) {
            this._hasDateAttributes = true;
          } else if (definition.type instanceof DataTypes2.JSON) {
            this._jsonAttributes.add(name);
          } else if (definition.type instanceof DataTypes2.VIRTUAL) {
            this._virtualAttributes.add(name);
          }
          if (Object.prototype.hasOwnProperty.call(definition, "defaultValue")) {
            this._defaultValues[name] = () => Utils2.toDefaultValue(definition.defaultValue, this.sequelize.options.dialect);
          }
          if (Object.prototype.hasOwnProperty.call(definition, "unique") && definition.unique) {
            let idxName;
            if (typeof definition.unique === "object" && Object.prototype.hasOwnProperty.call(definition.unique, "name")) {
              idxName = definition.unique.name;
            } else if (typeof definition.unique === "string") {
              idxName = definition.unique;
            } else {
              idxName = `${this.tableName}_${name}_unique`;
            }
            const idx = this.uniqueKeys[idxName] || { fields: [] };
            idx.fields.push(definition.field);
            idx.msg = idx.msg || definition.unique.msg || null;
            idx.name = idxName || false;
            idx.column = name;
            idx.customIndex = definition.unique !== true;
            this.uniqueKeys[idxName] = idx;
          }
          if (Object.prototype.hasOwnProperty.call(definition, "validate")) {
            this.prototype.validators[name] = definition.validate;
          }
          if (definition.index === true && definition.type instanceof DataTypes2.JSONB) {
            this._indexes.push(Utils2.nameIndex(this._conformIndex({
              fields: [definition.field || name],
              using: "gin"
            }), this.getTableName()));
            delete definition.index;
          }
        });
        this.fieldAttributeMap = _.reduce(this.fieldRawAttributesMap, (map, value, key) => {
          if (key !== value.fieldName) {
            map[key] = value.fieldName;
          }
          return map;
        }, {});
        this._hasJsonAttributes = !!this._jsonAttributes.size;
        this._hasVirtualAttributes = !!this._virtualAttributes.size;
        this._hasDefaultValues = !_.isEmpty(this._defaultValues);
        this.tableAttributes = _.omitBy(this.rawAttributes, (_a, key) => this._virtualAttributes.has(key));
        this.prototype._hasCustomGetters = Object.keys(this.prototype._customGetters).length;
        this.prototype._hasCustomSetters = Object.keys(this.prototype._customSetters).length;
        for (const key of Object.keys(attributeManipulation)) {
          if (Object.prototype.hasOwnProperty.call(Model3.prototype, key)) {
            this.sequelize.log(`Not overriding built-in method from model attribute: ${key}`);
            continue;
          }
          Object.defineProperty(this.prototype, key, attributeManipulation[key]);
        }
        this.prototype.rawAttributes = this.rawAttributes;
        this.prototype._isAttribute = (key) => Object.prototype.hasOwnProperty.call(this.prototype.rawAttributes, key);
        this.primaryKeyAttributes = Object.keys(this.primaryKeys);
        this.primaryKeyAttribute = this.primaryKeyAttributes[0];
        if (this.primaryKeyAttribute) {
          this.primaryKeyField = this.rawAttributes[this.primaryKeyAttribute].field || this.primaryKeyAttribute;
        }
        this._hasPrimaryKeys = this.primaryKeyAttributes.length > 0;
        this._isPrimaryKey = (key) => this.primaryKeyAttributes.includes(key);
        this._attributeManipulation = attributeManipulation;
      }
      static removeAttribute(attribute) {
        delete this.rawAttributes[attribute];
        this.refreshAttributes();
      }
      static async sync(options) {
        options = __spreadValues(__spreadValues({}, this.options), options);
        options.hooks = options.hooks === void 0 ? true : !!options.hooks;
        const attributes = this.tableAttributes;
        const rawAttributes = this.fieldRawAttributesMap;
        if (options.hooks) {
          await this.runHooks("beforeSync", options);
        }
        if (options.force) {
          await this.drop(options);
        }
        const tableName = this.getTableName(options);
        await this.queryInterface.createTable(tableName, attributes, options, this);
        if (options.alter) {
          const tableInfos = await Promise.all([
            this.queryInterface.describeTable(tableName, options),
            this.queryInterface.getForeignKeyReferencesForTable(tableName, options)
          ]);
          const columns = tableInfos[0];
          const foreignKeyReferences = tableInfos[1];
          const removedConstraints = {};
          for (const columnName in attributes) {
            if (!Object.prototype.hasOwnProperty.call(attributes, columnName))
              continue;
            if (!columns[columnName] && !columns[attributes[columnName].field]) {
              await this.queryInterface.addColumn(tableName, attributes[columnName].field || columnName, attributes[columnName], options);
            }
          }
          if (options.alter === true || typeof options.alter === "object" && options.alter.drop !== false) {
            for (const columnName in columns) {
              if (!Object.prototype.hasOwnProperty.call(columns, columnName))
                continue;
              const currentAttribute = rawAttributes[columnName];
              if (!currentAttribute) {
                await this.queryInterface.removeColumn(tableName, columnName, options);
                continue;
              }
              if (currentAttribute.primaryKey)
                continue;
              const references = currentAttribute.references;
              if (currentAttribute.references) {
                const database = this.sequelize.config.database;
                const schema = this.sequelize.config.schema;
                for (const foreignKeyReference of foreignKeyReferences) {
                  const constraintName = foreignKeyReference.constraintName;
                  if (!!constraintName && foreignKeyReference.tableCatalog === database && (schema ? foreignKeyReference.tableSchema === schema : true) && foreignKeyReference.referencedTableName === references.model && foreignKeyReference.referencedColumnName === references.key && (schema ? foreignKeyReference.referencedTableSchema === schema : true) && !removedConstraints[constraintName]) {
                    await this.queryInterface.removeConstraint(tableName, constraintName, options);
                    removedConstraints[constraintName] = true;
                  }
                }
              }
              await this.queryInterface.changeColumn(tableName, columnName, currentAttribute, options);
            }
          }
        }
        let indexes = await this.queryInterface.showIndex(tableName, options);
        indexes = this._indexes.filter((item1) => !indexes.some((item2) => item1.name === item2.name)).sort((index1, index2) => {
          if (this.sequelize.options.dialect === "postgres") {
            if (index1.concurrently === true)
              return 1;
            if (index2.concurrently === true)
              return -1;
          }
          return 0;
        });
        for (const index of indexes) {
          await this.queryInterface.addIndex(tableName, __spreadValues(__spreadValues({}, options), index));
        }
        if (options.hooks) {
          await this.runHooks("afterSync", options);
        }
        return this;
      }
      static async drop(options) {
        return await this.queryInterface.dropTable(this.getTableName(options), options);
      }
      static async dropSchema(schema) {
        return await this.queryInterface.dropSchema(schema);
      }
      static schema(schema, options) {
        const clone = class extends this {
        };
        Object.defineProperty(clone, "name", { value: this.name });
        clone._schema = schema;
        if (options) {
          if (typeof options === "string") {
            clone._schemaDelimiter = options;
          } else if (options.schemaDelimiter) {
            clone._schemaDelimiter = options.schemaDelimiter;
          }
        }
        return clone;
      }
      static getTableName() {
        return this.queryGenerator.addSchema(this);
      }
      static unscoped() {
        return this.scope();
      }
      static addScope(name, scope, options) {
        options = __spreadValues({ override: false }, options);
        if ((name === "defaultScope" && Object.keys(this.options.defaultScope).length > 0 || name in this.options.scopes) && options.override === false) {
          throw new Error(`The scope ${name} already exists. Pass { override: true } as options to silence this error`);
        }
        if (name === "defaultScope") {
          this.options.defaultScope = this._scope = scope;
        } else {
          this.options.scopes[name] = scope;
        }
      }
      static scope(option) {
        const self2 = class extends this {
        };
        let scope;
        let scopeName;
        Object.defineProperty(self2, "name", { value: this.name });
        self2._scope = {};
        self2._scopeNames = [];
        self2.scoped = true;
        if (!option) {
          return self2;
        }
        const options = _.flatten(arguments);
        for (const option2 of options) {
          scope = null;
          scopeName = null;
          if (_.isPlainObject(option2)) {
            if (option2.method) {
              if (Array.isArray(option2.method) && !!self2.options.scopes[option2.method[0]]) {
                scopeName = option2.method[0];
                scope = self2.options.scopes[scopeName].apply(self2, option2.method.slice(1));
              } else if (self2.options.scopes[option2.method]) {
                scopeName = option2.method;
                scope = self2.options.scopes[scopeName].apply(self2);
              }
            } else {
              scope = option2;
            }
          } else if (option2 === "defaultScope" && _.isPlainObject(self2.options.defaultScope)) {
            scope = self2.options.defaultScope;
          } else {
            scopeName = option2;
            scope = self2.options.scopes[scopeName];
            if (typeof scope === "function") {
              scope = scope();
            }
          }
          if (scope) {
            this._conformIncludes(scope, this);
            this._assignOptions(self2._scope, Utils2.cloneDeep(scope));
            self2._scopeNames.push(scopeName ? scopeName : "defaultScope");
          } else {
            throw new sequelizeErrors.SequelizeScopeError(`Invalid scope ${scopeName} called.`);
          }
        }
        return self2;
      }
      static async findAll(options) {
        if (options !== void 0 && !_.isPlainObject(options)) {
          throw new sequelizeErrors.QueryError("The argument passed to findAll must be an options object, use findByPk if you wish to pass a single primary key value");
        }
        if (options !== void 0 && options.attributes) {
          if (!Array.isArray(options.attributes) && !_.isPlainObject(options.attributes)) {
            throw new sequelizeErrors.QueryError("The attributes option must be an array of column names or an object");
          }
        }
        this.warnOnInvalidOptions(options, Object.keys(this.rawAttributes));
        const tableNames = {};
        tableNames[this.getTableName(options)] = true;
        options = Utils2.cloneDeep(options);
        _.defaults(options, { hooks: true });
        options.rejectOnEmpty = Object.prototype.hasOwnProperty.call(options, "rejectOnEmpty") ? options.rejectOnEmpty : this.options.rejectOnEmpty;
        this._injectScope(options);
        if (options.hooks) {
          await this.runHooks("beforeFind", options);
        }
        this._conformIncludes(options, this);
        this._expandAttributes(options);
        this._expandIncludeAll(options);
        if (options.hooks) {
          await this.runHooks("beforeFindAfterExpandIncludeAll", options);
        }
        options.originalAttributes = this._injectDependentVirtualAttributes(options.attributes);
        if (options.include) {
          options.hasJoin = true;
          this._validateIncludedElements(options, tableNames);
          if (options.attributes && !options.raw && this.primaryKeyAttribute && !options.attributes.includes(this.primaryKeyAttribute) && (!options.group || !options.hasSingleAssociation || options.hasMultiAssociation)) {
            options.attributes = [this.primaryKeyAttribute].concat(options.attributes);
          }
        }
        if (!options.attributes) {
          options.attributes = Object.keys(this.rawAttributes);
          options.originalAttributes = this._injectDependentVirtualAttributes(options.attributes);
        }
        this.options.whereCollection = options.where || null;
        Utils2.mapFinderOptions(options, this);
        options = this._paranoidClause(this, options);
        if (options.hooks) {
          await this.runHooks("beforeFindAfterOptions", options);
        }
        const selectOptions = __spreadProps(__spreadValues({}, options), { tableNames: Object.keys(tableNames) });
        const results = await this.queryInterface.select(this, this.getTableName(selectOptions), selectOptions);
        if (options.hooks) {
          await this.runHooks("afterFind", results, options);
        }
        if (_.isEmpty(results) && options.rejectOnEmpty) {
          if (typeof options.rejectOnEmpty === "function") {
            throw new options.rejectOnEmpty();
          }
          if (typeof options.rejectOnEmpty === "object") {
            throw options.rejectOnEmpty;
          }
          throw new sequelizeErrors.EmptyResultError();
        }
        return await Model3._findSeparate(results, options);
      }
      static warnOnInvalidOptions(options, validColumnNames) {
        if (!_.isPlainObject(options)) {
          return;
        }
        const unrecognizedOptions = Object.keys(options).filter((k) => !validQueryKeywords.has(k));
        const unexpectedModelAttributes = _.intersection(unrecognizedOptions, validColumnNames);
        if (!options.where && unexpectedModelAttributes.length > 0) {
          logger.warn(`Model attributes (${unexpectedModelAttributes.join(", ")}) passed into finder method options of model ${this.name}, but the options.where object is empty. Did you forget to use options.where?`);
        }
      }
      static _injectDependentVirtualAttributes(attributes) {
        if (!this._hasVirtualAttributes)
          return attributes;
        if (!attributes || !Array.isArray(attributes))
          return attributes;
        for (const attribute of attributes) {
          if (this._virtualAttributes.has(attribute) && this.rawAttributes[attribute].type.fields) {
            attributes = attributes.concat(this.rawAttributes[attribute].type.fields);
          }
        }
        attributes = _.uniq(attributes);
        return attributes;
      }
      static async _findSeparate(results, options) {
        if (!options.include || options.raw || !results)
          return results;
        const original = results;
        if (options.plain)
          results = [results];
        if (!results.length)
          return original;
        await Promise.all(options.include.map(async (include) => {
          if (!include.separate) {
            return await Model3._findSeparate(results.reduce((memo, result) => {
              let associations = result.get(include.association.as);
              if (!associations)
                return memo;
              if (!Array.isArray(associations))
                associations = [associations];
              for (let i = 0, len = associations.length; i !== len; ++i) {
                memo.push(associations[i]);
              }
              return memo;
            }, []), __spreadProps(__spreadValues({}, _.omit(options, "include", "attributes", "order", "where", "limit", "offset", "plain", "scope")), {
              include: include.include || []
            }));
          }
          const map = await include.association.get(results, __spreadValues(__spreadValues({}, _.omit(options, nonCascadingOptions)), _.omit(include, ["parent", "association", "as", "originalAttributes"])));
          for (const result of results) {
            result.set(include.association.as, map[result.get(include.association.sourceKey)], { raw: true });
          }
        }));
        return original;
      }
      static async findByPk(param, options) {
        if ([null, void 0].includes(param)) {
          return null;
        }
        options = Utils2.cloneDeep(options) || {};
        if (typeof param === "number" || typeof param === "string" || Buffer.isBuffer(param)) {
          options.where = {
            [this.primaryKeyAttribute]: param
          };
        } else {
          throw new Error(`Argument passed to findByPk is invalid: ${param}`);
        }
        return await this.findOne(options);
      }
      static async findOne(options) {
        if (options !== void 0 && !_.isPlainObject(options)) {
          throw new Error("The argument passed to findOne must be an options object, use findByPk if you wish to pass a single primary key value");
        }
        options = Utils2.cloneDeep(options);
        if (options.limit === void 0) {
          const uniqueSingleColumns = _.chain(this.uniqueKeys).values().filter((c) => c.fields.length === 1).map("column").value();
          if (!options.where || !_.some(options.where, (value, key) => (key === this.primaryKeyAttribute || uniqueSingleColumns.includes(key)) && (Utils2.isPrimitive(value) || Buffer.isBuffer(value)))) {
            options.limit = 1;
          }
        }
        return await this.findAll(_.defaults(options, {
          plain: true
        }));
      }
      static async aggregate(attribute, aggregateFunction, options) {
        options = Utils2.cloneDeep(options);
        const prevAttributes = options.attributes;
        this._injectScope(options);
        options.attributes = prevAttributes;
        this._conformIncludes(options, this);
        if (options.include) {
          this._expandIncludeAll(options);
          this._validateIncludedElements(options);
        }
        const attrOptions = this.rawAttributes[attribute];
        const field = attrOptions && attrOptions.field || attribute;
        let aggregateColumn = this.sequelize.col(field);
        if (options.distinct) {
          aggregateColumn = this.sequelize.fn("DISTINCT", aggregateColumn);
        }
        let { group } = options;
        if (Array.isArray(group) && Array.isArray(group[0])) {
          noDoubleNestedGroup();
          group = _.flatten(group);
        }
        options.attributes = _.unionBy(options.attributes, group, [[this.sequelize.fn(aggregateFunction, aggregateColumn), aggregateFunction]], (a) => Array.isArray(a) ? a[1] : a);
        if (!options.dataType) {
          if (attrOptions) {
            options.dataType = attrOptions.type;
          } else {
            options.dataType = new DataTypes2.FLOAT();
          }
        } else {
          options.dataType = this.sequelize.normalizeDataType(options.dataType);
        }
        Utils2.mapOptionFieldNames(options, this);
        options = this._paranoidClause(this, options);
        const value = await this.queryInterface.rawSelect(this.getTableName(options), options, aggregateFunction, this);
        return value;
      }
      static async count(options) {
        options = Utils2.cloneDeep(options);
        options = _.defaults(options, { hooks: true });
        options.raw = true;
        if (options.hooks) {
          await this.runHooks("beforeCount", options);
        }
        let col2 = options.col || "*";
        if (options.include) {
          col2 = `${this.name}.${options.col || this.primaryKeyField}`;
        }
        if (options.distinct && col2 === "*") {
          col2 = this.primaryKeyField;
        }
        options.plain = !options.group;
        options.dataType = new DataTypes2.INTEGER();
        options.includeIgnoreAttributes = false;
        options.limit = null;
        options.offset = null;
        options.order = null;
        const result = await this.aggregate(col2, "count", options);
        if (Array.isArray(result)) {
          return result.map((item) => __spreadProps(__spreadValues({}, item), {
            count: Number(item.count)
          }));
        }
        return result;
      }
      static async findAndCountAll(options) {
        if (options !== void 0 && !_.isPlainObject(options)) {
          throw new Error("The argument passed to findAndCountAll must be an options object, use findByPk if you wish to pass a single primary key value");
        }
        const countOptions = Utils2.cloneDeep(options);
        if (countOptions.attributes) {
          countOptions.attributes = void 0;
        }
        const [count, rows] = await Promise.all([
          this.count(countOptions),
          this.findAll(options)
        ]);
        return {
          count,
          rows: count === 0 ? [] : rows
        };
      }
      static async max(field, options) {
        return await this.aggregate(field, "max", options);
      }
      static async min(field, options) {
        return await this.aggregate(field, "min", options);
      }
      static async sum(field, options) {
        return await this.aggregate(field, "sum", options);
      }
      static build(values, options) {
        if (Array.isArray(values)) {
          return this.bulkBuild(values, options);
        }
        return new this(values, options);
      }
      static bulkBuild(valueSets, options) {
        options = __spreadValues({ isNewRecord: true }, options);
        if (!options.includeValidated) {
          this._conformIncludes(options, this);
          if (options.include) {
            this._expandIncludeAll(options);
            this._validateIncludedElements(options);
          }
        }
        if (options.attributes) {
          options.attributes = options.attributes.map((attribute) => Array.isArray(attribute) ? attribute[1] : attribute);
        }
        return valueSets.map((values) => this.build(values, options));
      }
      static async create(values, options) {
        options = Utils2.cloneDeep(options || {});
        return await this.build(values, {
          isNewRecord: true,
          attributes: options.fields,
          include: options.include,
          raw: options.raw,
          silent: options.silent
        }).save(options);
      }
      static async findOrBuild(options) {
        if (!options || !options.where || arguments.length > 1) {
          throw new Error("Missing where attribute in the options parameter passed to findOrBuild. Please note that the API has changed, and is now options only (an object with where, defaults keys, transaction etc.)");
        }
        let values;
        let instance = await this.findOne(options);
        if (instance === null) {
          values = __spreadValues({}, options.defaults);
          if (_.isPlainObject(options.where)) {
            values = Utils2.defaults(values, options.where);
          }
          instance = this.build(values, options);
          return [instance, true];
        }
        return [instance, false];
      }
      static async findOrCreate(options) {
        if (!options || !options.where || arguments.length > 1) {
          throw new Error("Missing where attribute in the options parameter passed to findOrCreate. Please note that the API has changed, and is now options only (an object with where, defaults keys, transaction etc.)");
        }
        options = __spreadValues({}, options);
        if (options.defaults) {
          const defaults = Object.keys(options.defaults);
          const unknownDefaults = defaults.filter((name) => !this.rawAttributes[name]);
          if (unknownDefaults.length) {
            logger.warn(`Unknown attributes (${unknownDefaults}) passed to defaults option of findOrCreate`);
          }
        }
        if (options.transaction === void 0 && this.sequelize.constructor._cls) {
          const t = this.sequelize.constructor._cls.get("transaction");
          if (t) {
            options.transaction = t;
          }
        }
        const internalTransaction = !options.transaction;
        let values;
        let transaction;
        try {
          const t = await this.sequelize.transaction(options);
          transaction = t;
          options.transaction = t;
          const found = await this.findOne(Utils2.defaults({ transaction }, options));
          if (found !== null) {
            return [found, false];
          }
          values = __spreadValues({}, options.defaults);
          if (_.isPlainObject(options.where)) {
            values = Utils2.defaults(values, options.where);
          }
          options.exception = true;
          options.returning = true;
          try {
            const created = await this.create(values, options);
            if (created.get(this.primaryKeyAttribute, { raw: true }) === null) {
              throw new sequelizeErrors.UniqueConstraintError();
            }
            return [created, true];
          } catch (err) {
            if (!(err instanceof sequelizeErrors.UniqueConstraintError))
              throw err;
            const flattenedWhere = Utils2.flattenObjectDeep(options.where);
            const flattenedWhereKeys = Object.keys(flattenedWhere).map((name) => _.last(name.split(".")));
            const whereFields = flattenedWhereKeys.map((name) => _.get(this.rawAttributes, `${name}.field`, name));
            const defaultFields = options.defaults && Object.keys(options.defaults).filter((name) => this.rawAttributes[name]).map((name) => this.rawAttributes[name].field || name);
            const errFieldKeys = Object.keys(err.fields);
            const errFieldsWhereIntersects = Utils2.intersects(errFieldKeys, whereFields);
            if (defaultFields && !errFieldsWhereIntersects && Utils2.intersects(errFieldKeys, defaultFields)) {
              throw err;
            }
            if (errFieldsWhereIntersects) {
              _.each(err.fields, (value, key) => {
                const name = this.fieldRawAttributesMap[key].fieldName;
                if (value.toString() !== options.where[name].toString()) {
                  throw new Error(`${this.name}#findOrCreate: value used for ${name} was not equal for both the find and the create calls, '${options.where[name]}' vs '${value}'`);
                }
              });
            }
            const otherCreated = await this.findOne(Utils2.defaults({
              transaction: internalTransaction ? null : transaction
            }, options));
            if (otherCreated === null)
              throw err;
            return [otherCreated, false];
          }
        } finally {
          if (internalTransaction && transaction) {
            await transaction.commit();
          }
        }
      }
      static async findCreateFind(options) {
        if (!options || !options.where) {
          throw new Error("Missing where attribute in the options parameter passed to findCreateFind.");
        }
        let values = __spreadValues({}, options.defaults);
        if (_.isPlainObject(options.where)) {
          values = Utils2.defaults(values, options.where);
        }
        const found = await this.findOne(options);
        if (found)
          return [found, false];
        try {
          const createOptions = __spreadValues({}, options);
          if (this.sequelize.options.dialect === "postgres" && options.transaction) {
            createOptions.ignoreDuplicates = true;
          }
          const created = await this.create(values, createOptions);
          return [created, true];
        } catch (err) {
          if (!(err instanceof sequelizeErrors.UniqueConstraintError || err instanceof sequelizeErrors.EmptyResultError)) {
            throw err;
          }
          const foundAgain = await this.findOne(options);
          return [foundAgain, false];
        }
      }
      static async upsert(values, options) {
        options = __spreadValues({
          hooks: true,
          returning: true,
          validate: true
        }, Utils2.cloneDeep(options));
        const createdAtAttr = this._timestampAttributes.createdAt;
        const updatedAtAttr = this._timestampAttributes.updatedAt;
        const hasPrimary = this.primaryKeyField in values || this.primaryKeyAttribute in values;
        const instance = this.build(values);
        options.model = this;
        options.instance = instance;
        const changed = Array.from(instance._changed);
        if (!options.fields) {
          options.fields = changed;
        }
        if (options.validate) {
          await instance.validate(options);
        }
        const updatedDataValues = _.pick(instance.dataValues, changed);
        const insertValues = Utils2.mapValueFieldNames(instance.dataValues, Object.keys(instance.rawAttributes), this);
        const updateValues = Utils2.mapValueFieldNames(updatedDataValues, options.fields, this);
        const now = Utils2.now(this.sequelize.options.dialect);
        if (createdAtAttr && !insertValues[createdAtAttr]) {
          const field = this.rawAttributes[createdAtAttr].field || createdAtAttr;
          insertValues[field] = this._getDefaultTimestamp(createdAtAttr) || now;
        }
        if (updatedAtAttr && !insertValues[updatedAtAttr]) {
          const field = this.rawAttributes[updatedAtAttr].field || updatedAtAttr;
          insertValues[field] = updateValues[field] = this._getDefaultTimestamp(updatedAtAttr) || now;
        }
        if (this.sequelize.options.dialect === "db2") {
          this.uniqno = this.sequelize.dialect.queryGenerator.addUniqueFields(insertValues, this.rawAttributes, this.uniqno);
        }
        if (!hasPrimary && this.primaryKeyAttribute && !this.rawAttributes[this.primaryKeyAttribute].defaultValue) {
          delete insertValues[this.primaryKeyField];
          delete updateValues[this.primaryKeyField];
        }
        if (options.hooks) {
          await this.runHooks("beforeUpsert", values, options);
        }
        const result = await this.queryInterface.upsert(this.getTableName(options), insertValues, updateValues, instance.where(), options);
        const [record] = result;
        record.isNewRecord = false;
        if (options.hooks) {
          await this.runHooks("afterUpsert", result, options);
          return result;
        }
        return result;
      }
      static async bulkCreate(records, options = {}) {
        if (!records.length) {
          return [];
        }
        const dialect = this.sequelize.options.dialect;
        const now = Utils2.now(this.sequelize.options.dialect);
        options = Utils2.cloneDeep(options);
        options.model = this;
        if (!options.includeValidated) {
          this._conformIncludes(options, this);
          if (options.include) {
            this._expandIncludeAll(options);
            this._validateIncludedElements(options);
          }
        }
        const instances = records.map((values) => this.build(values, { isNewRecord: true, include: options.include }));
        const recursiveBulkCreate = async (instances2, options2) => {
          options2 = __spreadValues({
            validate: false,
            hooks: true,
            individualHooks: false,
            ignoreDuplicates: false
          }, options2);
          if (options2.returning === void 0) {
            if (options2.association) {
              options2.returning = false;
            } else {
              options2.returning = true;
            }
          }
          if (options2.ignoreDuplicates && ["mssql", "db2"].includes(dialect)) {
            throw new Error(`${dialect} does not support the ignoreDuplicates option.`);
          }
          if (options2.updateOnDuplicate && (dialect !== "mysql" && dialect !== "mariadb" && dialect !== "sqlite" && dialect !== "postgres")) {
            throw new Error(`${dialect} does not support the updateOnDuplicate option.`);
          }
          const model = options2.model;
          options2.fields = options2.fields || Object.keys(model.rawAttributes);
          const createdAtAttr = model._timestampAttributes.createdAt;
          const updatedAtAttr = model._timestampAttributes.updatedAt;
          if (options2.updateOnDuplicate !== void 0) {
            if (Array.isArray(options2.updateOnDuplicate) && options2.updateOnDuplicate.length) {
              options2.updateOnDuplicate = _.intersection(_.without(Object.keys(model.tableAttributes), createdAtAttr), options2.updateOnDuplicate);
            } else {
              throw new Error("updateOnDuplicate option only supports non-empty array.");
            }
          }
          if (options2.hooks) {
            await model.runHooks("beforeBulkCreate", instances2, options2);
          }
          if (options2.validate) {
            const errors = [];
            const validateOptions = __spreadValues({}, options2);
            validateOptions.hooks = options2.individualHooks;
            await Promise.all(instances2.map(async (instance) => {
              try {
                await instance.validate(validateOptions);
              } catch (err) {
                errors.push(new sequelizeErrors.BulkRecordError(err, instance));
              }
            }));
            delete options2.skip;
            if (errors.length) {
              throw new sequelizeErrors.AggregateError(errors);
            }
          }
          if (options2.individualHooks) {
            await Promise.all(instances2.map(async (instance) => {
              const individualOptions = __spreadProps(__spreadValues({}, options2), {
                validate: false,
                hooks: true
              });
              delete individualOptions.fields;
              delete individualOptions.individualHooks;
              delete individualOptions.ignoreDuplicates;
              await instance.save(individualOptions);
            }));
          } else {
            if (options2.include && options2.include.length) {
              await Promise.all(options2.include.filter((include) => include.association instanceof BelongsTo2).map(async (include) => {
                const associationInstances = [];
                const associationInstanceIndexToInstanceMap = [];
                for (const instance of instances2) {
                  const associationInstance = instance.get(include.as);
                  if (associationInstance) {
                    associationInstances.push(associationInstance);
                    associationInstanceIndexToInstanceMap.push(instance);
                  }
                }
                if (!associationInstances.length) {
                  return;
                }
                const includeOptions = _(Utils2.cloneDeep(include)).omit(["association"]).defaults({
                  transaction: options2.transaction,
                  logging: options2.logging
                }).value();
                const createdAssociationInstances = await recursiveBulkCreate(associationInstances, includeOptions);
                for (const idx in createdAssociationInstances) {
                  const associationInstance = createdAssociationInstances[idx];
                  const instance = associationInstanceIndexToInstanceMap[idx];
                  await include.association.set(instance, associationInstance, { save: false, logging: options2.logging });
                }
              }));
            }
            records = instances2.map((instance) => {
              const values = instance.dataValues;
              if (createdAtAttr && !values[createdAtAttr]) {
                values[createdAtAttr] = now;
                if (!options2.fields.includes(createdAtAttr)) {
                  options2.fields.push(createdAtAttr);
                }
              }
              if (updatedAtAttr && !values[updatedAtAttr]) {
                values[updatedAtAttr] = now;
                if (!options2.fields.includes(updatedAtAttr)) {
                  options2.fields.push(updatedAtAttr);
                }
              }
              const out = Utils2.mapValueFieldNames(values, options2.fields, model);
              for (const key of model._virtualAttributes) {
                delete out[key];
              }
              return out;
            });
            const fieldMappedAttributes = {};
            for (const attr in model.tableAttributes) {
              fieldMappedAttributes[model.rawAttributes[attr].field || attr] = model.rawAttributes[attr];
            }
            if (options2.updateOnDuplicate) {
              options2.updateOnDuplicate = options2.updateOnDuplicate.map((attr) => model.rawAttributes[attr].field || attr);
              const upsertKeys = [];
              for (const i of model._indexes) {
                if (i.unique && !i.where) {
                  upsertKeys.push(...i.fields);
                }
              }
              const firstUniqueKey = Object.values(model.uniqueKeys).find((c) => c.fields.length > 0);
              if (firstUniqueKey && firstUniqueKey.fields) {
                upsertKeys.push(...firstUniqueKey.fields);
              }
              options2.upsertKeys = upsertKeys.length > 0 ? upsertKeys : Object.values(model.primaryKeys).map((x) => x.field);
            }
            if (options2.returning && Array.isArray(options2.returning)) {
              options2.returning = options2.returning.map((attr) => _.get(model.rawAttributes[attr], "field", attr));
            }
            const results = await model.queryInterface.bulkInsert(model.getTableName(options2), records, options2, fieldMappedAttributes);
            if (Array.isArray(results)) {
              results.forEach((result, i) => {
                const instance = instances2[i];
                for (const key in result) {
                  if (!instance || key === model.primaryKeyAttribute && instance.get(model.primaryKeyAttribute) && ["mysql", "mariadb", "sqlite"].includes(dialect)) {
                    continue;
                  }
                  if (Object.prototype.hasOwnProperty.call(result, key)) {
                    const record = result[key];
                    const attr = _.find(model.rawAttributes, (attribute) => attribute.fieldName === key || attribute.field === key);
                    instance.dataValues[attr && attr.fieldName || key] = record;
                  }
                }
              });
            }
          }
          if (options2.include && options2.include.length) {
            await Promise.all(options2.include.filter((include) => !(include.association instanceof BelongsTo2 || include.parent && include.parent.association instanceof BelongsToMany2)).map(async (include) => {
              const associationInstances = [];
              const associationInstanceIndexToInstanceMap = [];
              for (const instance of instances2) {
                let associated = instance.get(include.as);
                if (!Array.isArray(associated))
                  associated = [associated];
                for (const associationInstance of associated) {
                  if (associationInstance) {
                    if (!(include.association instanceof BelongsToMany2)) {
                      associationInstance.set(include.association.foreignKey, instance.get(include.association.sourceKey || instance.constructor.primaryKeyAttribute, { raw: true }), { raw: true });
                      Object.assign(associationInstance, include.association.scope);
                    }
                    associationInstances.push(associationInstance);
                    associationInstanceIndexToInstanceMap.push(instance);
                  }
                }
              }
              if (!associationInstances.length) {
                return;
              }
              const includeOptions = _(Utils2.cloneDeep(include)).omit(["association"]).defaults({
                transaction: options2.transaction,
                logging: options2.logging
              }).value();
              const createdAssociationInstances = await recursiveBulkCreate(associationInstances, includeOptions);
              if (include.association instanceof BelongsToMany2) {
                const valueSets = [];
                for (const idx in createdAssociationInstances) {
                  const associationInstance = createdAssociationInstances[idx];
                  const instance = associationInstanceIndexToInstanceMap[idx];
                  const values = __spreadValues({
                    [include.association.foreignKey]: instance.get(instance.constructor.primaryKeyAttribute, { raw: true }),
                    [include.association.otherKey]: associationInstance.get(associationInstance.constructor.primaryKeyAttribute, { raw: true })
                  }, include.association.through.scope);
                  if (associationInstance[include.association.through.model.name]) {
                    for (const attr of Object.keys(include.association.through.model.rawAttributes)) {
                      if (include.association.through.model.rawAttributes[attr]._autoGenerated || attr === include.association.foreignKey || attr === include.association.otherKey || typeof associationInstance[include.association.through.model.name][attr] === void 0) {
                        continue;
                      }
                      values[attr] = associationInstance[include.association.through.model.name][attr];
                    }
                  }
                  valueSets.push(values);
                }
                const throughOptions = _(Utils2.cloneDeep(include)).omit(["association", "attributes"]).defaults({
                  transaction: options2.transaction,
                  logging: options2.logging
                }).value();
                throughOptions.model = include.association.throughModel;
                const throughInstances = include.association.throughModel.bulkBuild(valueSets, throughOptions);
                await recursiveBulkCreate(throughInstances, throughOptions);
              }
            }));
          }
          instances2.forEach((instance) => {
            for (const attr in model.rawAttributes) {
              if (model.rawAttributes[attr].field && instance.dataValues[model.rawAttributes[attr].field] !== void 0 && model.rawAttributes[attr].field !== attr) {
                instance.dataValues[attr] = instance.dataValues[model.rawAttributes[attr].field];
                delete instance.dataValues[model.rawAttributes[attr].field];
              }
              instance._previousDataValues[attr] = instance.dataValues[attr];
              instance.changed(attr, false);
            }
            instance.isNewRecord = false;
          });
          if (options2.hooks) {
            await model.runHooks("afterBulkCreate", instances2, options2);
          }
          return instances2;
        };
        return await recursiveBulkCreate(instances, options);
      }
      static async truncate(options) {
        options = Utils2.cloneDeep(options) || {};
        options.truncate = true;
        return await this.destroy(options);
      }
      static async destroy(options) {
        options = Utils2.cloneDeep(options);
        this._injectScope(options);
        if (!options || !(options.where || options.truncate)) {
          throw new Error("Missing where or truncate attribute in the options parameter of model.destroy.");
        }
        if (!options.truncate && !_.isPlainObject(options.where) && !Array.isArray(options.where) && !(options.where instanceof Utils2.SequelizeMethod)) {
          throw new Error("Expected plain object, array or sequelize method in the options.where parameter of model.destroy.");
        }
        options = _.defaults(options, {
          hooks: true,
          individualHooks: false,
          force: false,
          cascade: false,
          restartIdentity: false
        });
        options.type = QueryTypes2.BULKDELETE;
        Utils2.mapOptionFieldNames(options, this);
        options.model = this;
        if (options.hooks) {
          await this.runHooks("beforeBulkDestroy", options);
        }
        let instances;
        if (options.individualHooks) {
          instances = await this.findAll({ where: options.where, transaction: options.transaction, logging: options.logging, benchmark: options.benchmark });
          await Promise.all(instances.map((instance) => this.runHooks("beforeDestroy", instance, options)));
        }
        let result;
        if (this._timestampAttributes.deletedAt && !options.force) {
          options.type = QueryTypes2.BULKUPDATE;
          const attrValueHash = {};
          const deletedAtAttribute = this.rawAttributes[this._timestampAttributes.deletedAt];
          const field = this.rawAttributes[this._timestampAttributes.deletedAt].field;
          const where2 = {
            [field]: Object.prototype.hasOwnProperty.call(deletedAtAttribute, "defaultValue") ? deletedAtAttribute.defaultValue : null
          };
          attrValueHash[field] = Utils2.now(this.sequelize.options.dialect);
          result = await this.queryInterface.bulkUpdate(this.getTableName(options), attrValueHash, Object.assign(where2, options.where), options, this.rawAttributes);
        } else {
          result = await this.queryInterface.bulkDelete(this.getTableName(options), options.where, options, this);
        }
        if (options.individualHooks) {
          await Promise.all(instances.map((instance) => this.runHooks("afterDestroy", instance, options)));
        }
        if (options.hooks) {
          await this.runHooks("afterBulkDestroy", options);
        }
        return result;
      }
      static async restore(options) {
        if (!this._timestampAttributes.deletedAt)
          throw new Error("Model is not paranoid");
        options = __spreadValues({
          hooks: true,
          individualHooks: false
        }, options);
        options.type = QueryTypes2.RAW;
        options.model = this;
        Utils2.mapOptionFieldNames(options, this);
        if (options.hooks) {
          await this.runHooks("beforeBulkRestore", options);
        }
        let instances;
        if (options.individualHooks) {
          instances = await this.findAll({ where: options.where, transaction: options.transaction, logging: options.logging, benchmark: options.benchmark, paranoid: false });
          await Promise.all(instances.map((instance) => this.runHooks("beforeRestore", instance, options)));
        }
        const attrValueHash = {};
        const deletedAtCol = this._timestampAttributes.deletedAt;
        const deletedAtAttribute = this.rawAttributes[deletedAtCol];
        const deletedAtDefaultValue = Object.prototype.hasOwnProperty.call(deletedAtAttribute, "defaultValue") ? deletedAtAttribute.defaultValue : null;
        attrValueHash[deletedAtAttribute.field || deletedAtCol] = deletedAtDefaultValue;
        options.omitNull = false;
        const result = await this.queryInterface.bulkUpdate(this.getTableName(options), attrValueHash, options.where, options, this.rawAttributes);
        if (options.individualHooks) {
          await Promise.all(instances.map((instance) => this.runHooks("afterRestore", instance, options)));
        }
        if (options.hooks) {
          await this.runHooks("afterBulkRestore", options);
        }
        return result;
      }
      static async update(values, options) {
        options = Utils2.cloneDeep(options);
        this._injectScope(options);
        this._optionsMustContainWhere(options);
        options = this._paranoidClause(this, _.defaults(options, {
          validate: true,
          hooks: true,
          individualHooks: false,
          returning: false,
          force: false,
          sideEffects: true
        }));
        options.type = QueryTypes2.BULKUPDATE;
        values = _.omitBy(values, (value) => value === void 0);
        if (options.fields && options.fields instanceof Array) {
          for (const key of Object.keys(values)) {
            if (!options.fields.includes(key)) {
              delete values[key];
            }
          }
        } else {
          const updatedAtAttr = this._timestampAttributes.updatedAt;
          options.fields = _.intersection(Object.keys(values), Object.keys(this.tableAttributes));
          if (updatedAtAttr && !options.fields.includes(updatedAtAttr)) {
            options.fields.push(updatedAtAttr);
          }
        }
        if (this._timestampAttributes.updatedAt && !options.silent) {
          values[this._timestampAttributes.updatedAt] = this._getDefaultTimestamp(this._timestampAttributes.updatedAt) || Utils2.now(this.sequelize.options.dialect);
        }
        options.model = this;
        let valuesUse;
        if (options.validate) {
          const build = this.build(values);
          build.set(this._timestampAttributes.updatedAt, values[this._timestampAttributes.updatedAt], { raw: true });
          if (options.sideEffects) {
            Object.assign(values, _.pick(build.get(), build.changed()));
            options.fields = _.union(options.fields, Object.keys(values));
          }
          options.skip = _.difference(Object.keys(this.rawAttributes), Object.keys(values));
          const attributes = await build.validate(options);
          options.skip = void 0;
          if (attributes && attributes.dataValues) {
            values = _.pick(attributes.dataValues, Object.keys(values));
          }
        }
        if (options.hooks) {
          options.attributes = values;
          await this.runHooks("beforeBulkUpdate", options);
          values = options.attributes;
          delete options.attributes;
        }
        valuesUse = values;
        let instances;
        let updateDoneRowByRow = false;
        if (options.individualHooks) {
          instances = await this.findAll({
            where: options.where,
            transaction: options.transaction,
            logging: options.logging,
            benchmark: options.benchmark,
            paranoid: options.paranoid
          });
          if (instances.length) {
            let changedValues;
            let different = false;
            instances = await Promise.all(instances.map(async (instance) => {
              Object.assign(instance.dataValues, values);
              _.forIn(valuesUse, (newValue, attr) => {
                if (newValue !== instance._previousDataValues[attr]) {
                  instance.setDataValue(attr, newValue);
                }
              });
              await this.runHooks("beforeUpdate", instance, options);
              if (!different) {
                const thisChangedValues = {};
                _.forIn(instance.dataValues, (newValue, attr) => {
                  if (newValue !== instance._previousDataValues[attr]) {
                    thisChangedValues[attr] = newValue;
                  }
                });
                if (!changedValues) {
                  changedValues = thisChangedValues;
                } else {
                  different = !_.isEqual(changedValues, thisChangedValues);
                }
              }
              return instance;
            }));
            if (!different) {
              const keys = Object.keys(changedValues);
              if (keys.length) {
                valuesUse = changedValues;
                options.fields = _.union(options.fields, keys);
              }
            } else {
              instances = await Promise.all(instances.map(async (instance) => {
                const individualOptions = __spreadProps(__spreadValues({}, options), {
                  hooks: false,
                  validate: false
                });
                delete individualOptions.individualHooks;
                return instance.save(individualOptions);
              }));
              updateDoneRowByRow = true;
            }
          }
        }
        let result;
        if (updateDoneRowByRow) {
          result = [instances.length, instances];
        } else if (_.isEmpty(valuesUse) || Object.keys(valuesUse).length === 1 && valuesUse[this._timestampAttributes.updatedAt]) {
          result = [0];
        } else {
          valuesUse = Utils2.mapValueFieldNames(valuesUse, options.fields, this);
          options = Utils2.mapOptionFieldNames(options, this);
          options.hasTrigger = this.options ? this.options.hasTrigger : false;
          const affectedRows = await this.queryInterface.bulkUpdate(this.getTableName(options), valuesUse, options.where, options, this.tableAttributes);
          if (options.returning) {
            result = [affectedRows.length, affectedRows];
            instances = affectedRows;
          } else {
            result = [affectedRows];
          }
        }
        if (options.individualHooks) {
          await Promise.all(instances.map((instance) => this.runHooks("afterUpdate", instance, options)));
          result[1] = instances;
        }
        if (options.hooks) {
          options.attributes = values;
          await this.runHooks("afterBulkUpdate", options);
          delete options.attributes;
        }
        return result;
      }
      static async describe(schema, options) {
        return await this.queryInterface.describeTable(this.tableName, __spreadValues({ schema: schema || this._schema || void 0 }, options));
      }
      static _getDefaultTimestamp(attr) {
        if (!!this.rawAttributes[attr] && !!this.rawAttributes[attr].defaultValue) {
          return Utils2.toDefaultValue(this.rawAttributes[attr].defaultValue, this.sequelize.options.dialect);
        }
        return void 0;
      }
      static _expandAttributes(options) {
        if (!_.isPlainObject(options.attributes)) {
          return;
        }
        let attributes = Object.keys(this.rawAttributes);
        if (options.attributes.exclude) {
          attributes = attributes.filter((elem) => !options.attributes.exclude.includes(elem));
        }
        if (options.attributes.include) {
          attributes = attributes.concat(options.attributes.include);
        }
        options.attributes = attributes;
      }
      static _injectScope(options) {
        const scope = Utils2.cloneDeep(this._scope);
        this._defaultsOptions(options, scope);
      }
      static [Symbol.for("nodejs.util.inspect.custom")]() {
        return this.name;
      }
      static hasAlias(alias) {
        return Object.prototype.hasOwnProperty.call(this.associations, alias);
      }
      static async increment(fields, options) {
        options = options || {};
        if (typeof fields === "string")
          fields = [fields];
        if (Array.isArray(fields)) {
          fields = fields.map((f) => {
            if (this.rawAttributes[f] && this.rawAttributes[f].field && this.rawAttributes[f].field !== f) {
              return this.rawAttributes[f].field;
            }
            return f;
          });
        } else if (fields && typeof fields === "object") {
          fields = Object.keys(fields).reduce((rawFields, f) => {
            if (this.rawAttributes[f] && this.rawAttributes[f].field && this.rawAttributes[f].field !== f) {
              rawFields[this.rawAttributes[f].field] = fields[f];
            } else {
              rawFields[f] = fields[f];
            }
            return rawFields;
          }, {});
        }
        this._injectScope(options);
        this._optionsMustContainWhere(options);
        options = Utils2.defaults({}, options, {
          by: 1,
          where: {},
          increment: true
        });
        const isSubtraction = !options.increment;
        Utils2.mapOptionFieldNames(options, this);
        const where2 = __spreadValues({}, options.where);
        let incrementAmountsByField = {};
        if (Array.isArray(fields)) {
          incrementAmountsByField = {};
          for (const field of fields) {
            incrementAmountsByField[field] = options.by;
          }
        } else {
          incrementAmountsByField = fields;
        }
        if (this._versionAttribute) {
          incrementAmountsByField[this._versionAttribute] = isSubtraction ? -1 : 1;
        }
        const extraAttributesToBeUpdated = {};
        const updatedAtAttr = this._timestampAttributes.updatedAt;
        if (!options.silent && updatedAtAttr && !incrementAmountsByField[updatedAtAttr]) {
          const attrName = this.rawAttributes[updatedAtAttr].field || updatedAtAttr;
          extraAttributesToBeUpdated[attrName] = this._getDefaultTimestamp(updatedAtAttr) || Utils2.now(this.sequelize.options.dialect);
        }
        const tableName = this.getTableName(options);
        let affectedRows;
        if (isSubtraction) {
          affectedRows = await this.queryInterface.decrement(this, tableName, where2, incrementAmountsByField, extraAttributesToBeUpdated, options);
        } else {
          affectedRows = await this.queryInterface.increment(this, tableName, where2, incrementAmountsByField, extraAttributesToBeUpdated, options);
        }
        if (options.returning) {
          return [affectedRows, affectedRows.length];
        }
        return [affectedRows];
      }
      static async decrement(fields, options) {
        return this.increment(fields, __spreadProps(__spreadValues({
          by: 1
        }, options), {
          increment: false
        }));
      }
      static _optionsMustContainWhere(options) {
        assert(options && options.where, "Missing where attribute in the options parameter");
        assert(_.isPlainObject(options.where) || Array.isArray(options.where) || options.where instanceof Utils2.SequelizeMethod, "Expected plain object, array or sequelize method in the options.where parameter");
      }
      where(checkVersion) {
        const where2 = this.constructor.primaryKeyAttributes.reduce((result, attribute) => {
          result[attribute] = this.get(attribute, { raw: true });
          return result;
        }, {});
        if (_.size(where2) === 0) {
          return this.constructor.options.whereCollection;
        }
        const versionAttr = this.constructor._versionAttribute;
        if (checkVersion && versionAttr) {
          where2[versionAttr] = this.get(versionAttr, { raw: true });
        }
        return Utils2.mapWhereFieldNames(where2, this.constructor);
      }
      toString() {
        return `[object SequelizeInstance:${this.constructor.name}]`;
      }
      getDataValue(key) {
        return this.dataValues[key];
      }
      setDataValue(key, value) {
        const originalValue = this._previousDataValues[key];
        if (!_.isEqual(value, originalValue)) {
          this.changed(key, true);
        }
        this.dataValues[key] = value;
      }
      get(key, options) {
        if (options === void 0 && typeof key === "object") {
          options = key;
          key = void 0;
        }
        options = options || {};
        if (key) {
          if (Object.prototype.hasOwnProperty.call(this._customGetters, key) && !options.raw) {
            return this._customGetters[key].call(this, key, options);
          }
          if (options.plain && this._options.include && this._options.includeNames.includes(key)) {
            if (Array.isArray(this.dataValues[key])) {
              return this.dataValues[key].map((instance) => instance.get(options));
            }
            if (this.dataValues[key] instanceof Model3) {
              return this.dataValues[key].get(options);
            }
            return this.dataValues[key];
          }
          return this.dataValues[key];
        }
        if (this._hasCustomGetters || options.plain && this._options.include || options.clone) {
          const values = {};
          let _key;
          if (this._hasCustomGetters) {
            for (_key in this._customGetters) {
              if (this._options.attributes && !this._options.attributes.includes(_key)) {
                continue;
              }
              if (Object.prototype.hasOwnProperty.call(this._customGetters, _key)) {
                values[_key] = this.get(_key, options);
              }
            }
          }
          for (_key in this.dataValues) {
            if (!Object.prototype.hasOwnProperty.call(values, _key) && Object.prototype.hasOwnProperty.call(this.dataValues, _key)) {
              values[_key] = this.get(_key, options);
            }
          }
          return values;
        }
        return this.dataValues;
      }
      set(key, value, options) {
        let values;
        let originalValue;
        if (typeof key === "object" && key !== null) {
          values = key;
          options = value || {};
          if (options.reset) {
            this.dataValues = {};
            for (const key2 in values) {
              this.changed(key2, false);
            }
          }
          if (options.raw && !(this._options && this._options.include) && !(options && options.attributes) && !this.constructor._hasDateAttributes && !this.constructor._hasBooleanAttributes) {
            if (Object.keys(this.dataValues).length) {
              Object.assign(this.dataValues, values);
            } else {
              this.dataValues = values;
            }
            this._previousDataValues = __spreadValues({}, this.dataValues);
          } else {
            if (options.attributes) {
              const setKeys = (data) => {
                for (const k of data) {
                  if (values[k] === void 0) {
                    continue;
                  }
                  this.set(k, values[k], options);
                }
              };
              setKeys(options.attributes);
              if (this.constructor._hasVirtualAttributes) {
                setKeys(this.constructor._virtualAttributes);
              }
              if (this._options.includeNames) {
                setKeys(this._options.includeNames);
              }
            } else {
              for (const key2 in values) {
                this.set(key2, values[key2], options);
              }
            }
            if (options.raw) {
              this._previousDataValues = __spreadValues({}, this.dataValues);
            }
          }
          return this;
        }
        if (!options)
          options = {};
        if (!options.raw) {
          originalValue = this.dataValues[key];
        }
        if (!options.raw && this._customSetters[key]) {
          this._customSetters[key].call(this, value, key);
          const newValue = this.dataValues[key];
          if (!_.isEqual(newValue, originalValue)) {
            this._previousDataValues[key] = originalValue;
            this.changed(key, true);
          }
        } else {
          if (this._options && this._options.include && this._options.includeNames.includes(key)) {
            this._setInclude(key, value, options);
            return this;
          }
          if (!options.raw) {
            if (!this._isAttribute(key)) {
              if (key.includes(".") && this.constructor._jsonAttributes.has(key.split(".")[0])) {
                const previousNestedValue = Dottie.get(this.dataValues, key);
                if (!_.isEqual(previousNestedValue, value)) {
                  Dottie.set(this.dataValues, key, value);
                  this.changed(key.split(".")[0], true);
                }
              }
              return this;
            }
            if (this.constructor._hasPrimaryKeys && originalValue && this.constructor._isPrimaryKey(key)) {
              return this;
            }
            if (!this.isNewRecord && this.constructor._hasReadOnlyAttributes && this.constructor._readOnlyAttributes.has(key)) {
              return this;
            }
          }
          if (!(value instanceof Utils2.SequelizeMethod) && Object.prototype.hasOwnProperty.call(this.constructor._dataTypeSanitizers, key)) {
            value = this.constructor._dataTypeSanitizers[key].call(this, value, options);
          }
          if (!options.raw && (value instanceof Utils2.SequelizeMethod || !(value instanceof Utils2.SequelizeMethod) && this.constructor._dataTypeChanges[key] && this.constructor._dataTypeChanges[key].call(this, value, originalValue, options) || !this.constructor._dataTypeChanges[key] && !_.isEqual(value, originalValue))) {
            this._previousDataValues[key] = originalValue;
            this.changed(key, true);
          }
          this.dataValues[key] = value;
        }
        return this;
      }
      setAttributes(updates) {
        return this.set(updates);
      }
      changed(key, value) {
        if (key === void 0) {
          if (this._changed.size > 0) {
            return Array.from(this._changed);
          }
          return false;
        }
        if (value === true) {
          this._changed.add(key);
          return this;
        }
        if (value === false) {
          this._changed.delete(key);
          return this;
        }
        return this._changed.has(key);
      }
      previous(key) {
        if (key) {
          return this._previousDataValues[key];
        }
        return _.pickBy(this._previousDataValues, (value, key2) => this.changed(key2));
      }
      _setInclude(key, value, options) {
        if (!Array.isArray(value))
          value = [value];
        if (value[0] instanceof Model3) {
          value = value.map((instance) => instance.dataValues);
        }
        const include = this._options.includeMap[key];
        const association = include.association;
        const accessor = key;
        const primaryKeyAttribute = include.model.primaryKeyAttribute;
        const childOptions = {
          isNewRecord: this.isNewRecord,
          include: include.include,
          includeNames: include.includeNames,
          includeMap: include.includeMap,
          includeValidated: true,
          raw: options.raw,
          attributes: include.originalAttributes
        };
        let isEmpty;
        if (include.originalAttributes === void 0 || include.originalAttributes.length) {
          if (association.isSingleAssociation) {
            if (Array.isArray(value)) {
              value = value[0];
            }
            isEmpty = value && value[primaryKeyAttribute] === null || value === null;
            this[accessor] = this.dataValues[accessor] = isEmpty ? null : include.model.build(value, childOptions);
          } else {
            isEmpty = value[0] && value[0][primaryKeyAttribute] === null;
            this[accessor] = this.dataValues[accessor] = isEmpty ? [] : include.model.bulkBuild(value, childOptions);
          }
        }
      }
      async save(options) {
        if (arguments.length > 1) {
          throw new Error("The second argument was removed in favor of the options object.");
        }
        options = Utils2.cloneDeep(options);
        options = _.defaults(options, {
          hooks: true,
          validate: true
        });
        if (!options.fields) {
          if (this.isNewRecord) {
            options.fields = Object.keys(this.constructor.rawAttributes);
          } else {
            options.fields = _.intersection(this.changed(), Object.keys(this.constructor.rawAttributes));
          }
          options.defaultFields = options.fields;
        }
        if (options.returning === void 0) {
          if (options.association) {
            options.returning = false;
          } else if (this.isNewRecord) {
            options.returning = true;
          }
        }
        const primaryKeyName = this.constructor.primaryKeyAttribute;
        const primaryKeyAttribute = primaryKeyName && this.constructor.rawAttributes[primaryKeyName];
        const createdAtAttr = this.constructor._timestampAttributes.createdAt;
        const versionAttr = this.constructor._versionAttribute;
        const hook = this.isNewRecord ? "Create" : "Update";
        const wasNewRecord = this.isNewRecord;
        const now = Utils2.now(this.sequelize.options.dialect);
        let updatedAtAttr = this.constructor._timestampAttributes.updatedAt;
        if (updatedAtAttr && options.fields.length > 0 && !options.fields.includes(updatedAtAttr)) {
          options.fields.push(updatedAtAttr);
        }
        if (versionAttr && options.fields.length > 0 && !options.fields.includes(versionAttr)) {
          options.fields.push(versionAttr);
        }
        if (options.silent === true && !(this.isNewRecord && this.get(updatedAtAttr, { raw: true }))) {
          _.remove(options.fields, (val) => val === updatedAtAttr);
          updatedAtAttr = false;
        }
        if (this.isNewRecord === true) {
          if (createdAtAttr && !options.fields.includes(createdAtAttr)) {
            options.fields.push(createdAtAttr);
          }
          if (primaryKeyAttribute && primaryKeyAttribute.defaultValue && !options.fields.includes(primaryKeyName)) {
            options.fields.unshift(primaryKeyName);
          }
        }
        if (this.isNewRecord === false) {
          if (primaryKeyName && this.get(primaryKeyName, { raw: true }) === void 0) {
            throw new Error("You attempted to save an instance with no primary key, this is not allowed since it would result in a global update");
          }
        }
        if (updatedAtAttr && !options.silent && options.fields.includes(updatedAtAttr)) {
          this.dataValues[updatedAtAttr] = this.constructor._getDefaultTimestamp(updatedAtAttr) || now;
        }
        if (this.isNewRecord && createdAtAttr && !this.dataValues[createdAtAttr]) {
          this.dataValues[createdAtAttr] = this.constructor._getDefaultTimestamp(createdAtAttr) || now;
        }
        if (this.sequelize.options.dialect === "db2" && this.isNewRecord) {
          this.uniqno = this.sequelize.dialect.queryGenerator.addUniqueFields(this.dataValues, this.constructor.rawAttributes, this.uniqno);
        }
        if (options.validate) {
          await this.validate(options);
        }
        if (options.hooks) {
          const beforeHookValues = _.pick(this.dataValues, options.fields);
          let ignoreChanged = _.difference(this.changed(), options.fields);
          let hookChanged;
          let afterHookValues;
          if (updatedAtAttr && options.fields.includes(updatedAtAttr)) {
            ignoreChanged = _.without(ignoreChanged, updatedAtAttr);
          }
          await this.constructor.runHooks(`before${hook}`, this, options);
          if (options.defaultFields && !this.isNewRecord) {
            afterHookValues = _.pick(this.dataValues, _.difference(this.changed(), ignoreChanged));
            hookChanged = [];
            for (const key of Object.keys(afterHookValues)) {
              if (afterHookValues[key] !== beforeHookValues[key]) {
                hookChanged.push(key);
              }
            }
            options.fields = _.uniq(options.fields.concat(hookChanged));
          }
          if (hookChanged) {
            if (options.validate) {
              options.skip = _.difference(Object.keys(this.constructor.rawAttributes), hookChanged);
              await this.validate(options);
              delete options.skip;
            }
          }
        }
        if (options.fields.length && this.isNewRecord && this._options.include && this._options.include.length) {
          await Promise.all(this._options.include.filter((include) => include.association instanceof BelongsTo2).map(async (include) => {
            const instance = this.get(include.as);
            if (!instance)
              return;
            const includeOptions = _(Utils2.cloneDeep(include)).omit(["association"]).defaults({
              transaction: options.transaction,
              logging: options.logging,
              parentRecord: this
            }).value();
            await instance.save(includeOptions);
            await this[include.association.accessors.set](instance, { save: false, logging: options.logging });
          }));
        }
        const realFields = options.fields.filter((field) => !this.constructor._virtualAttributes.has(field));
        if (!realFields.length)
          return this;
        if (!this.changed() && !this.isNewRecord)
          return this;
        const versionFieldName = _.get(this.constructor.rawAttributes[versionAttr], "field") || versionAttr;
        const values = Utils2.mapValueFieldNames(this.dataValues, options.fields, this.constructor);
        let query = null;
        let args = [];
        let where2;
        if (this.isNewRecord) {
          query = "insert";
          args = [this, this.constructor.getTableName(options), values, options];
        } else {
          where2 = this.where(true);
          if (versionAttr) {
            values[versionFieldName] = parseInt(values[versionFieldName], 10) + 1;
          }
          query = "update";
          args = [this, this.constructor.getTableName(options), values, where2, options];
        }
        const [result, rowsUpdated] = await this.constructor.queryInterface[query](...args);
        if (versionAttr) {
          if (rowsUpdated < 1) {
            throw new sequelizeErrors.OptimisticLockError({
              modelName: this.constructor.name,
              values,
              where: where2
            });
          } else {
            result.dataValues[versionAttr] = values[versionFieldName];
          }
        }
        for (const attr of Object.keys(this.constructor.rawAttributes)) {
          if (this.constructor.rawAttributes[attr].field && values[this.constructor.rawAttributes[attr].field] !== void 0 && this.constructor.rawAttributes[attr].field !== attr) {
            values[attr] = values[this.constructor.rawAttributes[attr].field];
            delete values[this.constructor.rawAttributes[attr].field];
          }
        }
        Object.assign(values, result.dataValues);
        Object.assign(result.dataValues, values);
        if (wasNewRecord && this._options.include && this._options.include.length) {
          await Promise.all(this._options.include.filter((include) => !(include.association instanceof BelongsTo2 || include.parent && include.parent.association instanceof BelongsToMany2)).map(async (include) => {
            let instances = this.get(include.as);
            if (!instances)
              return;
            if (!Array.isArray(instances))
              instances = [instances];
            const includeOptions = _(Utils2.cloneDeep(include)).omit(["association"]).defaults({
              transaction: options.transaction,
              logging: options.logging,
              parentRecord: this
            }).value();
            await Promise.all(instances.map(async (instance) => {
              if (include.association instanceof BelongsToMany2) {
                await instance.save(includeOptions);
                const values0 = __spreadValues({
                  [include.association.foreignKey]: this.get(this.constructor.primaryKeyAttribute, { raw: true }),
                  [include.association.otherKey]: instance.get(instance.constructor.primaryKeyAttribute, { raw: true })
                }, include.association.through.scope);
                if (instance[include.association.through.model.name]) {
                  for (const attr of Object.keys(include.association.through.model.rawAttributes)) {
                    if (include.association.through.model.rawAttributes[attr]._autoGenerated || attr === include.association.foreignKey || attr === include.association.otherKey || typeof instance[include.association.through.model.name][attr] === void 0) {
                      continue;
                    }
                    values0[attr] = instance[include.association.through.model.name][attr];
                  }
                }
                await include.association.throughModel.create(values0, includeOptions);
              } else {
                instance.set(include.association.foreignKey, this.get(include.association.sourceKey || this.constructor.primaryKeyAttribute, { raw: true }), { raw: true });
                Object.assign(instance, include.association.scope);
                await instance.save(includeOptions);
              }
            }));
          }));
        }
        if (options.hooks) {
          await this.constructor.runHooks(`after${hook}`, result, options);
        }
        for (const field of options.fields) {
          result._previousDataValues[field] = result.dataValues[field];
          this.changed(field, false);
        }
        this.isNewRecord = false;
        return result;
      }
      async reload(options) {
        options = Utils2.defaults({
          where: this.where()
        }, options, {
          include: this._options.include || void 0
        });
        const reloaded = await this.constructor.findOne(options);
        if (!reloaded) {
          throw new sequelizeErrors.InstanceError("Instance could not be reloaded because it does not exist anymore (find call returned null)");
        }
        this._options = reloaded._options;
        this.set(reloaded.dataValues, {
          raw: true,
          reset: !options.attributes
        });
        return this;
      }
      async validate(options) {
        return new InstanceValidator(this, options).validate();
      }
      async update(values, options) {
        values = _.omitBy(values, (value) => value === void 0);
        const changedBefore = this.changed() || [];
        options = options || {};
        if (Array.isArray(options))
          options = { fields: options };
        options = Utils2.cloneDeep(options);
        const setOptions = Utils2.cloneDeep(options);
        setOptions.attributes = options.fields;
        this.set(values, setOptions);
        const sideEffects = _.without(this.changed(), ...changedBefore);
        const fields = _.union(Object.keys(values), sideEffects);
        if (!options.fields) {
          options.fields = _.intersection(fields, this.changed());
          options.defaultFields = options.fields;
        }
        return await this.save(options);
      }
      async destroy(options) {
        options = __spreadValues({
          hooks: true,
          force: false
        }, options);
        if (options.hooks) {
          await this.constructor.runHooks("beforeDestroy", this, options);
        }
        const where2 = this.where(true);
        let result;
        if (this.constructor._timestampAttributes.deletedAt && options.force === false) {
          const attributeName = this.constructor._timestampAttributes.deletedAt;
          const attribute = this.constructor.rawAttributes[attributeName];
          const defaultValue = Object.prototype.hasOwnProperty.call(attribute, "defaultValue") ? attribute.defaultValue : null;
          const currentValue = this.getDataValue(attributeName);
          const undefinedOrNull = currentValue == null && defaultValue == null;
          if (undefinedOrNull || _.isEqual(currentValue, defaultValue)) {
            this.setDataValue(attributeName, new Date());
          }
          result = await this.save(__spreadProps(__spreadValues({}, options), { hooks: false }));
        } else {
          result = await this.constructor.queryInterface.delete(this, this.constructor.getTableName(options), where2, __spreadValues({ type: QueryTypes2.DELETE, limit: null }, options));
        }
        if (options.hooks) {
          await this.constructor.runHooks("afterDestroy", this, options);
        }
        return result;
      }
      isSoftDeleted() {
        if (!this.constructor._timestampAttributes.deletedAt) {
          throw new Error("Model is not paranoid");
        }
        const deletedAtAttribute = this.constructor.rawAttributes[this.constructor._timestampAttributes.deletedAt];
        const defaultValue = Object.prototype.hasOwnProperty.call(deletedAtAttribute, "defaultValue") ? deletedAtAttribute.defaultValue : null;
        const deletedAt = this.get(this.constructor._timestampAttributes.deletedAt) || null;
        const isSet = deletedAt !== defaultValue;
        return isSet;
      }
      async restore(options) {
        if (!this.constructor._timestampAttributes.deletedAt)
          throw new Error("Model is not paranoid");
        options = __spreadValues({
          hooks: true,
          force: false
        }, options);
        if (options.hooks) {
          await this.constructor.runHooks("beforeRestore", this, options);
        }
        const deletedAtCol = this.constructor._timestampAttributes.deletedAt;
        const deletedAtAttribute = this.constructor.rawAttributes[deletedAtCol];
        const deletedAtDefaultValue = Object.prototype.hasOwnProperty.call(deletedAtAttribute, "defaultValue") ? deletedAtAttribute.defaultValue : null;
        this.setDataValue(deletedAtCol, deletedAtDefaultValue);
        const result = await this.save(__spreadProps(__spreadValues({}, options), { hooks: false, omitNull: false }));
        if (options.hooks) {
          await this.constructor.runHooks("afterRestore", this, options);
          return result;
        }
        return result;
      }
      async increment(fields, options) {
        const identifier2 = this.where();
        options = Utils2.cloneDeep(options);
        options.where = __spreadValues(__spreadValues({}, options.where), identifier2);
        options.instance = this;
        await this.constructor.increment(fields, options);
        return this;
      }
      async decrement(fields, options) {
        return this.increment(fields, __spreadProps(__spreadValues({
          by: 1
        }, options), {
          increment: false
        }));
      }
      equals(other) {
        if (!other || !other.constructor) {
          return false;
        }
        if (!(other instanceof this.constructor)) {
          return false;
        }
        return this.constructor.primaryKeyAttributes.every((attribute) => this.get(attribute, { raw: true }) === other.get(attribute, { raw: true }));
      }
      equalsOneOf(others) {
        return others.some((other) => this.equals(other));
      }
      setValidators(attribute, validators) {
        this.validators[attribute] = validators;
      }
      toJSON() {
        return _.cloneDeep(this.get({
          plain: true
        }));
      }
      static hasMany(target, options) {
      }
      static belongsToMany(target, options) {
      }
      static hasOne(target, options) {
      }
      static belongsTo(target, options) {
      }
    };
    Object.assign(Model3, associationsMixin);
    Hooks.applyTo(Model3, true);
    module.exports = Model3;
  }
});

// node_modules/sequelize/lib/deferrable.js
var require_deferrable = __commonJS({
  "node_modules/sequelize/lib/deferrable.js"(exports, module) {
    "use strict";
    var { classToInvokable } = require_utils();
    var ABSTRACT2 = class {
      static toString(...args) {
        return new this().toString(...args);
      }
      toString(...args) {
        return this.toSql(...args);
      }
      toSql() {
        throw new Error("toSql implementation missing");
      }
    };
    var INITIALLY_DEFERRED = class extends ABSTRACT2 {
      toSql() {
        return "DEFERRABLE INITIALLY DEFERRED";
      }
    };
    var INITIALLY_IMMEDIATE = class extends ABSTRACT2 {
      toSql() {
        return "DEFERRABLE INITIALLY IMMEDIATE";
      }
    };
    var NOT = class extends ABSTRACT2 {
      toSql() {
        return "NOT DEFERRABLE";
      }
    };
    var SET_DEFERRED = class extends ABSTRACT2 {
      constructor(constraints) {
        super();
        this.constraints = constraints;
      }
      toSql(queryGenerator) {
        return queryGenerator.setDeferredQuery(this.constraints);
      }
    };
    var SET_IMMEDIATE = class extends ABSTRACT2 {
      constructor(constraints) {
        super();
        this.constraints = constraints;
      }
      toSql(queryGenerator) {
        return queryGenerator.setImmediateQuery(this.constraints);
      }
    };
    var Deferrable2 = {
      INITIALLY_DEFERRED: classToInvokable(INITIALLY_DEFERRED),
      INITIALLY_IMMEDIATE: classToInvokable(INITIALLY_IMMEDIATE),
      NOT: classToInvokable(NOT),
      SET_DEFERRED: classToInvokable(SET_DEFERRED),
      SET_IMMEDIATE: classToInvokable(SET_IMMEDIATE)
    };
    module.exports = Deferrable2;
  }
});

// node_modules/toposort-class/build/toposort.js
var require_toposort = __commonJS({
  "node_modules/toposort-class/build/toposort.js"(exports, module) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define("Toposort", ["exports", "module"], factory);
      } else if (typeof exports !== "undefined" && typeof module !== "undefined") {
        factory(exports, module);
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports, mod);
        global2.Toposort = mod.exports;
      }
    })(exports, function(exports2, module2) {
      "use strict";
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var Toposort = function() {
        function Toposort2() {
          _classCallCheck(this, Toposort2);
          this.edges = [];
          this.Toposort = Toposort2;
        }
        Toposort2.prototype.add = function add(item, deps) {
          if (typeof item !== "string" || !item) {
            throw new TypeError("Dependent name must be given as a not empty string");
          }
          deps = Array.isArray(deps) ? deps : [deps];
          if (deps.length > 0) {
            for (var _iterator = deps, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
              var _ref;
              if (_isArray) {
                if (_i >= _iterator.length) {
                  break;
                }
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) {
                  break;
                }
                _ref = _i.value;
              }
              var dep = _ref;
              if (typeof dep !== "string" || !dep) {
                throw new TypeError("Dependency name must be given as a not empty string");
              }
              this.edges.push([item, dep]);
            }
          } else {
            this.edges.push([item]);
          }
          return this;
        };
        Toposort2.prototype.sort = function sort() {
          var _this = this;
          var nodes = [];
          for (var _iterator2 = this.edges, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator](); ; ) {
            var _ref2;
            if (_isArray2) {
              if (_i2 >= _iterator2.length) {
                break;
              }
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) {
                break;
              }
              _ref2 = _i2.value;
            }
            var edge = _ref2;
            for (var _iterator3 = edge, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator](); ; ) {
              var _ref3;
              if (_isArray3) {
                if (_i3 >= _iterator3.length) {
                  break;
                }
                _ref3 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done) {
                  break;
                }
                _ref3 = _i3.value;
              }
              var node = _ref3;
              if (nodes.indexOf(node) === -1) {
                nodes.push(node);
              }
            }
          }
          var place = nodes.length;
          var sorted = new Array(nodes.length);
          var visit = function visit2(node2, predecessors) {
            if (predecessors.length !== 0 && predecessors.indexOf(node2) !== -1) {
              throw new Error("Cyclic dependency found. " + node2 + " is dependent of itself.\nDependency chain: " + predecessors.join(" -> ") + " => " + node2);
            }
            var index = nodes.indexOf(node2);
            if (index !== -1) {
              var copy = false;
              nodes[index] = false;
              for (var _iterator4 = _this.edges, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator](); ; ) {
                var _ref4;
                if (_isArray4) {
                  if (_i4 >= _iterator4.length) {
                    break;
                  }
                  _ref4 = _iterator4[_i4++];
                } else {
                  _i4 = _iterator4.next();
                  if (_i4.done) {
                    break;
                  }
                  _ref4 = _i4.value;
                }
                var edge2 = _ref4;
                if (edge2[0] === node2) {
                  copy = copy || predecessors.concat([node2]);
                  visit2(edge2[1], copy);
                }
              }
              sorted[--place] = node2;
            }
          };
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node !== false) {
              nodes[i] = false;
              for (var _iterator5 = this.edges, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator](); ; ) {
                var _ref5;
                if (_isArray5) {
                  if (_i5 >= _iterator5.length) {
                    break;
                  }
                  _ref5 = _iterator5[_i5++];
                } else {
                  _i5 = _iterator5.next();
                  if (_i5.done) {
                    break;
                  }
                  _ref5 = _i5.value;
                }
                var edge = _ref5;
                if (edge[0] === node) {
                  visit(edge[1], [node]);
                }
              }
              sorted[--place] = node;
            }
          }
          return sorted;
        };
        Toposort2.prototype.clear = function clear() {
          this.edges = [];
          return this;
        };
        return Toposort2;
      }();
      module2.exports = Toposort;
    });
  }
});

// node_modules/toposort-class/index.js
var require_toposort_class = __commonJS({
  "node_modules/toposort-class/index.js"(exports, module) {
    module.exports = require_toposort();
  }
});

// node_modules/sequelize/lib/model-manager.js
var require_model_manager = __commonJS({
  "node_modules/sequelize/lib/model-manager.js"(exports, module) {
    "use strict";
    var Toposort = require_toposort_class();
    var _ = require_lodash();
    var ModelManager = class {
      constructor(sequelize) {
        this.models = [];
        this.sequelize = sequelize;
      }
      addModel(model) {
        this.models.push(model);
        this.sequelize.models[model.name] = model;
        return model;
      }
      removeModel(modelToRemove) {
        this.models = this.models.filter((model) => model.name !== modelToRemove.name);
        delete this.sequelize.models[modelToRemove.name];
      }
      getModel(against, options) {
        options = _.defaults(options || {}, {
          attribute: "name"
        });
        return this.models.find((model) => model[options.attribute] === against);
      }
      get all() {
        return this.models;
      }
      forEachModel(iterator, options) {
        const models = {};
        const sorter = new Toposort();
        let sorted;
        let dep;
        options = _.defaults(options || {}, {
          reverse: true
        });
        for (const model of this.models) {
          let deps = [];
          let tableName = model.getTableName();
          if (_.isObject(tableName)) {
            tableName = `${tableName.schema}.${tableName.tableName}`;
          }
          models[tableName] = model;
          for (const attrName in model.rawAttributes) {
            if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {
              const attribute = model.rawAttributes[attrName];
              if (attribute.references) {
                dep = attribute.references.model;
                if (_.isObject(dep)) {
                  dep = `${dep.schema}.${dep.tableName}`;
                }
                deps.push(dep);
              }
            }
          }
          deps = deps.filter((dep2) => tableName !== dep2);
          sorter.add(tableName, deps);
        }
        sorted = sorter.sort();
        if (options.reverse) {
          sorted = sorted.reverse();
        }
        for (const name of sorted) {
          iterator(models[name], name);
        }
      }
    };
    module.exports = ModelManager;
    module.exports.ModelManager = ModelManager;
    module.exports.default = ModelManager;
  }
});

// node_modules/sequelize/lib/transaction.js
var require_transaction = __commonJS({
  "node_modules/sequelize/lib/transaction.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var Transaction2 = class {
      constructor(sequelize, options) {
        this.sequelize = sequelize;
        this.savepoints = [];
        this._afterCommitHooks = [];
        const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;
        this.options = __spreadValues({
          type: sequelize.options.transactionType,
          isolationLevel: sequelize.options.isolationLevel,
          readOnly: false
        }, options);
        this.parent = this.options.transaction;
        if (this.parent) {
          this.id = this.parent.id;
          this.parent.savepoints.push(this);
          this.name = `${this.id}-sp-${this.parent.savepoints.length}`;
        } else {
          this.id = this.name = generateTransactionId();
        }
        delete this.options.transaction;
      }
      async commit() {
        if (this.finished) {
          throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);
        }
        try {
          return await this.sequelize.getQueryInterface().commitTransaction(this, this.options);
        } finally {
          this.finished = "commit";
          this.cleanup();
          for (const hook of this._afterCommitHooks) {
            await hook.apply(this, [this]);
          }
        }
      }
      async rollback() {
        if (this.finished) {
          throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);
        }
        if (!this.connection) {
          throw new Error("Transaction cannot be rolled back because it never started");
        }
        try {
          return await this.sequelize.getQueryInterface().rollbackTransaction(this, this.options);
        } finally {
          this.cleanup();
        }
      }
      async prepareEnvironment(useCLS) {
        let connectionPromise;
        if (useCLS === void 0) {
          useCLS = true;
        }
        if (this.parent) {
          connectionPromise = Promise.resolve(this.parent.connection);
        } else {
          const acquireOptions = { uuid: this.id };
          if (this.options.readOnly) {
            acquireOptions.type = "SELECT";
          }
          connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);
        }
        let result;
        const connection = await connectionPromise;
        this.connection = connection;
        this.connection.uuid = this.id;
        try {
          await this.begin();
          result = await this.setDeferrable();
        } catch (setupErr) {
          try {
            result = await this.rollback();
          } finally {
            throw setupErr;
          }
        }
        if (useCLS && this.sequelize.constructor._cls) {
          this.sequelize.constructor._cls.set("transaction", this);
        }
        return result;
      }
      async setDeferrable() {
        if (this.options.deferrable) {
          return await this.sequelize.getQueryInterface().deferConstraints(this, this.options);
        }
      }
      async begin() {
        const queryInterface = this.sequelize.getQueryInterface();
        if (this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction) {
          await queryInterface.startTransaction(this, this.options);
          return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);
        }
        await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);
        return queryInterface.startTransaction(this, this.options);
      }
      cleanup() {
        if (this.parent || this.connection.uuid === void 0)
          return;
        this._clearCls();
        const res = this.sequelize.connectionManager.releaseConnection(this.connection);
        this.connection.uuid = void 0;
        return res;
      }
      _clearCls() {
        const cls = this.sequelize.constructor._cls;
        if (cls) {
          if (cls.get("transaction") === this) {
            cls.set("transaction", null);
          }
        }
      }
      afterCommit(fn2) {
        if (!fn2 || typeof fn2 !== "function") {
          throw new Error('"fn" must be a function');
        }
        this._afterCommitHooks.push(fn2);
      }
      static get TYPES() {
        return {
          DEFERRED: "DEFERRED",
          IMMEDIATE: "IMMEDIATE",
          EXCLUSIVE: "EXCLUSIVE"
        };
      }
      static get ISOLATION_LEVELS() {
        return {
          READ_UNCOMMITTED: "READ UNCOMMITTED",
          READ_COMMITTED: "READ COMMITTED",
          REPEATABLE_READ: "REPEATABLE READ",
          SERIALIZABLE: "SERIALIZABLE"
        };
      }
      static get LOCK() {
        return {
          UPDATE: "UPDATE",
          SHARE: "SHARE",
          KEY_SHARE: "KEY SHARE",
          NO_KEY_UPDATE: "NO KEY UPDATE"
        };
      }
      get LOCK() {
        return Transaction2.LOCK;
      }
    };
    module.exports = Transaction2;
    module.exports.Transaction = Transaction2;
    module.exports.default = Transaction2;
  }
});

// node_modules/sequelize/lib/table-hints.js
var require_table_hints = __commonJS({
  "node_modules/sequelize/lib/table-hints.js"(exports, module) {
    "use strict";
    var TableHints2 = module.exports = {
      NOLOCK: "NOLOCK",
      READUNCOMMITTED: "READUNCOMMITTED",
      UPDLOCK: "UPDLOCK",
      REPEATABLEREAD: "REPEATABLEREAD",
      SERIALIZABLE: "SERIALIZABLE",
      READCOMMITTED: "READCOMMITTED",
      TABLOCK: "TABLOCK",
      TABLOCKX: "TABLOCKX",
      PAGLOCK: "PAGLOCK",
      ROWLOCK: "ROWLOCK",
      NOWAIT: "NOWAIT",
      READPAST: "READPAST",
      XLOCK: "XLOCK",
      SNAPSHOT: "SNAPSHOT",
      NOEXPAND: "NOEXPAND"
    };
  }
});

// node_modules/sequelize/lib/index-hints.js
var require_index_hints = __commonJS({
  "node_modules/sequelize/lib/index-hints.js"(exports, module) {
    "use strict";
    var IndexHints2 = module.exports = {
      USE: "USE",
      FORCE: "FORCE",
      IGNORE: "IGNORE"
    };
  }
});

// node_modules/sequelize/lib/associations/index.js
var require_associations = __commonJS({
  "node_modules/sequelize/lib/associations/index.js"(exports, module) {
    "use strict";
    var Association2 = require_base();
    Association2.BelongsTo = require_belongs_to();
    Association2.HasOne = require_has_one();
    Association2.HasMany = require_has_many();
    Association2.BelongsToMany = require_belongs_to_many();
    module.exports = Association2;
    module.exports.default = Association2;
    module.exports.Association = Association2;
  }
});

// node_modules/sequelize/lib/dialects/abstract/query-interface.js
var require_query_interface = __commonJS({
  "node_modules/sequelize/lib/dialects/abstract/query-interface.js"(exports) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var _ = require_lodash();
    var Utils2 = require_utils();
    var DataTypes2 = require_data_types8();
    var Transaction2 = require_transaction();
    var QueryTypes2 = require_query_types();
    var QueryInterface2 = class {
      constructor(sequelize, queryGenerator) {
        this.sequelize = sequelize;
        this.queryGenerator = queryGenerator;
      }
      async createDatabase(database, options) {
        options = options || {};
        const sql = this.queryGenerator.createDatabaseQuery(database, options);
        return await this.sequelize.query(sql, options);
      }
      async dropDatabase(database, options) {
        options = options || {};
        const sql = this.queryGenerator.dropDatabaseQuery(database);
        return await this.sequelize.query(sql, options);
      }
      async createSchema(schema, options) {
        options = options || {};
        const sql = this.queryGenerator.createSchema(schema);
        return await this.sequelize.query(sql, options);
      }
      async dropSchema(schema, options) {
        options = options || {};
        const sql = this.queryGenerator.dropSchema(schema);
        return await this.sequelize.query(sql, options);
      }
      async dropAllSchemas(options) {
        options = options || {};
        if (!this.queryGenerator._dialect.supports.schemas) {
          return this.sequelize.drop(options);
        }
        const schemas = await this.showAllSchemas(options);
        return Promise.all(schemas.map((schemaName) => this.dropSchema(schemaName, options)));
      }
      async showAllSchemas(options) {
        options = __spreadProps(__spreadValues({}, options), {
          raw: true,
          type: this.sequelize.QueryTypes.SELECT
        });
        const showSchemasSql = this.queryGenerator.showSchemasQuery(options);
        const schemaNames = await this.sequelize.query(showSchemasSql, options);
        return _.flatten(schemaNames.map((value) => value.schema_name ? value.schema_name : value));
      }
      async databaseVersion(options) {
        return await this.sequelize.query(this.queryGenerator.versionQuery(), __spreadProps(__spreadValues({}, options), { type: QueryTypes2.VERSION }));
      }
      async createTable(tableName, attributes, options, model) {
        let sql = "";
        options = __spreadValues({}, options);
        if (options && options.uniqueKeys) {
          _.forOwn(options.uniqueKeys, (uniqueKey) => {
            if (uniqueKey.customIndex === void 0) {
              uniqueKey.customIndex = true;
            }
          });
        }
        if (model) {
          options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;
        }
        attributes = _.mapValues(attributes, (attribute) => this.sequelize.normalizeAttribute(attribute));
        await this.ensureEnums(tableName, attributes, options, model);
        if (!tableName.schema && (options.schema || !!model && model._schema)) {
          tableName = this.queryGenerator.addSchema({
            tableName,
            _schema: !!model && model._schema || options.schema
          });
        }
        attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: "createTable" });
        sql = this.queryGenerator.createTableQuery(tableName, attributes, options);
        return await this.sequelize.query(sql, options);
      }
      async dropTable(tableName, options) {
        options = __spreadValues({}, options);
        options.cascade = options.cascade || options.force || false;
        const sql = this.queryGenerator.dropTableQuery(tableName, options);
        await this.sequelize.query(sql, options);
      }
      async _dropAllTables(tableNames, skip, options) {
        for (const tableName of tableNames) {
          if (!skip.includes(tableName.tableName || tableName)) {
            await this.dropTable(tableName, __spreadProps(__spreadValues({}, options), { cascade: true }));
          }
        }
      }
      async dropAllTables(options) {
        options = options || {};
        const skip = options.skip || [];
        const tableNames = await this.showAllTables(options);
        const foreignKeys = await this.getForeignKeysForTables(tableNames, options);
        for (const tableName of tableNames) {
          let normalizedTableName = tableName;
          if (_.isObject(tableName)) {
            normalizedTableName = `${tableName.schema}.${tableName.tableName}`;
          }
          for (const foreignKey of foreignKeys[normalizedTableName]) {
            await this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey));
          }
        }
        await this._dropAllTables(tableNames, skip, options);
      }
      async renameTable(before, after, options) {
        options = options || {};
        const sql = this.queryGenerator.renameTableQuery(before, after);
        return await this.sequelize.query(sql, options);
      }
      async showAllTables(options) {
        options = __spreadProps(__spreadValues({}, options), {
          raw: true,
          type: QueryTypes2.SHOWTABLES
        });
        const showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);
        const tableNames = await this.sequelize.query(showTablesSql, options);
        return _.flatten(tableNames);
      }
      async describeTable(tableName, options) {
        let schema = null;
        let schemaDelimiter = null;
        if (typeof options === "string") {
          schema = options;
        } else if (typeof options === "object" && options !== null) {
          schema = options.schema || null;
          schemaDelimiter = options.schemaDelimiter || null;
        }
        if (typeof tableName === "object" && tableName !== null) {
          schema = tableName.schema;
          tableName = tableName.tableName;
        }
        const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);
        options = __spreadProps(__spreadValues({}, options), { type: QueryTypes2.DESCRIBE });
        try {
          const data = await this.sequelize.query(sql, options);
          if (_.isEmpty(data)) {
            throw new Error(`No description found for "${tableName}" table. Check the table name and schema; remember, they _are_ case sensitive.`);
          }
          return data;
        } catch (e) {
          if (e.original && e.original.code === "ER_NO_SUCH_TABLE") {
            throw new Error(`No description found for "${tableName}" table. Check the table name and schema; remember, they _are_ case sensitive.`);
          }
          throw e;
        }
      }
      async addColumn(table, key, attribute, options) {
        if (!table || !key || !attribute) {
          throw new Error("addColumn takes at least 3 arguments (table, attribute name, attribute definition)");
        }
        options = options || {};
        attribute = this.sequelize.normalizeAttribute(attribute);
        return await this.sequelize.query(this.queryGenerator.addColumnQuery(table, key, attribute), options);
      }
      async removeColumn(tableName, attributeName, options) {
        return this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, attributeName), options);
      }
      normalizeAttribute(dataTypeOrOptions) {
        let attribute;
        if (Object.values(DataTypes2).includes(dataTypeOrOptions)) {
          attribute = { type: dataTypeOrOptions, allowNull: true };
        } else {
          attribute = dataTypeOrOptions;
        }
        return this.sequelize.normalizeAttribute(attribute);
      }
      quoteIdentifier(identifier2, force) {
        return this.queryGenerator.quoteIdentifier(identifier2, force);
      }
      quoteIdentifiers(identifiers) {
        return this.queryGenerator.quoteIdentifiers(identifiers);
      }
      async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {
        options = options || {};
        const query = this.queryGenerator.attributesToSQL({
          [attributeName]: this.normalizeAttribute(dataTypeOrOptions)
        }, {
          context: "changeColumn",
          table: tableName
        });
        const sql = this.queryGenerator.changeColumnQuery(tableName, query);
        return this.sequelize.query(sql, options);
      }
      async assertTableHasColumn(tableName, columnName, options) {
        const description = await this.describeTable(tableName, options);
        if (description[columnName]) {
          return description;
        }
        throw new Error(`Table ${tableName} doesn't have the column ${columnName}`);
      }
      async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {
        options = options || {};
        const data = (await this.assertTableHasColumn(tableName, attrNameBefore, options))[attrNameBefore];
        const _options = {};
        _options[attrNameAfter] = {
          attribute: attrNameAfter,
          type: data.type,
          allowNull: data.allowNull,
          defaultValue: data.defaultValue
        };
        if (data.defaultValue === null && !data.allowNull) {
          delete _options[attrNameAfter].defaultValue;
        }
        const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, this.queryGenerator.attributesToSQL(_options));
        return await this.sequelize.query(sql, options);
      }
      async addIndex(tableName, attributes, options, rawTablename) {
        if (!Array.isArray(attributes)) {
          rawTablename = options;
          options = attributes;
          attributes = options.fields;
        }
        if (!rawTablename) {
          rawTablename = tableName;
        }
        options = Utils2.cloneDeep(options);
        options.fields = attributes;
        const sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);
        return await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { supportsSearchPath: false }));
      }
      async showIndex(tableName, options) {
        const sql = this.queryGenerator.showIndexesQuery(tableName, options);
        return await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { type: QueryTypes2.SHOWINDEXES }));
      }
      async getForeignKeysForTables(tableNames, options) {
        if (tableNames.length === 0) {
          return {};
        }
        options = __spreadProps(__spreadValues({}, options), { type: QueryTypes2.FOREIGNKEYS });
        const results = await Promise.all(tableNames.map((tableName) => this.sequelize.query(this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)));
        const result = {};
        tableNames.forEach((tableName, i) => {
          if (_.isObject(tableName)) {
            tableName = `${tableName.schema}.${tableName.tableName}`;
          }
          result[tableName] = Array.isArray(results[i]) ? results[i].map((r) => r.constraint_name) : [results[i] && results[i].constraint_name];
          result[tableName] = result[tableName].filter(_.identity);
        });
        return result;
      }
      async getForeignKeyReferencesForTable(tableName, options) {
        const queryOptions = __spreadProps(__spreadValues({}, options), {
          type: QueryTypes2.FOREIGNKEYS
        });
        const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database);
        return this.sequelize.query(query, queryOptions);
      }
      async removeIndex(tableName, indexNameOrAttributes, options) {
        options = options || {};
        const sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes, options);
        return await this.sequelize.query(sql, options);
      }
      async addConstraint(tableName, options) {
        if (!options.fields) {
          throw new Error("Fields must be specified through options.fields");
        }
        if (!options.type) {
          throw new Error("Constraint type must be specified through options.type");
        }
        options = Utils2.cloneDeep(options);
        const sql = this.queryGenerator.addConstraintQuery(tableName, options);
        return await this.sequelize.query(sql, options);
      }
      async showConstraint(tableName, constraintName, options) {
        const sql = this.queryGenerator.showConstraintsQuery(tableName, constraintName);
        return await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { type: QueryTypes2.SHOWCONSTRAINTS }));
      }
      async removeConstraint(tableName, constraintName, options) {
        return this.sequelize.query(this.queryGenerator.removeConstraintQuery(tableName, constraintName), options);
      }
      async insert(instance, tableName, values, options) {
        options = Utils2.cloneDeep(options);
        options.hasTrigger = instance && instance.constructor.options.hasTrigger;
        const sql = this.queryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);
        options.type = QueryTypes2.INSERT;
        options.instance = instance;
        const results = await this.sequelize.query(sql, options);
        if (instance)
          results[0].isNewRecord = false;
        return results;
      }
      async upsert(tableName, insertValues, updateValues, where2, options) {
        options = __spreadValues({}, options);
        const model = options.model;
        options.type = QueryTypes2.UPSERT;
        options.updateOnDuplicate = Object.keys(updateValues);
        options.upsertKeys = options.conflictFields || [];
        if (options.upsertKeys.length === 0) {
          const primaryKeys = Object.values(model.primaryKeys).map((item) => item.field);
          const uniqueKeys = Object.values(model.uniqueKeys).filter((c) => c.fields.length > 0).map((c) => c.fields);
          const indexKeys = Object.values(model._indexes).filter((c) => c.unique && c.fields.length > 0).map((c) => c.fields);
          for (const field of options.updateOnDuplicate) {
            const uniqueKey = uniqueKeys.find((fields) => fields.includes(field));
            if (uniqueKey) {
              options.upsertKeys = uniqueKey;
              break;
            }
            const indexKey = indexKeys.find((fields) => fields.includes(field));
            if (indexKey) {
              options.upsertKeys = indexKey;
              break;
            }
          }
          if (options.upsertKeys.length === 0 || _.intersection(options.updateOnDuplicate, primaryKeys).length) {
            options.upsertKeys = primaryKeys;
          }
          options.upsertKeys = _.uniq(options.upsertKeys);
        }
        const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);
        return await this.sequelize.query(sql, options);
      }
      async bulkInsert(tableName, records, options, attributes) {
        options = __spreadValues({}, options);
        options.type = QueryTypes2.INSERT;
        const results = await this.sequelize.query(this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes), options);
        return results[0];
      }
      async update(instance, tableName, values, identifier2, options) {
        options = __spreadValues({}, options);
        options.hasTrigger = instance && instance.constructor.options.hasTrigger;
        const sql = this.queryGenerator.updateQuery(tableName, values, identifier2, options, instance.constructor.rawAttributes);
        options.type = QueryTypes2.UPDATE;
        options.instance = instance;
        return await this.sequelize.query(sql, options);
      }
      async bulkUpdate(tableName, values, identifier2, options, attributes) {
        options = Utils2.cloneDeep(options);
        if (typeof identifier2 === "object")
          identifier2 = Utils2.cloneDeep(identifier2);
        const sql = this.queryGenerator.updateQuery(tableName, values, identifier2, options, attributes);
        const table = _.isObject(tableName) ? tableName : { tableName };
        const model = _.find(this.sequelize.modelManager.models, { tableName: table.tableName });
        options.type = QueryTypes2.BULKUPDATE;
        options.model = model;
        return await this.sequelize.query(sql, options);
      }
      async delete(instance, tableName, identifier2, options) {
        const cascades = [];
        const sql = this.queryGenerator.deleteQuery(tableName, identifier2, {}, instance.constructor);
        options = __spreadValues({}, options);
        if (!!instance.constructor && !!instance.constructor.associations) {
          const keys = Object.keys(instance.constructor.associations);
          const length = keys.length;
          let association;
          for (let i = 0; i < length; i++) {
            association = instance.constructor.associations[keys[i]];
            if (association.options && association.options.onDelete && association.options.onDelete.toLowerCase() === "cascade" && association.options.useHooks === true) {
              cascades.push(association.accessors.get);
            }
          }
        }
        for (const cascade of cascades) {
          let instances = await instance[cascade](options);
          if (!instances)
            continue;
          if (!Array.isArray(instances))
            instances = [instances];
          for (const _instance of instances)
            await _instance.destroy(options);
        }
        options.instance = instance;
        return await this.sequelize.query(sql, options);
      }
      async bulkDelete(tableName, where2, options, model) {
        options = Utils2.cloneDeep(options);
        options = _.defaults(options, { limit: null });
        if (options.truncate === true) {
          return this.sequelize.query(this.queryGenerator.truncateTableQuery(tableName, options), options);
        }
        if (typeof identifier === "object")
          where2 = Utils2.cloneDeep(where2);
        return await this.sequelize.query(this.queryGenerator.deleteQuery(tableName, where2, options, model), options);
      }
      async select(model, tableName, optionsArg) {
        const options = __spreadProps(__spreadValues({}, optionsArg), { type: QueryTypes2.SELECT, model });
        return await this.sequelize.query(this.queryGenerator.selectQuery(tableName, options, model), options);
      }
      async increment(model, tableName, where2, incrementAmountsByField, extraAttributesToBeUpdated, options) {
        options = Utils2.cloneDeep(options);
        const sql = this.queryGenerator.arithmeticQuery("+", tableName, where2, incrementAmountsByField, extraAttributesToBeUpdated, options);
        options.type = QueryTypes2.UPDATE;
        options.model = model;
        return await this.sequelize.query(sql, options);
      }
      async decrement(model, tableName, where2, incrementAmountsByField, extraAttributesToBeUpdated, options) {
        options = Utils2.cloneDeep(options);
        const sql = this.queryGenerator.arithmeticQuery("-", tableName, where2, incrementAmountsByField, extraAttributesToBeUpdated, options);
        options.type = QueryTypes2.UPDATE;
        options.model = model;
        return await this.sequelize.query(sql, options);
      }
      async rawSelect(tableName, options, attributeSelector, Model3) {
        options = Utils2.cloneDeep(options);
        options = _.defaults(options, {
          raw: true,
          plain: true,
          type: QueryTypes2.SELECT
        });
        const sql = this.queryGenerator.selectQuery(tableName, options, Model3);
        if (attributeSelector === void 0) {
          throw new Error("Please pass an attribute selector!");
        }
        const data = await this.sequelize.query(sql, options);
        if (!options.plain) {
          return data;
        }
        const result = data ? data[attributeSelector] : null;
        if (!options || !options.dataType) {
          return result;
        }
        const dataType = options.dataType;
        if (dataType instanceof DataTypes2.DECIMAL || dataType instanceof DataTypes2.FLOAT) {
          if (result !== null) {
            return parseFloat(result);
          }
        }
        if (dataType instanceof DataTypes2.INTEGER || dataType instanceof DataTypes2.BIGINT) {
          if (result !== null) {
            return parseInt(result, 10);
          }
        }
        if (dataType instanceof DataTypes2.DATE) {
          if (result !== null && !(result instanceof Date)) {
            return new Date(result);
          }
        }
        return result;
      }
      async createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {
        const sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);
        options = options || {};
        if (sql) {
          return await this.sequelize.query(sql, options);
        }
      }
      async dropTrigger(tableName, triggerName, options) {
        const sql = this.queryGenerator.dropTrigger(tableName, triggerName);
        options = options || {};
        if (sql) {
          return await this.sequelize.query(sql, options);
        }
      }
      async renameTrigger(tableName, oldTriggerName, newTriggerName, options) {
        const sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);
        options = options || {};
        if (sql) {
          return await this.sequelize.query(sql, options);
        }
      }
      async createFunction(functionName, params, returnType, language, body, optionsArray, options) {
        const sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);
        options = options || {};
        if (sql) {
          return await this.sequelize.query(sql, options);
        }
      }
      async dropFunction(functionName, params, options) {
        const sql = this.queryGenerator.dropFunction(functionName, params);
        options = options || {};
        if (sql) {
          return await this.sequelize.query(sql, options);
        }
      }
      async renameFunction(oldFunctionName, params, newFunctionName, options) {
        const sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);
        options = options || {};
        if (sql) {
          return await this.sequelize.query(sql, options);
        }
      }
      ensureEnums() {
      }
      async setIsolationLevel(transaction, value, options) {
        if (!transaction || !(transaction instanceof Transaction2)) {
          throw new Error("Unable to set isolation level for a transaction without transaction object!");
        }
        if (transaction.parent || !value) {
          return;
        }
        options = __spreadProps(__spreadValues({}, options), { transaction: transaction.parent || transaction });
        const sql = this.queryGenerator.setIsolationLevelQuery(value, {
          parent: transaction.parent
        });
        if (!sql)
          return;
        return await this.sequelize.query(sql, options);
      }
      async startTransaction(transaction, options) {
        if (!transaction || !(transaction instanceof Transaction2)) {
          throw new Error("Unable to start a transaction without transaction object!");
        }
        options = __spreadProps(__spreadValues({}, options), { transaction: transaction.parent || transaction });
        options.transaction.name = transaction.parent ? transaction.name : void 0;
        const sql = this.queryGenerator.startTransactionQuery(transaction);
        return await this.sequelize.query(sql, options);
      }
      async deferConstraints(transaction, options) {
        options = __spreadProps(__spreadValues({}, options), { transaction: transaction.parent || transaction });
        const sql = this.queryGenerator.deferConstraintsQuery(options);
        if (sql) {
          return await this.sequelize.query(sql, options);
        }
      }
      async commitTransaction(transaction, options) {
        if (!transaction || !(transaction instanceof Transaction2)) {
          throw new Error("Unable to commit a transaction without transaction object!");
        }
        if (transaction.parent) {
          return;
        }
        options = __spreadProps(__spreadValues({}, options), {
          transaction: transaction.parent || transaction,
          supportsSearchPath: false,
          completesTransaction: true
        });
        const sql = this.queryGenerator.commitTransactionQuery(transaction);
        const promise = this.sequelize.query(sql, options);
        transaction.finished = "commit";
        return await promise;
      }
      async rollbackTransaction(transaction, options) {
        if (!transaction || !(transaction instanceof Transaction2)) {
          throw new Error("Unable to rollback a transaction without transaction object!");
        }
        options = __spreadProps(__spreadValues({}, options), {
          transaction: transaction.parent || transaction,
          supportsSearchPath: false,
          completesTransaction: true
        });
        options.transaction.name = transaction.parent ? transaction.name : void 0;
        const sql = this.queryGenerator.rollbackTransactionQuery(transaction);
        const promise = this.sequelize.query(sql, options);
        transaction.finished = "rollback";
        return await promise;
      }
    };
    exports.QueryInterface = QueryInterface2;
  }
});

// node_modules/sequelize/lib/dialects/abstract/index.js
var require_abstract = __commonJS({
  "node_modules/sequelize/lib/dialects/abstract/index.js"(exports, module) {
    "use strict";
    var AbstractDialect = class {
    };
    AbstractDialect.prototype.supports = {
      "DEFAULT": true,
      "DEFAULT VALUES": false,
      "VALUES ()": false,
      "LIMIT ON UPDATE": false,
      "ON DUPLICATE KEY": true,
      "ORDER NULLS": false,
      "UNION": true,
      "UNION ALL": true,
      "RIGHT JOIN": true,
      returnValues: false,
      autoIncrement: {
        identityInsert: false,
        defaultValue: true,
        update: true
      },
      bulkDefault: false,
      schemas: false,
      transactions: true,
      settingIsolationLevelDuringTransaction: true,
      transactionOptions: {
        type: false
      },
      migrations: true,
      upserts: true,
      inserts: {
        ignoreDuplicates: "",
        updateOnDuplicate: false,
        onConflictDoNothing: "",
        conflictFields: false
      },
      constraints: {
        restrict: true,
        addConstraint: true,
        dropConstraint: true,
        unique: true,
        default: false,
        check: true,
        foreignKey: true,
        primaryKey: true
      },
      index: {
        collate: true,
        length: false,
        parser: false,
        concurrently: false,
        type: false,
        using: true,
        functionBased: false,
        operator: false
      },
      groupedLimit: true,
      indexViaAlter: false,
      JSON: false,
      deferrableConstraints: false
    };
    module.exports = AbstractDialect;
    module.exports.AbstractDialect = AbstractDialect;
    module.exports.default = AbstractDialect;
  }
});

// node_modules/semver/internal/constants.js
var require_constants = __commonJS({
  "node_modules/semver/internal/constants.js"(exports, module) {
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    module.exports = {
      SEMVER_SPEC_VERSION,
      MAX_LENGTH,
      MAX_SAFE_INTEGER,
      MAX_SAFE_COMPONENT_LENGTH
    };
  }
});

// node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "node_modules/semver/internal/debug.js"(exports, module) {
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module.exports = debug;
  }
});

// node_modules/semver/internal/re.js
var require_re = __commonJS({
  "node_modules/semver/internal/re.js"(exports, module) {
    var { MAX_SAFE_COMPONENT_LENGTH } = require_constants();
    var debug = require_debug();
    exports = module.exports = {};
    var re = exports.re = [];
    var src = exports.src = [];
    var t = exports.t = {};
    var R = 0;
    var createToken = (name, value, isGlobal) => {
      const index = R++;
      debug(index, value);
      t[name] = index;
      src[index] = value;
      re[index] = new RegExp(value, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
    createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0.0.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0.0.0-0\\s*$");
  }
});

// node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "node_modules/semver/internal/parse-options.js"(exports, module) {
    var opts = ["includePrerelease", "loose", "rtl"];
    var parseOptions = (options) => !options ? {} : typeof options !== "object" ? { loose: true } : opts.filter((k) => options[k]).reduce((options2, k) => {
      options2[k] = true;
      return options2;
    }, {});
    module.exports = parseOptions;
  }
});

// node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/semver/internal/identifiers.js"(exports, module) {
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "node_modules/semver/classes/semver.js"(exports, module) {
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants();
    var { re, t } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class {
      constructor(version, options) {
        options = parseOptions(options);
        if (version instanceof SemVer) {
          if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
            return version;
          } else {
            version = version.version;
          }
        } else if (typeof version !== "string") {
          throw new TypeError(`Invalid Version: ${version}`);
        }
        if (version.length > MAX_LENGTH) {
          throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
        }
        debug("SemVer", version, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version}`);
        }
        this.raw = version;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      inc(release, identifier2) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier2);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier2);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier2);
            this.inc("pre", identifier2);
            break;
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier2);
            }
            this.inc("pre", identifier2);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case "pre":
            if (this.prerelease.length === 0) {
              this.prerelease = [0];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                this.prerelease.push(0);
              }
            }
            if (identifier2) {
              if (this.prerelease[0] === identifier2) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = [identifier2, 0];
                }
              } else {
                this.prerelease = [identifier2, 0];
              }
            }
            break;
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.format();
        this.raw = this.version;
        return this;
      }
    };
    module.exports = SemVer;
  }
});

// node_modules/semver/functions/parse.js
var require_parse2 = __commonJS({
  "node_modules/semver/functions/parse.js"(exports, module) {
    var { MAX_LENGTH } = require_constants();
    var { re, t } = require_re();
    var SemVer = require_semver();
    var parseOptions = require_parse_options();
    var parse = (version, options) => {
      options = parseOptions(options);
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version !== "string") {
        return null;
      }
      if (version.length > MAX_LENGTH) {
        return null;
      }
      const r = options.loose ? re[t.LOOSE] : re[t.FULL];
      if (!r.test(version)) {
        return null;
      }
      try {
        return new SemVer(version, options);
      } catch (er) {
        return null;
      }
    };
    module.exports = parse;
  }
});

// node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "node_modules/semver/functions/valid.js"(exports, module) {
    var parse = require_parse2();
    var valid = (version, options) => {
      const v = parse(version, options);
      return v ? v.version : null;
    };
    module.exports = valid;
  }
});

// node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "node_modules/semver/functions/clean.js"(exports, module) {
    var parse = require_parse2();
    var clean = (version, options) => {
      const s = parse(version.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    };
    module.exports = clean;
  }
});

// node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "node_modules/semver/functions/inc.js"(exports, module) {
    var SemVer = require_semver();
    var inc = (version, release, options, identifier2) => {
      if (typeof options === "string") {
        identifier2 = options;
        options = void 0;
      }
      try {
        return new SemVer(version, options).inc(release, identifier2).version;
      } catch (er) {
        return null;
      }
    };
    module.exports = inc;
  }
});

// node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "node_modules/semver/functions/compare.js"(exports, module) {
    var SemVer = require_semver();
    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module.exports = compare;
  }
});

// node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "node_modules/semver/functions/eq.js"(exports, module) {
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module.exports = eq;
  }
});

// node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "node_modules/semver/functions/diff.js"(exports, module) {
    var parse = require_parse2();
    var eq = require_eq();
    var diff = (version1, version2) => {
      if (eq(version1, version2)) {
        return null;
      } else {
        const v1 = parse(version1);
        const v2 = parse(version2);
        const hasPre = v1.prerelease.length || v2.prerelease.length;
        const prefix = hasPre ? "pre" : "";
        const defaultResult = hasPre ? "prerelease" : "";
        for (const key in v1) {
          if (key === "major" || key === "minor" || key === "patch") {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    };
    module.exports = diff;
  }
});

// node_modules/semver/functions/major.js
var require_major = __commonJS({
  "node_modules/semver/functions/major.js"(exports, module) {
    var SemVer = require_semver();
    var major = (a, loose) => new SemVer(a, loose).major;
    module.exports = major;
  }
});

// node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "node_modules/semver/functions/minor.js"(exports, module) {
    var SemVer = require_semver();
    var minor = (a, loose) => new SemVer(a, loose).minor;
    module.exports = minor;
  }
});

// node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "node_modules/semver/functions/patch.js"(exports, module) {
    var SemVer = require_semver();
    var patch = (a, loose) => new SemVer(a, loose).patch;
    module.exports = patch;
  }
});

// node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "node_modules/semver/functions/prerelease.js"(exports, module) {
    var parse = require_parse2();
    var prerelease = (version, options) => {
      const parsed = parse(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module.exports = prerelease;
  }
});

// node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "node_modules/semver/functions/rcompare.js"(exports, module) {
    var compare = require_compare();
    var rcompare = (a, b, loose) => compare(b, a, loose);
    module.exports = rcompare;
  }
});

// node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "node_modules/semver/functions/compare-loose.js"(exports, module) {
    var compare = require_compare();
    var compareLoose = (a, b) => compare(a, b, true);
    module.exports = compareLoose;
  }
});

// node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "node_modules/semver/functions/compare-build.js"(exports, module) {
    var SemVer = require_semver();
    var compareBuild = (a, b, loose) => {
      const versionA = new SemVer(a, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module.exports = compareBuild;
  }
});

// node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "node_modules/semver/functions/sort.js"(exports, module) {
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
    module.exports = sort;
  }
});

// node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "node_modules/semver/functions/rsort.js"(exports, module) {
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    module.exports = rsort;
  }
});

// node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "node_modules/semver/functions/gt.js"(exports, module) {
    var compare = require_compare();
    var gt = (a, b, loose) => compare(a, b, loose) > 0;
    module.exports = gt;
  }
});

// node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "node_modules/semver/functions/lt.js"(exports, module) {
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module.exports = lt;
  }
});

// node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "node_modules/semver/functions/neq.js"(exports, module) {
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module.exports = neq;
  }
});

// node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "node_modules/semver/functions/gte.js"(exports, module) {
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module.exports = gte;
  }
});

// node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "node_modules/semver/functions/lte.js"(exports, module) {
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module.exports = lte;
  }
});

// node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "node_modules/semver/functions/cmp.js"(exports, module) {
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a === b;
        case "!==":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module.exports = cmp;
  }
});

// node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "node_modules/semver/functions/coerce.js"(exports, module) {
    var SemVer = require_semver();
    var parse = require_parse2();
    var { re, t } = require_re();
    var coerce = (version, options) => {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version === "number") {
        version = String(version);
      }
      if (typeof version !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version.match(re[t.COERCE]);
      } else {
        let next;
        while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        re[t.COERCERTL].lastIndex = -1;
      }
      if (match === null)
        return null;
      return parse(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
    };
    module.exports = coerce;
  }
});

// node_modules/yallist/iterator.js
var require_iterator = __commonJS({
  "node_modules/yallist/iterator.js"(exports, module) {
    "use strict";
    module.exports = function(Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next) {
          yield walker.value;
        }
      };
    };
  }
});

// node_modules/yallist/yallist.js
var require_yallist = __commonJS({
  "node_modules/yallist/yallist.js"(exports, module) {
    "use strict";
    module.exports = Yallist;
    Yallist.Node = Node;
    Yallist.create = Yallist;
    function Yallist(list) {
      var self2 = this;
      if (!(self2 instanceof Yallist)) {
        self2 = new Yallist();
      }
      self2.tail = null;
      self2.head = null;
      self2.length = 0;
      if (list && typeof list.forEach === "function") {
        list.forEach(function(item) {
          self2.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i = 0, l = arguments.length; i < l; i++) {
          self2.push(arguments[i]);
        }
      }
      return self2;
    }
    Yallist.prototype.removeNode = function(node) {
      if (node.list !== this) {
        throw new Error("removing node which does not belong to this list");
      }
      var next = node.next;
      var prev = node.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }
      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;
      return next;
    };
    Yallist.prototype.unshiftNode = function(node) {
      if (node === this.head) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }
      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };
    Yallist.prototype.pushNode = function(node) {
      if (node === this.tail) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }
      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };
    Yallist.prototype.push = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        push(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.unshift = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        unshift(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.pop = function() {
      if (!this.tail) {
        return void 0;
      }
      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.shift = function() {
      if (!this.head) {
        return void 0;
      }
      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.forEach = function(fn2, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++) {
        fn2.call(thisp, walker.value, i, this);
        walker = walker.next;
      }
    };
    Yallist.prototype.forEachReverse = function(fn2, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
        fn2.call(thisp, walker.value, i, this);
        walker = walker.prev;
      }
    };
    Yallist.prototype.get = function(n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
        walker = walker.next;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.getReverse = function(n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
        walker = walker.prev;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.map = function(fn2, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.head; walker !== null; ) {
        res.push(fn2.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res;
    };
    Yallist.prototype.mapReverse = function(fn2, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.tail; walker !== null; ) {
        res.push(fn2.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res;
    };
    Yallist.prototype.reduce = function(fn2, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = 0; walker !== null; i++) {
        acc = fn2(acc, walker.value, i);
        walker = walker.next;
      }
      return acc;
    };
    Yallist.prototype.reduceReverse = function(fn2, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = this.length - 1; walker !== null; i--) {
        acc = fn2(acc, walker.value, i);
        walker = walker.prev;
      }
      return acc;
    };
    Yallist.prototype.toArray = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.head; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.next;
      }
      return arr;
    };
    Yallist.prototype.toArrayReverse = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.tail; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.prev;
      }
      return arr;
    };
    Yallist.prototype.slice = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
        walker = walker.next;
      }
      for (; walker !== null && i < to; i++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.sliceReverse = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
        walker = walker.prev;
      }
      for (; walker !== null && i > from; i--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }
      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
        walker = walker.next;
      }
      var ret = [];
      for (var i = 0; walker && i < deleteCount; i++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }
      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }
      for (var i = 0; i < nodes.length; i++) {
        walker = insert(this, walker, nodes[i]);
      }
      return ret;
    };
    Yallist.prototype.reverse = function() {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
      }
      this.head = tail;
      this.tail = head;
      return this;
    };
    function insert(self2, node, value) {
      var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
      if (inserted.next === null) {
        self2.tail = inserted;
      }
      if (inserted.prev === null) {
        self2.head = inserted;
      }
      self2.length++;
      return inserted;
    }
    function push(self2, item) {
      self2.tail = new Node(item, self2.tail, null, self2);
      if (!self2.head) {
        self2.head = self2.tail;
      }
      self2.length++;
    }
    function unshift(self2, item) {
      self2.head = new Node(item, null, self2.head, self2);
      if (!self2.tail) {
        self2.tail = self2.head;
      }
      self2.length++;
    }
    function Node(value, prev, next, list) {
      if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
      }
      this.list = list;
      this.value = value;
      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }
      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }
    try {
      require_iterator()(Yallist);
    } catch (er) {
    }
  }
});

// node_modules/lru-cache/index.js
var require_lru_cache = __commonJS({
  "node_modules/lru-cache/index.js"(exports, module) {
    "use strict";
    var Yallist = require_yallist();
    var MAX = Symbol("max");
    var LENGTH = Symbol("length");
    var LENGTH_CALCULATOR = Symbol("lengthCalculator");
    var ALLOW_STALE = Symbol("allowStale");
    var MAX_AGE = Symbol("maxAge");
    var DISPOSE = Symbol("dispose");
    var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
    var LRU_LIST = Symbol("lruList");
    var CACHE = Symbol("cache");
    var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
    var naiveLength = () => 1;
    var LRUCache = class {
      constructor(options) {
        if (typeof options === "number")
          options = { max: options };
        if (!options)
          options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0))
          throw new TypeError("max must be a non-negative number");
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }
      set max(mL) {
        if (typeof mL !== "number" || mL < 0)
          throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA !== "number")
          throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      set lengthCalculator(lC) {
        if (typeof lC !== "function")
          lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach((hit) => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn2, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          const prev = walker.prev;
          forEachStep(this, fn2, walker, thisp);
          walker = prev;
        }
      }
      forEach(fn2, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          const next = walker.next;
          forEachStep(this, fn2, walker, thisp);
          walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k) => k.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k) => k.value);
      }
      reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = /* @__PURE__ */ new Map();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        }).toArray().filter((h) => h);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          const node = this[CACHE].get(key);
          const item = node.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET])
              this[DISPOSE](key, item.value);
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim(this);
          return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE])
            this[DISPOSE](key, value);
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
      }
      has(key) {
        if (!this[CACHE].has(key))
          return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get(this, key, true);
      }
      peek(key) {
        return get(this, key, false);
      }
      pop() {
        const node = this[LRU_LIST].tail;
        if (!node)
          return null;
        del(this, node);
        return node.value;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        const now = Date.now();
        for (let l = arr.length - 1; l >= 0; l--) {
          const hit = arr[l];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0)
            this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get(this, key, false));
      }
    };
    var get = (self2, key, doUse) => {
      const node = self2[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self2, hit)) {
          del(self2, node);
          if (!self2[ALLOW_STALE])
            return void 0;
        } else {
          if (doUse) {
            if (self2[UPDATE_AGE_ON_GET])
              node.value.now = Date.now();
            self2[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value;
      }
    };
    var isStale = (self2, hit) => {
      if (!hit || !hit.maxAge && !self2[MAX_AGE])
        return false;
      const diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
    };
    var trim = (self2) => {
      if (self2[LENGTH] > self2[MAX]) {
        for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
          const prev = walker.prev;
          del(self2, walker);
          walker = prev;
        }
      }
    };
    var del = (self2, node) => {
      if (node) {
        const hit = node.value;
        if (self2[DISPOSE])
          self2[DISPOSE](hit.key, hit.value);
        self2[LENGTH] -= hit.length;
        self2[CACHE].delete(hit.key);
        self2[LRU_LIST].removeNode(node);
      }
    };
    var Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    };
    var forEachStep = (self2, fn2, node, thisp) => {
      let hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          hit = void 0;
      }
      if (hit)
        fn2.call(thisp, hit.value, hit.key, self2);
    };
    module.exports = LRUCache;
  }
});

// node_modules/semver/classes/range.js
var require_range2 = __commonJS({
  "node_modules/semver/classes/range.js"(exports, module) {
    var Range = class {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.format();
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range;
        this.set = range.split(/\s*\|\|\s*/).map((range2) => this.parseRange(range2.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${range}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0)
            this.set = [first];
          else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.format();
      }
      format() {
        this.range = this.set.map((comps) => {
          return comps.join(" ").trim();
        }).join("||").trim();
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        range = range.trim();
        const memoOpts = Object.keys(this.options).join(",");
        const memoKey = `parseRange:${memoOpts}:${range}`;
        const cached = cache.get(memoKey);
        if (cached)
          return cached;
        const loose = this.options.loose;
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range, re[t.COMPARATORTRIM]);
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        range = range.split(/\s+/).join(" ");
        const compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options)).filter(this.options.loose ? (comp) => !!comp.match(compRe) : () => true).map((comp) => new Comparator(comp, this.options));
        const l = rangeList.length;
        const rangeMap = /* @__PURE__ */ new Map();
        for (const comp of rangeList) {
          if (isNullSet(comp))
            return [comp];
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has(""))
          rangeMap.delete("");
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      test(version) {
        if (!version) {
          return false;
        }
        if (typeof version === "string") {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module.exports = Range;
    var LRU = require_lru_cache();
    var cache = new LRU({ max: 1e3 });
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      re,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((comp2) => {
      return replaceTilde(comp2, options);
    }).join(" ");
    var replaceTilde = (comp, options) => {
      const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((comp2) => {
      return replaceCaret(comp2, options);
    }).join(" ");
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((comp2) => {
        return replaceXRange(comp2, options);
      }).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<")
            pr = "-0";
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version, options) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === Comparator.ANY) {
            continue;
          }
          if (set[i].semver.prerelease.length > 0) {
            const allowed = set[i].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "node_modules/semver/classes/comparator.js"(exports, module) {
    var ANY = Symbol("SemVer ANY");
    var Comparator = class {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version) {
        debug("Comparator.test", version, this.options.loose);
        if (this.semver === ANY || version === ANY) {
          return true;
        }
        if (typeof version === "string") {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (!options || typeof options !== "object") {
          options = {
            loose: !!options,
            includePrerelease: false
          };
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        const sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
        const sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
        const sameSemVer = this.semver.version === comp.semver.version;
        const differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
        const oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<");
        const oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
        return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
      }
    };
    module.exports = Comparator;
    var parseOptions = require_parse_options();
    var { re, t } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range = require_range2();
  }
});

// node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "node_modules/semver/functions/satisfies.js"(exports, module) {
    var Range = require_range2();
    var satisfies = (version, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version);
    };
    module.exports = satisfies;
  }
});

// node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "node_modules/semver/ranges/to-comparators.js"(exports, module) {
    var Range = require_range2();
    var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
    module.exports = toComparators;
  }
});

// node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "node_modules/semver/ranges/max-satisfying.js"(exports, module) {
    var SemVer = require_semver();
    var Range = require_range2();
    var maxSatisfying = (versions, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    };
    module.exports = maxSatisfying;
  }
});

// node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "node_modules/semver/ranges/min-satisfying.js"(exports, module) {
    var SemVer = require_semver();
    var Range = require_range2();
    var minSatisfying = (versions, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    };
    module.exports = minSatisfying;
  }
});

// node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "node_modules/semver/ranges/min-version.js"(exports, module) {
    var SemVer = require_semver();
    var Range = require_range2();
    var gt = require_gt();
    var minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!setMin || gt(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt(minver, setMin)))
          minver = setMin;
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module.exports = minVersion;
  }
});

// node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "node_modules/semver/ranges/valid.js"(exports, module) {
    var Range = require_range2();
    var validRange = (range, options) => {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    };
    module.exports = validRange;
  }
});

// node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "node_modules/semver/ranges/outside.js"(exports, module) {
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range2();
    var satisfies = require_satisfies();
    var gt = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version, range, hilo, options) => {
      version = new SemVer(version, options);
      range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options)) {
        return false;
      }
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module.exports = outside;
  }
});

// node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "node_modules/semver/ranges/gtr.js"(exports, module) {
    var outside = require_outside();
    var gtr = (version, range, options) => outside(version, range, ">", options);
    module.exports = gtr;
  }
});

// node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "node_modules/semver/ranges/ltr.js"(exports, module) {
    var outside = require_outside();
    var ltr = (version, range, options) => outside(version, range, "<", options);
    module.exports = ltr;
  }
});

// node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "node_modules/semver/ranges/intersects.js"(exports, module) {
    var Range = require_range2();
    var intersects = (r1, r2, options) => {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    };
    module.exports = intersects;
  }
});

// node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "node_modules/semver/ranges/simplify.js"(exports, module) {
    var satisfies = require_satisfies();
    var compare = require_compare();
    module.exports = (versions, range, options) => {
      const set = [];
      let min = null;
      let prev = null;
      const v = versions.sort((a, b) => compare(a, b, options));
      for (const version of v) {
        const included = satisfies(version, range, options);
        if (included) {
          prev = version;
          if (!min)
            min = version;
        } else {
          if (prev) {
            set.push([min, prev]);
          }
          prev = null;
          min = null;
        }
      }
      if (min)
        set.push([min, null]);
      const ranges = [];
      for (const [min2, max] of set) {
        if (min2 === max)
          ranges.push(min2);
        else if (!max && min2 === v[0])
          ranges.push("*");
        else if (!max)
          ranges.push(`>=${min2}`);
        else if (min2 === v[0])
          ranges.push(`<=${max}`);
        else
          ranges.push(`${min2} - ${max}`);
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "node_modules/semver/ranges/subset.js"(exports, module) {
    var Range = require_range2();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom)
        return true;
      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER:
        for (const simpleSub of sub.set) {
          for (const simpleDom of dom.set) {
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub)
              continue OUTER;
          }
          if (sawNonNull)
            return false;
        }
      return true;
    };
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom)
        return true;
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY)
          return true;
        else if (options.includePrerelease)
          sub = [new Comparator(">=0.0.0-0")];
        else
          sub = [new Comparator(">=0.0.0")];
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease)
          return true;
        else
          dom = [new Comparator(">=0.0.0")];
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt, lt;
      for (const c of sub) {
        if (c.operator === ">" || c.operator === ">=")
          gt = higherGT(gt, c, options);
        else if (c.operator === "<" || c.operator === "<=")
          lt = lowerLT(lt, c, options);
        else
          eqSet.add(c.semver);
      }
      if (eqSet.size > 1)
        return null;
      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0)
          return null;
        else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<="))
          return null;
      }
      for (const eq of eqSet) {
        if (gt && !satisfies(eq, String(gt), options))
          return null;
        if (lt && !satisfies(eq, String(lt), options))
          return null;
        for (const c of dom) {
          if (!satisfies(eq, String(c), options))
            return false;
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === ">" || c.operator === ">=") {
            higher = higherGT(gt, c, options);
            if (higher === c && higher !== gt)
              return false;
          } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options))
            return false;
        }
        if (lt) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === "<" || c.operator === "<=") {
            lower = lowerLT(lt, c, options);
            if (lower === c && lower !== lt)
              return false;
          } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options))
            return false;
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0)
          return false;
      }
      if (gt && hasDomLT && !lt && gtltComp !== 0)
        return false;
      if (lt && hasDomGT && !gt && gtltComp !== 0)
        return false;
      if (needDomGTPre || needDomLTPre)
        return false;
      return true;
    };
    var higherGT = (a, b, options) => {
      if (!a)
        return b;
      const comp = compare(a.semver, b.semver, options);
      return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
    };
    var lowerLT = (a, b, options) => {
      if (!a)
        return b;
      const comp = compare(a.semver, b.semver, options);
      return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
    };
    module.exports = subset;
  }
});

// node_modules/semver/index.js
var require_semver2 = __commonJS({
  "node_modules/semver/index.js"(exports, module) {
    var internalRe = require_re();
    module.exports = {
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: require_constants().SEMVER_SPEC_VERSION,
      SemVer: require_semver(),
      compareIdentifiers: require_identifiers().compareIdentifiers,
      rcompareIdentifiers: require_identifiers().rcompareIdentifiers,
      parse: require_parse2(),
      valid: require_valid(),
      clean: require_clean(),
      inc: require_inc(),
      diff: require_diff(),
      major: require_major(),
      minor: require_minor(),
      patch: require_patch(),
      prerelease: require_prerelease(),
      compare: require_compare(),
      rcompare: require_rcompare(),
      compareLoose: require_compare_loose(),
      compareBuild: require_compare_build(),
      sort: require_sort(),
      rsort: require_rsort(),
      gt: require_gt(),
      lt: require_lt(),
      eq: require_eq(),
      neq: require_neq(),
      gte: require_gte(),
      lte: require_lte(),
      cmp: require_cmp(),
      coerce: require_coerce(),
      Comparator: require_comparator(),
      Range: require_range2(),
      satisfies: require_satisfies(),
      toComparators: require_to_comparators(),
      maxSatisfying: require_max_satisfying(),
      minSatisfying: require_min_satisfying(),
      minVersion: require_min_version(),
      validRange: require_valid2(),
      outside: require_outside(),
      gtr: require_gtr(),
      ltr: require_ltr(),
      intersects: require_intersects(),
      simplifyRange: require_simplify(),
      subset: require_subset()
    };
  }
});

// node_modules/sequelize-pool/lib/TimeoutError.js
var require_TimeoutError = __commonJS({
  "node_modules/sequelize-pool/lib/TimeoutError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TimeoutError = void 0;
    var TimeoutError2 = class extends Error {
    };
    exports.TimeoutError = TimeoutError2;
  }
});

// node_modules/sequelize-pool/lib/AggregateError.js
var require_AggregateError = __commonJS({
  "node_modules/sequelize-pool/lib/AggregateError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AggregateError = void 0;
    var AggregateError2 = class extends Error {
      constructor(errors) {
        super();
        this.errors = errors;
        this.name = "AggregateError";
      }
      toString() {
        const message = `AggregateError of:
${this.errors.map((error) => error === this ? "[Circular AggregateError]" : error instanceof AggregateError2 ? String(error).replace(/\n$/, "").replace(/^/gm, "  ") : String(error).replace(/^/gm, "    ").substring(2)).join("\n")}
`;
        return message;
      }
    };
    exports.AggregateError = AggregateError2;
  }
});

// node_modules/sequelize-pool/lib/Deferred.js
var require_Deferred = __commonJS({
  "node_modules/sequelize-pool/lib/Deferred.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Deferred = void 0;
    var TimeoutError_1 = require_TimeoutError();
    var Deferred = class {
      constructor() {
        this._promise = new Promise((resolve, reject) => {
          this._reject = reject;
          this._resolve = resolve;
        });
      }
      registerTimeout(timeoutInMillis, callback) {
        if (this._timeout)
          return;
        this._timeout = setTimeout(() => {
          callback();
          this.reject(new TimeoutError_1.TimeoutError("Operation timeout"));
        }, timeoutInMillis);
      }
      _clearTimeout() {
        if (!this._timeout)
          return;
        clearTimeout(this._timeout);
      }
      resolve(value) {
        this._clearTimeout();
        this._resolve(value);
      }
      reject(error) {
        this._clearTimeout();
        this._reject(error);
      }
      promise() {
        return this._promise;
      }
    };
    exports.Deferred = Deferred;
  }
});

// node_modules/sequelize-pool/lib/Pool.js
var require_Pool = __commonJS({
  "node_modules/sequelize-pool/lib/Pool.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Pool = void 0;
    var Deferred_1 = require_Deferred();
    var AggregateError_1 = require_AggregateError();
    var Pool = class {
      constructor(factory) {
        this.log = false;
        if (!factory.create) {
          throw new Error("create function is required");
        }
        if (!factory.destroy) {
          throw new Error("destroy function is required");
        }
        if (!factory.validate) {
          throw new Error("validate function is required");
        }
        if (typeof factory.min !== "number" || factory.min < 0 || factory.min !== Math.round(factory.min)) {
          throw new Error("min must be an integer >= 0");
        }
        if (typeof factory.max !== "number" || factory.max <= 0 || factory.max !== Math.round(factory.max)) {
          throw new Error("max must be an integer > 0");
        }
        if (factory.min > factory.max) {
          throw new Error("max is smaller than min");
        }
        if (factory.maxUses !== void 0 && (typeof factory.maxUses !== "number" || factory.maxUses < 0)) {
          throw new Error("maxUses must be an integer >= 0");
        }
        this.idleTimeoutMillis = factory.idleTimeoutMillis || 3e4;
        this.acquireTimeoutMillis = factory.acquireTimeoutMillis || 3e4;
        this.reapIntervalMillis = factory.reapIntervalMillis || 1e3;
        this.maxUsesPerResource = factory.maxUses || Infinity;
        this.log = factory.log || false;
        this._factory = factory;
        this._count = 0;
        this._draining = false;
        this._pendingAcquires = [];
        this._inUseObjects = [];
        this._availableObjects = [];
        this._removeIdleScheduled = false;
      }
      get size() {
        return this._count;
      }
      get name() {
        return this._factory.name;
      }
      get available() {
        return this._availableObjects.length;
      }
      get using() {
        return this._inUseObjects.length;
      }
      get waiting() {
        return this._pendingAcquires.length;
      }
      get maxSize() {
        return this._factory.max;
      }
      get minSize() {
        return this._factory.min;
      }
      _log(message, level) {
        if (typeof this.log === "function") {
          this.log(message, level);
        } else if (this.log) {
          console.log(`${level.toUpperCase()} pool ${this.name || ""} - ${message}`);
        }
      }
      _removeIdle() {
        const toRemove = [];
        const now = Date.now();
        let i;
        let available = this._availableObjects.length;
        const maxRemovable = this.size - this.minSize;
        let timeout;
        this._removeIdleScheduled = false;
        for (i = 0; i < available && maxRemovable > toRemove.length; i++) {
          timeout = this._availableObjects[i].timeout;
          if (now >= timeout) {
            this._log("removeIdle() destroying obj - now:" + now + " timeout:" + timeout, "verbose");
            toRemove.push(this._availableObjects[i].resource);
          }
        }
        toRemove.forEach(this.destroy, this);
        available = this._availableObjects.length;
        if (available > 0) {
          this._log("this._availableObjects.length=" + available, "verbose");
          this._scheduleRemoveIdle();
        } else {
          this._log("removeIdle() all objects removed", "verbose");
        }
      }
      _scheduleRemoveIdle() {
        if (!this._removeIdleScheduled) {
          this._removeIdleScheduled = true;
          this._removeIdleTimer = setTimeout(() => {
            this._removeIdle();
          }, this.reapIntervalMillis);
        }
      }
      _dispense() {
        let wrappedResource = null;
        const waitingCount = this._pendingAcquires.length;
        this._log(`dispense() clients=${waitingCount} available=${this._availableObjects.length}`, "info");
        if (waitingCount < 1) {
          return;
        }
        while (this._availableObjects.length > 0) {
          this._log("dispense() - reusing obj", "verbose");
          wrappedResource = this._availableObjects[this._availableObjects.length - 1];
          if (!this._factory.validate(wrappedResource.resource)) {
            this.destroy(wrappedResource.resource);
            continue;
          }
          this._availableObjects.pop();
          this._addResourceToInUseObjects(wrappedResource.resource, wrappedResource.useCount);
          const deferred = this._pendingAcquires.shift();
          return deferred.resolve(wrappedResource.resource);
        }
        if (this.size < this.maxSize) {
          this._createResource();
        }
      }
      _createResource() {
        this._count += 1;
        this._log(`createResource() - creating obj - count=${this.size} min=${this.minSize} max=${this.maxSize}`, "verbose");
        this._factory.create().then((resource) => {
          const deferred = this._pendingAcquires.shift();
          if (deferred) {
            this._addResourceToInUseObjects(resource, 0);
            deferred.resolve(resource);
          } else {
            this._addResourceToAvailableObjects(resource, 0);
          }
        }).catch((error) => {
          const deferred = this._pendingAcquires.shift();
          this._count -= 1;
          if (this._count < 0)
            this._count = 0;
          if (deferred) {
            deferred.reject(error);
          }
          process.nextTick(() => {
            this._dispense();
          });
        });
      }
      _addResourceToAvailableObjects(resource, useCount) {
        const wrappedResource = {
          resource,
          useCount,
          timeout: Date.now() + this.idleTimeoutMillis
        };
        this._availableObjects.push(wrappedResource);
        this._dispense();
        this._scheduleRemoveIdle();
      }
      _addResourceToInUseObjects(resource, useCount) {
        const wrappedResource = {
          resource,
          useCount
        };
        this._inUseObjects.push(wrappedResource);
      }
      _ensureMinimum() {
        let i, diff;
        if (!this._draining && this.size < this.minSize) {
          diff = this.minSize - this.size;
          for (i = 0; i < diff; i++) {
            this._createResource();
          }
        }
      }
      acquire() {
        if (this._draining) {
          return Promise.reject(new Error("pool is draining and cannot accept work"));
        }
        const deferred = new Deferred_1.Deferred();
        deferred.registerTimeout(this.acquireTimeoutMillis, () => {
          this._pendingAcquires = this._pendingAcquires.filter((pending) => pending !== deferred);
        });
        this._pendingAcquires.push(deferred);
        this._dispense();
        return deferred.promise();
      }
      release(resource) {
        if (this._availableObjects.some((resourceWithTimeout) => resourceWithTimeout.resource === resource)) {
          this._log("release called twice for the same resource: " + new Error().stack, "error");
          return;
        }
        const index = this._inUseObjects.findIndex((wrappedResource2) => wrappedResource2.resource === resource);
        if (index < 0) {
          this._log("attempt to release an invalid resource: " + new Error().stack, "error");
          return;
        }
        const wrappedResource = this._inUseObjects[index];
        wrappedResource.useCount += 1;
        if (wrappedResource.useCount >= this.maxUsesPerResource) {
          this._log("release() destroying obj - useCount:" + wrappedResource.useCount + " maxUsesPerResource:" + this.maxUsesPerResource, "verbose");
          this.destroy(wrappedResource.resource);
          this._dispense();
        } else {
          this._inUseObjects.splice(index, 1);
          this._addResourceToAvailableObjects(wrappedResource.resource, wrappedResource.useCount);
        }
      }
      async destroy(resource) {
        const available = this._availableObjects.length;
        const using = this._inUseObjects.length;
        this._availableObjects = this._availableObjects.filter((object) => object.resource !== resource);
        this._inUseObjects = this._inUseObjects.filter((object) => object.resource !== resource);
        if (available === this._availableObjects.length && using === this._inUseObjects.length) {
          this._ensureMinimum();
          return;
        }
        this._count -= 1;
        if (this._count < 0)
          this._count = 0;
        try {
          await this._factory.destroy(resource);
        } finally {
          this._ensureMinimum();
          if (!this._draining) {
            process.nextTick(() => {
              this._dispense();
            });
          }
        }
      }
      drain() {
        this._log("draining", "info");
        this._draining = true;
        const check = (callback) => {
          if (this._pendingAcquires.length > 0) {
            this._dispense();
            setTimeout(() => {
              check(callback);
            }, 100);
            return;
          }
          if (this._availableObjects.length !== this._count) {
            setTimeout(() => {
              check(callback);
            }, 100);
            return;
          }
          callback();
        };
        return new Promise((resolve) => check(resolve));
      }
      async destroyAllNow() {
        this._log("force destroying all objects", "info");
        this._removeIdleScheduled = false;
        clearTimeout(this._removeIdleTimer);
        const resources = this._availableObjects.map((resource) => resource.resource);
        const errors = [];
        for (const resource of resources) {
          try {
            await this.destroy(resource);
          } catch (ex) {
            this._log("Error destroying resource: " + ex.stack, "error");
            errors.push(ex);
          }
        }
        if (errors.length > 0) {
          throw new AggregateError_1.AggregateError(errors);
        }
      }
    };
    exports.Pool = Pool;
  }
});

// node_modules/sequelize-pool/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/sequelize-pool/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Pool = exports.AggregateError = exports.TimeoutError = void 0;
    var TimeoutError_1 = require_TimeoutError();
    Object.defineProperty(exports, "TimeoutError", { enumerable: true, get: function() {
      return TimeoutError_1.TimeoutError;
    } });
    var AggregateError_1 = require_AggregateError();
    Object.defineProperty(exports, "AggregateError", { enumerable: true, get: function() {
      return AggregateError_1.AggregateError;
    } });
    var Pool_1 = require_Pool();
    Object.defineProperty(exports, "Pool", { enumerable: true, get: function() {
      return Pool_1.Pool;
    } });
  }
});

// node_modules/sequelize/lib/dialects/abstract/connection-manager.js
var require_connection_manager = __commonJS({
  "node_modules/sequelize/lib/dialects/abstract/connection-manager.js"(exports, module) {
    "use strict";
    var { Pool, TimeoutError: TimeoutError2 } = require_lib2();
    var _ = require_lodash();
    var semver = require_semver2();
    var errors = require_errors();
    var { logger } = require_logger();
    var deprecations = require_deprecations();
    var debug = logger.debugContext("pool");
    var ConnectionManager = class {
      constructor(dialect, sequelize) {
        const config = _.cloneDeep(sequelize.config);
        this.sequelize = sequelize;
        this.config = config;
        this.dialect = dialect;
        this.versionPromise = null;
        this.dialectName = this.sequelize.options.dialect;
        if (config.pool === false) {
          throw new Error("Support for pool:false was removed in v4.0");
        }
        config.pool = _.defaults(config.pool || {}, {
          max: 5,
          min: 0,
          idle: 1e4,
          acquire: 6e4,
          evict: 1e3,
          validate: this._validate.bind(this)
        });
        this.initPools();
      }
      refreshTypeParser(dataTypes) {
        _.each(dataTypes, (dataType) => {
          if (Object.prototype.hasOwnProperty.call(dataType, "parse")) {
            if (dataType.types[this.dialectName]) {
              this._refreshTypeParser(dataType);
            } else {
              throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);
            }
          }
        });
      }
      _loadDialectModule(moduleName) {
        try {
          if (this.sequelize.config.dialectModulePath) {
            return __require(this.sequelize.config.dialectModulePath);
          }
          if (this.sequelize.config.dialectModule) {
            return this.sequelize.config.dialectModule;
          }
          return __require(moduleName);
        } catch (err) {
          if (err.code === "MODULE_NOT_FOUND") {
            if (this.sequelize.config.dialectModulePath) {
              throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);
            }
            throw new Error(`Please install ${moduleName} package manually`);
          }
          throw err;
        }
      }
      async _onProcessExit() {
        if (!this.pool) {
          return;
        }
        await this.pool.drain();
        debug("connection drain due to process exit");
        return await this.pool.destroyAllNow();
      }
      async close() {
        this.getConnection = async function getConnection() {
          throw new Error("ConnectionManager.getConnection was called after the connection manager was closed!");
        };
        return await this._onProcessExit();
      }
      initPools() {
        const config = this.config;
        if (!config.replication) {
          this.pool = new Pool({
            name: "sequelize",
            create: () => this._connect(config),
            destroy: async (connection) => {
              const result = await this._disconnect(connection);
              debug("connection destroy");
              return result;
            },
            validate: config.pool.validate,
            max: config.pool.max,
            min: config.pool.min,
            acquireTimeoutMillis: config.pool.acquire,
            idleTimeoutMillis: config.pool.idle,
            reapIntervalMillis: config.pool.evict,
            maxUses: config.pool.maxUses
          });
          debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);
          return;
        }
        if (!Array.isArray(config.replication.read)) {
          config.replication.read = [config.replication.read];
        }
        config.replication.write = _.defaults(config.replication.write, _.omit(config, "replication"));
        config.replication.read = config.replication.read.map((readConfig) => _.defaults(readConfig, _.omit(this.config, "replication")));
        let reads = 0;
        this.pool = {
          release: (client) => {
            if (client.queryType === "read") {
              this.pool.read.release(client);
            } else {
              this.pool.write.release(client);
            }
          },
          acquire: (queryType, useMaster) => {
            useMaster = useMaster === void 0 ? false : useMaster;
            if (queryType === "SELECT" && !useMaster) {
              return this.pool.read.acquire();
            }
            return this.pool.write.acquire();
          },
          destroy: (connection) => {
            this.pool[connection.queryType].destroy(connection);
            debug("connection destroy");
          },
          destroyAllNow: async () => {
            await Promise.all([
              this.pool.read.destroyAllNow(),
              this.pool.write.destroyAllNow()
            ]);
            debug("all connections destroyed");
          },
          drain: async () => Promise.all([
            this.pool.write.drain(),
            this.pool.read.drain()
          ]),
          read: new Pool({
            name: "sequelize:read",
            create: async () => {
              const nextRead = reads++ % config.replication.read.length;
              const connection = await this._connect(config.replication.read[nextRead]);
              connection.queryType = "read";
              return connection;
            },
            destroy: (connection) => this._disconnect(connection),
            validate: config.pool.validate,
            max: config.pool.max,
            min: config.pool.min,
            acquireTimeoutMillis: config.pool.acquire,
            idleTimeoutMillis: config.pool.idle,
            reapIntervalMillis: config.pool.evict,
            maxUses: config.pool.maxUses
          }),
          write: new Pool({
            name: "sequelize:write",
            create: async () => {
              const connection = await this._connect(config.replication.write);
              connection.queryType = "write";
              return connection;
            },
            destroy: (connection) => this._disconnect(connection),
            validate: config.pool.validate,
            max: config.pool.max,
            min: config.pool.min,
            acquireTimeoutMillis: config.pool.acquire,
            idleTimeoutMillis: config.pool.idle,
            reapIntervalMillis: config.pool.evict,
            maxUses: config.pool.maxUses
          })
        };
        debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);
      }
      async getConnection(options) {
        options = options || {};
        if (this.sequelize.options.databaseVersion === 0) {
          if (!this.versionPromise) {
            this.versionPromise = (async () => {
              try {
                const connection = await this._connect(this.config.replication.write || this.config);
                const _options = {};
                _options.transaction = { connection };
                _options.logging = () => {
                };
                _options.logging.__testLoggingFn = true;
                if (this.sequelize.options.databaseVersion === 0) {
                  const version = await this.sequelize.databaseVersion(_options);
                  const parsedVersion = _.get(semver.coerce(version), "version") || version;
                  this.sequelize.options.databaseVersion = semver.valid(parsedVersion) ? parsedVersion : this.dialect.defaultVersion;
                }
                if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {
                  deprecations.unsupportedEngine();
                  debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);
                }
                this.versionPromise = null;
                return await this._disconnect(connection);
              } catch (err) {
                this.versionPromise = null;
                throw err;
              }
            })();
          }
          await this.versionPromise;
        }
        let result;
        try {
          result = await this.pool.acquire(options.type, options.useMaster);
        } catch (error) {
          if (error instanceof TimeoutError2)
            throw new errors.ConnectionAcquireTimeoutError(error);
          throw error;
        }
        debug("connection acquired");
        return result;
      }
      async releaseConnection(connection) {
        this.pool.release(connection);
        debug("connection released");
      }
      async _connect(config) {
        await this.sequelize.runHooks("beforeConnect", config);
        const connection = await this.dialect.connectionManager.connect(config);
        await this.sequelize.runHooks("afterConnect", connection, config);
        return connection;
      }
      async _disconnect(connection) {
        await this.sequelize.runHooks("beforeDisconnect", connection);
        await this.dialect.connectionManager.disconnect(connection);
        return this.sequelize.runHooks("afterDisconnect", connection);
      }
      _validate(connection) {
        if (!this.dialect.connectionManager.validate) {
          return true;
        }
        return this.dialect.connectionManager.validate(connection);
      }
    };
    module.exports = ConnectionManager;
    module.exports.ConnectionManager = ConnectionManager;
    module.exports.default = ConnectionManager;
  }
});

// node_modules/sequelize/lib/dialects/parserStore.js
var require_parserStore = __commonJS({
  "node_modules/sequelize/lib/dialects/parserStore.js"(exports, module) {
    "use strict";
    var stores = /* @__PURE__ */ new Map();
    module.exports = (dialect) => {
      if (!stores.has(dialect)) {
        stores.set(dialect, /* @__PURE__ */ new Map());
      }
      return {
        clear() {
          stores.get(dialect).clear();
        },
        refresh(dataType) {
          for (const type of dataType.types[dialect]) {
            stores.get(dialect).set(type, dataType.parse);
          }
        },
        get(type) {
          return stores.get(dialect).get(type);
        }
      };
    };
  }
});

// node_modules/sequelize/lib/dialects/mariadb/connection-manager.js
var require_connection_manager2 = __commonJS({
  "node_modules/sequelize/lib/dialects/mariadb/connection-manager.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var semver = require_semver2();
    var AbstractConnectionManager = require_connection_manager();
    var SequelizeErrors = require_errors();
    var { logger } = require_logger();
    var DataTypes2 = require_data_types8().mariadb;
    var momentTz = require_moment_timezone2();
    var debug = logger.debugContext("connection:mariadb");
    var parserStore = require_parserStore()("mariadb");
    var ConnectionManager = class extends AbstractConnectionManager {
      constructor(dialect, sequelize) {
        sequelize.config.port = sequelize.config.port || 3306;
        super(dialect, sequelize);
        this.lib = this._loadDialectModule("mariadb");
        this.refreshTypeParser(DataTypes2);
      }
      static _typecast(field, next) {
        if (parserStore.get(field.type)) {
          return parserStore.get(field.type)(field, this.sequelize.options, next);
        }
        return next();
      }
      _refreshTypeParser(dataType) {
        parserStore.refresh(dataType);
      }
      _clearTypeParser() {
        parserStore.clear();
      }
      async connect(config) {
        let tzOffset = this.sequelize.options.timezone;
        tzOffset = /\//.test(tzOffset) ? momentTz.tz(tzOffset).format("Z") : tzOffset;
        const connectionConfig = __spreadValues({
          host: config.host,
          port: config.port,
          user: config.username,
          password: config.password,
          database: config.database,
          timezone: tzOffset,
          typeCast: ConnectionManager._typecast.bind(this),
          bigNumberStrings: false,
          supportBigNumbers: true,
          foundRows: false
        }, config.dialectOptions);
        if (!this.sequelize.config.keepDefaultTimezone) {
          if (connectionConfig.initSql) {
            if (!Array.isArray(connectionConfig.initSql)) {
              connectionConfig.initSql = [connectionConfig.initSql];
            }
            connectionConfig.initSql.push(`SET time_zone = '${tzOffset}'`);
          } else {
            connectionConfig.initSql = `SET time_zone = '${tzOffset}'`;
          }
        }
        try {
          const connection = await this.lib.createConnection(connectionConfig);
          this.sequelize.options.databaseVersion = semver.coerce(connection.serverVersion()).version;
          debug("connection acquired");
          connection.on("error", (error) => {
            switch (error.code) {
              case "ESOCKET":
              case "ECONNRESET":
              case "EPIPE":
              case "PROTOCOL_CONNECTION_LOST":
                this.pool.destroy(connection);
            }
          });
          return connection;
        } catch (err) {
          switch (err.code) {
            case "ECONNREFUSED":
              throw new SequelizeErrors.ConnectionRefusedError(err);
            case "ER_ACCESS_DENIED_ERROR":
            case "ER_ACCESS_DENIED_NO_PASSWORD_ERROR":
              throw new SequelizeErrors.AccessDeniedError(err);
            case "ENOTFOUND":
              throw new SequelizeErrors.HostNotFoundError(err);
            case "EHOSTUNREACH":
            case "ENETUNREACH":
            case "EADDRNOTAVAIL":
              throw new SequelizeErrors.HostNotReachableError(err);
            case "EINVAL":
              throw new SequelizeErrors.InvalidConnectionError(err);
            default:
              throw new SequelizeErrors.ConnectionError(err);
          }
        }
      }
      async disconnect(connection) {
        if (!connection.isValid()) {
          debug("connection tried to disconnect but was already at CLOSED state");
          return;
        }
        return await connection.end();
      }
      validate(connection) {
        return connection && connection.isValid();
      }
    };
    module.exports = ConnectionManager;
    module.exports.ConnectionManager = ConnectionManager;
    module.exports.default = ConnectionManager;
  }
});

// node_modules/sequelize/lib/dialects/abstract/query.js
var require_query = __commonJS({
  "node_modules/sequelize/lib/dialects/abstract/query.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var _ = require_lodash();
    var SqlString = require_sql_string();
    var QueryTypes2 = require_query_types();
    var Dot = require_dottie();
    var deprecations = require_deprecations();
    var uuid = require_dist().v4;
    var { safeStringifyJson } = require_utils();
    var AbstractQuery = class {
      constructor(connection, sequelize, options) {
        this.uuid = uuid();
        this.connection = connection;
        this.instance = options.instance;
        this.model = options.model;
        this.sequelize = sequelize;
        this.options = __spreadValues({
          plain: false,
          raw: false,
          logging: console.log
        }, options);
        this.checkLoggingOption();
        if (options.rawErrors) {
          this.formatError = AbstractQuery.prototype.formatError;
        }
      }
      static formatBindParameters(sql, values, dialect, replacementFunc, options) {
        if (!values) {
          return [sql, []];
        }
        options = options || {};
        if (typeof replacementFunc !== "function") {
          options = replacementFunc || {};
          replacementFunc = void 0;
        }
        if (!replacementFunc) {
          if (options.skipValueReplace) {
            replacementFunc = (match, key, values2) => {
              if (values2[key] !== void 0) {
                return match;
              }
              return void 0;
            };
          } else {
            replacementFunc = (match, key, values2, timeZone2, dialect2) => {
              if (values2[key] !== void 0) {
                return SqlString.escape(values2[key], timeZone2, dialect2);
              }
              return void 0;
            };
          }
        } else if (options.skipValueReplace) {
          const origReplacementFunc = replacementFunc;
          replacementFunc = (match, key, values2, timeZone2, dialect2, options2) => {
            if (origReplacementFunc(match, key, values2, timeZone2, dialect2, options2) !== void 0) {
              return match;
            }
            return void 0;
          };
        }
        const timeZone = null;
        const list = Array.isArray(values);
        sql = sql.replace(/\B\$(\$|\w+)/g, (match, key) => {
          if (key === "$") {
            return options.skipUnescape ? match : key;
          }
          let replVal;
          if (list) {
            if (key.match(/^[1-9]\d*$/)) {
              key = key - 1;
              replVal = replacementFunc(match, key, values, timeZone, dialect, options);
            }
          } else if (!key.match(/^\d*$/)) {
            replVal = replacementFunc(match, key, values, timeZone, dialect, options);
          }
          if (replVal === void 0) {
            throw new Error(`Named bind parameter "${match}" has no value in the given object.`);
          }
          return replVal;
        });
        return [sql, []];
      }
      formatError(error, errStack) {
        error.stack = errStack;
        return error;
      }
      run() {
        throw new Error("The run method wasn't overwritten!");
      }
      checkLoggingOption() {
        if (this.options.logging === true) {
          deprecations.noTrueLogging();
          this.options.logging = console.log;
        }
      }
      getInsertIdField() {
        return "insertId";
      }
      getUniqueConstraintErrorMessage(field) {
        let message = field ? `${field} must be unique` : "Must be unique";
        if (field && this.model) {
          for (const key of Object.keys(this.model.uniqueKeys)) {
            if (this.model.uniqueKeys[key].fields.includes(field.replace(/"/g, ""))) {
              if (this.model.uniqueKeys[key].msg) {
                message = this.model.uniqueKeys[key].msg;
              }
            }
          }
        }
        return message;
      }
      isRawQuery() {
        return this.options.type === QueryTypes2.RAW;
      }
      isVersionQuery() {
        return this.options.type === QueryTypes2.VERSION;
      }
      isUpsertQuery() {
        return this.options.type === QueryTypes2.UPSERT;
      }
      isInsertQuery(results, metaData) {
        let result = true;
        if (this.options.type === QueryTypes2.INSERT) {
          return true;
        }
        result = result && this.sql.toLowerCase().startsWith("insert into");
        result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));
        result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));
        return result;
      }
      handleInsertQuery(results, metaData) {
        if (this.instance) {
          const autoIncrementAttribute = this.model.autoIncrementAttribute;
          let id = null;
          id = id || results && results[this.getInsertIdField()];
          id = id || metaData && metaData[this.getInsertIdField()];
          this.instance[autoIncrementAttribute] = id;
        }
      }
      isShowTablesQuery() {
        return this.options.type === QueryTypes2.SHOWTABLES;
      }
      handleShowTablesQuery(results) {
        return _.flatten(results.map((resultSet) => Object.values(resultSet)));
      }
      isShowIndexesQuery() {
        return this.options.type === QueryTypes2.SHOWINDEXES;
      }
      isShowConstraintsQuery() {
        return this.options.type === QueryTypes2.SHOWCONSTRAINTS;
      }
      isDescribeQuery() {
        return this.options.type === QueryTypes2.DESCRIBE;
      }
      isSelectQuery() {
        return this.options.type === QueryTypes2.SELECT;
      }
      isBulkUpdateQuery() {
        return this.options.type === QueryTypes2.BULKUPDATE;
      }
      isBulkDeleteQuery() {
        return this.options.type === QueryTypes2.BULKDELETE;
      }
      isForeignKeysQuery() {
        return this.options.type === QueryTypes2.FOREIGNKEYS;
      }
      isUpdateQuery() {
        return this.options.type === QueryTypes2.UPDATE;
      }
      handleSelectQuery(results) {
        let result = null;
        if (this.options.fieldMap) {
          const fieldMap = this.options.fieldMap;
          results = results.map((result2) => _.reduce(fieldMap, (result3, name, field) => {
            if (result3[field] !== void 0 && name !== field) {
              result3[name] = result3[field];
              delete result3[field];
            }
            return result3;
          }, result2));
        }
        if (this.options.raw) {
          result = results.map((result2) => {
            let o = {};
            for (const key in result2) {
              if (Object.prototype.hasOwnProperty.call(result2, key)) {
                o[key] = result2[key];
              }
            }
            if (this.options.nest) {
              o = Dot.transform(o);
            }
            return o;
          });
        } else if (this.options.hasJoin === true) {
          results = AbstractQuery._groupJoinData(results, {
            model: this.model,
            includeMap: this.options.includeMap,
            includeNames: this.options.includeNames
          }, {
            checkExisting: this.options.hasMultiAssociation
          });
          result = this.model.bulkBuild(results, {
            isNewRecord: false,
            include: this.options.include,
            includeNames: this.options.includeNames,
            includeMap: this.options.includeMap,
            includeValidated: true,
            attributes: this.options.originalAttributes || this.options.attributes,
            raw: true
          });
        } else {
          result = this.model.bulkBuild(results, {
            isNewRecord: false,
            raw: true,
            attributes: this.options.originalAttributes || this.options.attributes
          });
        }
        if (this.options.plain) {
          result = result.length === 0 ? null : result[0];
        }
        return result;
      }
      isShowOrDescribeQuery() {
        let result = false;
        result = result || this.sql.toLowerCase().startsWith("show");
        result = result || this.sql.toLowerCase().startsWith("describe");
        return result;
      }
      isCallQuery() {
        return this.sql.toLowerCase().startsWith("call");
      }
      _logQuery(sql, debugContext, parameters) {
        const { connection, options } = this;
        const benchmark = this.sequelize.options.benchmark || options.benchmark;
        const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;
        const startTime = Date.now();
        let logParameter = "";
        if (logQueryParameters && parameters) {
          const delimiter = sql.endsWith(";") ? "" : ";";
          let paramStr;
          if (Array.isArray(parameters)) {
            paramStr = parameters.map((p) => safeStringifyJson(p)).join(", ");
          } else {
            paramStr = safeStringifyJson(parameters);
          }
          logParameter = `${delimiter} ${paramStr}`;
        }
        const fmt = `(${connection.uuid || "default"}): ${sql}${logParameter}`;
        const msg = `Executing ${fmt}`;
        debugContext(msg);
        if (!benchmark) {
          this.sequelize.log(`Executing ${fmt}`, options);
        }
        return () => {
          const afterMsg = `Executed ${fmt}`;
          debugContext(afterMsg);
          if (benchmark) {
            this.sequelize.log(afterMsg, Date.now() - startTime, options);
          }
        };
      }
      static _groupJoinData(rows, includeOptions, options) {
        if (!rows.length) {
          return [];
        }
        let i;
        let length;
        let $i;
        let $length;
        let rowsI;
        let row;
        const rowsLength = rows.length;
        let keys;
        let key;
        let keyI;
        let keyLength;
        let prevKey;
        let values;
        let topValues;
        let topExists;
        const checkExisting = options.checkExisting;
        let itemHash;
        let parentHash;
        let topHash;
        const results = checkExisting ? [] : new Array(rowsLength);
        const resultMap = {};
        const includeMap = {};
        let $keyPrefix;
        let $keyPrefixString;
        let $prevKeyPrefixString;
        let $prevKeyPrefix;
        let $lastKeyPrefix;
        let $current;
        let $parent;
        let previousPiece;
        const buildIncludeMap = (piece) => {
          if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {
            includeMap[key] = $current = $current.includeMap[piece];
            if (previousPiece) {
              previousPiece = `${previousPiece}.${piece}`;
            } else {
              previousPiece = piece;
            }
            includeMap[previousPiece] = $current;
          }
        };
        const keyPrefixStringMemo = {};
        const keyPrefixString = (key2, memo) => {
          if (!Object.prototype.hasOwnProperty.call(memo, key2)) {
            memo[key2] = key2.substr(0, key2.lastIndexOf("."));
          }
          return memo[key2];
        };
        const removeKeyPrefixMemo = {};
        const removeKeyPrefix = (key2) => {
          if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key2)) {
            const index = key2.lastIndexOf(".");
            removeKeyPrefixMemo[key2] = key2.substr(index === -1 ? 0 : index + 1);
          }
          return removeKeyPrefixMemo[key2];
        };
        const keyPrefixMemo = {};
        const keyPrefix = (key2) => {
          if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key2)) {
            const prefixString = keyPrefixString(key2, keyPrefixStringMemo);
            if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {
              keyPrefixMemo[prefixString] = prefixString ? prefixString.split(".") : [];
            }
            keyPrefixMemo[key2] = keyPrefixMemo[prefixString];
          }
          return keyPrefixMemo[key2];
        };
        const lastKeyPrefixMemo = {};
        const lastKeyPrefix = (key2) => {
          if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key2)) {
            const prefix2 = keyPrefix(key2);
            const length2 = prefix2.length;
            lastKeyPrefixMemo[key2] = !length2 ? "" : prefix2[length2 - 1];
          }
          return lastKeyPrefixMemo[key2];
        };
        const getUniqueKeyAttributes = (model) => {
          let uniqueKeyAttributes2 = _.chain(model.uniqueKeys);
          uniqueKeyAttributes2 = uniqueKeyAttributes2.result(`${uniqueKeyAttributes2.findKey()}.fields`).map((field) => _.findKey(model.attributes, (chr) => chr.field === field)).value();
          return uniqueKeyAttributes2;
        };
        const stringify = (obj) => obj instanceof Buffer ? obj.toString("hex") : obj;
        let primaryKeyAttributes;
        let uniqueKeyAttributes;
        let prefix;
        for (rowsI = 0; rowsI < rowsLength; rowsI++) {
          row = rows[rowsI];
          if (rowsI === 0) {
            keys = Object.keys(row);
            keyLength = keys.length;
          }
          if (checkExisting) {
            topExists = false;
            $length = includeOptions.model.primaryKeyAttributes.length;
            topHash = "";
            if ($length === 1) {
              topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);
            } else if ($length > 1) {
              for ($i = 0; $i < $length; $i++) {
                topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);
              }
            } else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {
              uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);
              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {
                topHash += row[uniqueKeyAttributes[$i]];
              }
            }
          }
          topValues = values = {};
          $prevKeyPrefix = void 0;
          for (keyI = 0; keyI < keyLength; keyI++) {
            key = keys[keyI];
            $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);
            $keyPrefix = keyPrefix(key);
            if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {
              if (!$keyPrefix.length) {
                includeMap[key] = includeMap[""] = includeOptions;
              } else {
                $current = includeOptions;
                previousPiece = void 0;
                $keyPrefix.forEach(buildIncludeMap);
              }
            }
            if ($prevKeyPrefix !== void 0 && $prevKeyPrefix !== $keyPrefix) {
              if (checkExisting) {
                length = $prevKeyPrefix.length;
                $parent = null;
                parentHash = null;
                if (length) {
                  for (i = 0; i < length; i++) {
                    prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];
                    primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;
                    $length = primaryKeyAttributes.length;
                    itemHash = prefix;
                    if ($length === 1) {
                      itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);
                    } else if ($length > 1) {
                      for ($i = 0; $i < $length; $i++) {
                        itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);
                      }
                    } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {
                      uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);
                      for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {
                        itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];
                      }
                    }
                    if (!parentHash) {
                      parentHash = topHash;
                    }
                    itemHash = parentHash + itemHash;
                    $parent = prefix;
                    if (i < length - 1) {
                      parentHash = itemHash;
                    }
                  }
                } else {
                  itemHash = topHash;
                }
                if (itemHash === topHash) {
                  if (!resultMap[itemHash]) {
                    resultMap[itemHash] = values;
                  } else {
                    topExists = true;
                  }
                } else if (!resultMap[itemHash]) {
                  $parent = resultMap[parentHash];
                  $lastKeyPrefix = lastKeyPrefix(prevKey);
                  if (includeMap[prevKey].association.isSingleAssociation) {
                    if ($parent) {
                      $parent[$lastKeyPrefix] = resultMap[itemHash] = values;
                    }
                  } else {
                    if (!$parent[$lastKeyPrefix]) {
                      $parent[$lastKeyPrefix] = [];
                    }
                    $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);
                  }
                }
                values = {};
              } else {
                $current = topValues;
                length = $keyPrefix.length;
                if (length) {
                  for (i = 0; i < length; i++) {
                    if (i === length - 1) {
                      values = $current[$keyPrefix[i]] = {};
                    }
                    $current = $current[$keyPrefix[i]] || {};
                  }
                }
              }
            }
            values[removeKeyPrefix(key)] = row[key];
            prevKey = key;
            $prevKeyPrefix = $keyPrefix;
            $prevKeyPrefixString = $keyPrefixString;
          }
          if (checkExisting) {
            length = $prevKeyPrefix.length;
            $parent = null;
            parentHash = null;
            if (length) {
              for (i = 0; i < length; i++) {
                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];
                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;
                $length = primaryKeyAttributes.length;
                itemHash = prefix;
                if ($length === 1) {
                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);
                } else if ($length > 0) {
                  for ($i = 0; $i < $length; $i++) {
                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);
                  }
                } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {
                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);
                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {
                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];
                  }
                }
                if (!parentHash) {
                  parentHash = topHash;
                }
                itemHash = parentHash + itemHash;
                $parent = prefix;
                if (i < length - 1) {
                  parentHash = itemHash;
                }
              }
            } else {
              itemHash = topHash;
            }
            if (itemHash === topHash) {
              if (!resultMap[itemHash]) {
                resultMap[itemHash] = values;
              } else {
                topExists = true;
              }
            } else if (!resultMap[itemHash]) {
              $parent = resultMap[parentHash];
              $lastKeyPrefix = lastKeyPrefix(prevKey);
              if (includeMap[prevKey].association.isSingleAssociation) {
                if ($parent) {
                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;
                }
              } else {
                if (!$parent[$lastKeyPrefix]) {
                  $parent[$lastKeyPrefix] = [];
                }
                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);
              }
            }
            if (!topExists) {
              results.push(topValues);
            }
          } else {
            results[rowsI] = topValues;
          }
        }
        return results;
      }
    };
    module.exports = AbstractQuery;
    module.exports.AbstractQuery = AbstractQuery;
    module.exports.default = AbstractQuery;
  }
});

// node_modules/sequelize/lib/dialects/mariadb/query.js
var require_query2 = __commonJS({
  "node_modules/sequelize/lib/dialects/mariadb/query.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var AbstractQuery = require_query();
    var sequelizeErrors = require_errors();
    var _ = require_lodash();
    var DataTypes2 = require_data_types8();
    var { logger } = require_logger();
    var ER_DUP_ENTRY = 1062;
    var ER_DEADLOCK = 1213;
    var ER_ROW_IS_REFERENCED = 1451;
    var ER_NO_REFERENCED_ROW = 1452;
    var debug = logger.debugContext("sql:mariadb");
    var Query = class extends AbstractQuery {
      constructor(connection, sequelize, options) {
        super(connection, sequelize, __spreadValues({ showWarnings: false }, options));
      }
      static formatBindParameters(sql, values, dialect) {
        const bindParam = [];
        const replacementFunc = (match, key, values_) => {
          if (values_[key] !== void 0) {
            bindParam.push(values_[key]);
            return "?";
          }
          return void 0;
        };
        sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];
        return [sql, bindParam.length > 0 ? bindParam : void 0];
      }
      async run(sql, parameters) {
        this.sql = sql;
        const { connection, options } = this;
        const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;
        const complete = this._logQuery(sql, debug, parameters);
        if (parameters) {
          debug("parameters(%j)", parameters);
        }
        let results;
        const errForStack = new Error();
        try {
          results = await connection.query(this.sql, parameters);
        } catch (error) {
          if (options.transaction && error.errno === ER_DEADLOCK) {
            try {
              await options.transaction.rollback();
            } catch (error_) {
            }
            options.transaction.finished = "rollback";
          }
          error.sql = sql;
          error.parameters = parameters;
          throw this.formatError(error, errForStack.stack);
        } finally {
          complete();
        }
        if (showWarnings && results && results.warningStatus > 0) {
          await this.logWarnings(results);
        }
        return this.formatResults(results);
      }
      formatResults(data) {
        let result = this.instance;
        if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {
          return data.affectedRows;
        }
        if (this.isUpsertQuery()) {
          return [result, data.affectedRows === 1];
        }
        if (this.isInsertQuery(data)) {
          this.handleInsertQuery(data);
          if (!this.instance) {
            if (this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {
              const startId = data[this.getInsertIdField()];
              result = new Array(data.affectedRows);
              const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;
              for (let i = 0; i < data.affectedRows; i++) {
                result[i] = { [pkField]: startId + i };
              }
              return [result, data.affectedRows];
            }
            return [data[this.getInsertIdField()], data.affectedRows];
          }
        }
        if (this.isSelectQuery()) {
          this.handleJsonSelectQuery(data);
          return this.handleSelectQuery(data);
        }
        if (this.isInsertQuery() || this.isUpdateQuery()) {
          return [result, data.affectedRows];
        }
        if (this.isCallQuery()) {
          return data[0];
        }
        if (this.isRawQuery()) {
          const meta = data.meta;
          delete data.meta;
          return [data, meta];
        }
        if (this.isShowIndexesQuery()) {
          return this.handleShowIndexesQuery(data);
        }
        if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {
          return data;
        }
        if (this.isShowTablesQuery()) {
          return this.handleShowTablesQuery(data);
        }
        if (this.isDescribeQuery()) {
          result = {};
          for (const _result of data) {
            result[_result.Field] = {
              type: _result.Type.toLowerCase().startsWith("enum") ? _result.Type.replace(/^enum/i, "ENUM") : _result.Type.toUpperCase(),
              allowNull: _result.Null === "YES",
              defaultValue: _result.Default,
              primaryKey: _result.Key === "PRI",
              autoIncrement: Object.prototype.hasOwnProperty.call(_result, "Extra") && _result.Extra.toLowerCase() === "auto_increment",
              comment: _result.Comment ? _result.Comment : null
            };
          }
          return result;
        }
        if (this.isVersionQuery()) {
          return data[0].version;
        }
        return result;
      }
      handleJsonSelectQuery(rows) {
        if (!this.model || !this.model.fieldRawAttributesMap) {
          return;
        }
        for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {
          const modelField = this.model.fieldRawAttributesMap[_field];
          if (modelField.type instanceof DataTypes2.JSON) {
            rows = rows.map((row) => {
              if (row[modelField.fieldName] && typeof row[modelField.fieldName] === "string") {
                row[modelField.fieldName] = JSON.parse(row[modelField.fieldName]);
              }
              if (DataTypes2.JSON.parse) {
                return DataTypes2.JSON.parse(modelField, this.sequelize.options, row[modelField.fieldName]);
              }
              return row;
            });
          }
        }
      }
      async logWarnings(results) {
        const warningResults = await this.run("SHOW WARNINGS");
        const warningMessage = `MariaDB Warnings (${this.connection.uuid || "default"}): `;
        const messages = [];
        for (const _warningRow of warningResults) {
          if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== "function") {
            continue;
          }
          for (const _warningResult of _warningRow) {
            if (Object.prototype.hasOwnProperty.call(_warningResult, "Message")) {
              messages.push(_warningResult.Message);
            } else {
              for (const _objectKey of _warningResult.keys()) {
                messages.push([_objectKey, _warningResult[_objectKey]].join(": "));
              }
            }
          }
        }
        this.sequelize.log(warningMessage + messages.join("; "), this.options);
        return results;
      }
      formatError(err, errStack) {
        switch (err.errno) {
          case ER_DUP_ENTRY: {
            const match = err.message.match(/Duplicate entry '([\s\S]*)' for key '?((.|\s)*?)'?\s.*$/);
            let fields = {};
            let message = "Validation error";
            const values = match ? match[1].split("-") : void 0;
            const fieldKey = match ? match[2] : void 0;
            const fieldVal = match ? match[1] : void 0;
            const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];
            if (uniqueKey) {
              if (uniqueKey.msg)
                message = uniqueKey.msg;
              fields = _.zipObject(uniqueKey.fields, values);
            } else {
              fields[fieldKey] = fieldVal;
            }
            const errors = [];
            _.forOwn(fields, (value, field) => {
              errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), "unique violation", field, value, this.instance, "not_unique"));
            });
            return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });
          }
          case ER_ROW_IS_REFERENCED:
          case ER_NO_REFERENCED_ROW: {
            const match = err.message.match(/CONSTRAINT ([`"])(.*)\1 FOREIGN KEY \(\1(.*)\1\) REFERENCES \1(.*)\1 \(\1(.*)\1\)/);
            const quoteChar = match ? match[1] : "`";
            const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;
            return new sequelizeErrors.ForeignKeyConstraintError({
              reltype: err.errno === ER_ROW_IS_REFERENCED ? "parent" : "child",
              table: match ? match[4] : void 0,
              fields,
              value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,
              index: match ? match[2] : void 0,
              parent: err,
              stack: errStack
            });
          }
          default:
            return new sequelizeErrors.DatabaseError(err, { stack: errStack });
        }
      }
      handleShowTablesQuery(results) {
        return results.map((resultSet) => ({
          tableName: resultSet.TABLE_NAME,
          schema: resultSet.TABLE_SCHEMA
        }));
      }
      handleShowIndexesQuery(data) {
        let currItem;
        const result = [];
        data.forEach((item) => {
          if (!currItem || currItem.name !== item.Key_name) {
            currItem = {
              primary: item.Key_name === "PRIMARY",
              fields: [],
              name: item.Key_name,
              tableName: item.Table,
              unique: item.Non_unique !== 1,
              type: item.Index_type
            };
            result.push(currItem);
          }
          currItem.fields[item.Seq_in_index - 1] = {
            attribute: item.Column_name,
            length: item.Sub_part || void 0,
            order: item.Collation === "A" ? "ASC" : void 0
          };
        });
        return result;
      }
    };
    module.exports = Query;
  }
});

// node_modules/sequelize/lib/dialects/abstract/query-generator/operators.js
var require_operators2 = __commonJS({
  "node_modules/sequelize/lib/dialects/abstract/query-generator/operators.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var _ = require_lodash();
    var Op2 = require_operators();
    var Utils2 = require_utils();
    var OperatorHelpers = {
      OperatorMap: {
        [Op2.eq]: "=",
        [Op2.ne]: "!=",
        [Op2.gte]: ">=",
        [Op2.gt]: ">",
        [Op2.lte]: "<=",
        [Op2.lt]: "<",
        [Op2.not]: "IS NOT",
        [Op2.is]: "IS",
        [Op2.in]: "IN",
        [Op2.notIn]: "NOT IN",
        [Op2.like]: "LIKE",
        [Op2.notLike]: "NOT LIKE",
        [Op2.iLike]: "ILIKE",
        [Op2.notILike]: "NOT ILIKE",
        [Op2.startsWith]: "LIKE",
        [Op2.endsWith]: "LIKE",
        [Op2.substring]: "LIKE",
        [Op2.regexp]: "~",
        [Op2.notRegexp]: "!~",
        [Op2.iRegexp]: "~*",
        [Op2.notIRegexp]: "!~*",
        [Op2.between]: "BETWEEN",
        [Op2.notBetween]: "NOT BETWEEN",
        [Op2.overlap]: "&&",
        [Op2.contains]: "@>",
        [Op2.contained]: "<@",
        [Op2.adjacent]: "-|-",
        [Op2.strictLeft]: "<<",
        [Op2.strictRight]: ">>",
        [Op2.noExtendRight]: "&<",
        [Op2.noExtendLeft]: "&>",
        [Op2.any]: "ANY",
        [Op2.all]: "ALL",
        [Op2.and]: " AND ",
        [Op2.or]: " OR ",
        [Op2.col]: "COL",
        [Op2.placeholder]: "$$PLACEHOLDER$$",
        [Op2.match]: "@@"
      },
      OperatorsAliasMap: {},
      setOperatorsAliases(aliases) {
        if (!aliases || _.isEmpty(aliases)) {
          this.OperatorsAliasMap = false;
        } else {
          this.OperatorsAliasMap = __spreadValues({}, aliases);
        }
      },
      _replaceAliases(orig) {
        const obj = {};
        if (!this.OperatorsAliasMap) {
          return orig;
        }
        Utils2.getOperators(orig).forEach((op) => {
          const item = orig[op];
          if (_.isPlainObject(item)) {
            obj[op] = this._replaceAliases(item);
          } else {
            obj[op] = item;
          }
        });
        _.forOwn(orig, (item, prop) => {
          prop = this.OperatorsAliasMap[prop] || prop;
          if (_.isPlainObject(item)) {
            item = this._replaceAliases(item);
          }
          obj[prop] = item;
        });
        return obj;
      }
    };
    module.exports = OperatorHelpers;
  }
});

// node_modules/sequelize/lib/dialects/abstract/query-generator/transaction.js
var require_transaction2 = __commonJS({
  "node_modules/sequelize/lib/dialects/abstract/query-generator/transaction.js"(exports, module) {
    "use strict";
    var uuidv4 = require_dist().v4;
    var TransactionQueries = {
      setIsolationLevelQuery(value, options) {
        if (options.parent) {
          return;
        }
        return `SET TRANSACTION ISOLATION LEVEL ${value};`;
      },
      generateTransactionId() {
        return uuidv4();
      },
      startTransactionQuery(transaction) {
        if (transaction.parent) {
          return `SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;
        }
        return "START TRANSACTION;";
      },
      deferConstraintsQuery() {
      },
      setConstraintQuery() {
      },
      setDeferredQuery() {
      },
      setImmediateQuery() {
      },
      commitTransactionQuery(transaction) {
        if (transaction.parent) {
          return;
        }
        return "COMMIT;";
      },
      rollbackTransactionQuery(transaction) {
        if (transaction.parent) {
          return `ROLLBACK TO SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;
        }
        return "ROLLBACK;";
      }
    };
    module.exports = TransactionQueries;
  }
});

// node_modules/sequelize/lib/dialects/abstract/query-generator.js
var require_query_generator = __commonJS({
  "node_modules/sequelize/lib/dialects/abstract/query-generator.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var util = __require("util");
    var _ = require_lodash();
    var uuidv4 = require_dist().v4;
    var Utils2 = require_utils();
    var deprecations = require_deprecations();
    var SqlString = require_sql_string();
    var DataTypes2 = require_data_types8();
    var Model3 = require_model();
    var Association2 = require_base();
    var BelongsTo2 = require_belongs_to();
    var BelongsToMany2 = require_belongs_to_many();
    var HasMany2 = require_has_many();
    var Op2 = require_operators();
    var sequelizeError = require_errors();
    var IndexHints2 = require_index_hints();
    var QueryGenerator = class {
      constructor(options) {
        if (!options.sequelize)
          throw new Error("QueryGenerator initialized without options.sequelize");
        if (!options._dialect)
          throw new Error("QueryGenerator initialized without options._dialect");
        this.sequelize = options.sequelize;
        this.options = options.sequelize.options;
        this.dialect = options._dialect.name;
        this._dialect = options._dialect;
        this._initQuoteIdentifier();
      }
      extractTableDetails(tableName, options) {
        options = options || {};
        tableName = tableName || {};
        return {
          schema: tableName.schema || options.schema || "public",
          tableName: _.isPlainObject(tableName) ? tableName.tableName : tableName,
          delimiter: tableName.delimiter || options.delimiter || "."
        };
      }
      addSchema(param) {
        if (!param._schema)
          return param.tableName || param;
        const self2 = this;
        return {
          tableName: param.tableName || param,
          table: param.tableName || param,
          name: param.name || param,
          schema: param._schema,
          delimiter: param._schemaDelimiter || ".",
          toString() {
            return self2.quoteTable(this);
          }
        };
      }
      dropSchema(tableName, options) {
        return this.dropTableQuery(tableName, options);
      }
      describeTableQuery(tableName, schema, schemaDelimiter) {
        const table = this.quoteTable(this.addSchema({
          tableName,
          _schema: schema,
          _schemaDelimiter: schemaDelimiter
        }));
        return `DESCRIBE ${table};`;
      }
      dropTableQuery(tableName) {
        return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)};`;
      }
      renameTableQuery(before, after) {
        return `ALTER TABLE ${this.quoteTable(before)} RENAME TO ${this.quoteTable(after)};`;
      }
      insertQuery(table, valueHash, modelAttributes, options) {
        options = options || {};
        _.defaults(options, this.options);
        const modelAttributeMap = {};
        const bind = [];
        const fields = [];
        const returningModelAttributes = [];
        const values = [];
        const quotedTable = this.quoteTable(table);
        const bindParam = options.bindParam === void 0 ? this.bindParam(bind) : options.bindParam;
        let query;
        let valueQuery = "";
        let emptyQuery = "";
        let outputFragment = "";
        let returningFragment = "";
        let identityWrapperRequired = false;
        let tmpTable = "";
        if (modelAttributes) {
          _.each(modelAttributes, (attribute, key) => {
            modelAttributeMap[key] = attribute;
            if (attribute.field) {
              modelAttributeMap[attribute.field] = attribute;
            }
          });
        }
        if (this._dialect.supports["DEFAULT VALUES"]) {
          emptyQuery += " DEFAULT VALUES";
        } else if (this._dialect.supports["VALUES ()"]) {
          emptyQuery += " VALUES ()";
        }
        if (this._dialect.supports.returnValues && options.returning) {
          const returnValues = this.generateReturnValues(modelAttributes, options);
          returningModelAttributes.push(...returnValues.returnFields);
          returningFragment = returnValues.returningFragment;
          tmpTable = returnValues.tmpTable || "";
          outputFragment = returnValues.outputFragment || "";
        }
        if (_.get(this, ["sequelize", "options", "dialectOptions", "prependSearchPath"]) || options.searchPath) {
          options.bindParam = false;
        }
        if (this._dialect.supports.EXCEPTION && options.exception) {
          options.bindParam = false;
        }
        valueHash = Utils2.removeNullValuesFromHash(valueHash, this.options.omitNull);
        for (const key in valueHash) {
          if (Object.prototype.hasOwnProperty.call(valueHash, key)) {
            const value = valueHash[key];
            fields.push(this.quoteIdentifier(key));
            if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && value == null) {
              if (!this._dialect.supports.autoIncrement.defaultValue) {
                fields.splice(-1, 1);
              } else if (this._dialect.supports.DEFAULT) {
                values.push("DEFAULT");
              } else {
                values.push(this.escape(null));
              }
            } else {
              if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true) {
                identityWrapperRequired = true;
              }
              if (value instanceof Utils2.SequelizeMethod || options.bindParam === false) {
                values.push(this.escape(value, modelAttributeMap && modelAttributeMap[key] || void 0, { context: "INSERT" }));
              } else {
                values.push(this.format(value, modelAttributeMap && modelAttributeMap[key] || void 0, { context: "INSERT" }, bindParam));
              }
            }
          }
        }
        let onDuplicateKeyUpdate = "";
        if (this._dialect.supports.inserts.updateOnDuplicate && options.updateOnDuplicate) {
          if (this._dialect.supports.inserts.updateOnDuplicate == " ON CONFLICT DO UPDATE SET") {
            const conflictKeys = options.upsertKeys.map((attr) => this.quoteIdentifier(attr));
            const updateKeys = options.updateOnDuplicate.map((attr) => `${this.quoteIdentifier(attr)}=EXCLUDED.${this.quoteIdentifier(attr)}`);
            onDuplicateKeyUpdate = ` ON CONFLICT (${conflictKeys.join(",")})`;
            onDuplicateKeyUpdate += _.isEmpty(updateKeys) ? " DO NOTHING " : ` DO UPDATE SET ${updateKeys.join(",")}`;
          } else {
            const valueKeys = options.updateOnDuplicate.map((attr) => `${this.quoteIdentifier(attr)}=VALUES(${this.quoteIdentifier(attr)})`);
            if (_.isEmpty(valueKeys) && options.upsertKeys) {
              valueKeys.push(...options.upsertKeys.map((attr) => `${this.quoteIdentifier(attr)}=${this.quoteIdentifier(attr)}`));
            }
            if (_.isEmpty(valueKeys)) {
              throw new Error("No update values found for ON DUPLICATE KEY UPDATE clause, and no identifier fields could be found to use instead.");
            }
            onDuplicateKeyUpdate += `${this._dialect.supports.inserts.updateOnDuplicate} ${valueKeys.join(",")}`;
          }
        }
        const replacements = {
          ignoreDuplicates: options.ignoreDuplicates ? this._dialect.supports.inserts.ignoreDuplicates : "",
          onConflictDoNothing: options.ignoreDuplicates ? this._dialect.supports.inserts.onConflictDoNothing : "",
          attributes: fields.join(","),
          output: outputFragment,
          values: values.join(","),
          tmpTable
        };
        valueQuery = `${tmpTable}INSERT${replacements.ignoreDuplicates} INTO ${quotedTable} (${replacements.attributes})${replacements.output} VALUES (${replacements.values})${onDuplicateKeyUpdate}${replacements.onConflictDoNothing}${valueQuery}`;
        emptyQuery = `${tmpTable}INSERT${replacements.ignoreDuplicates} INTO ${quotedTable}${replacements.output}${onDuplicateKeyUpdate}${replacements.onConflictDoNothing}${emptyQuery}`;
        if (this._dialect.supports.EXCEPTION && options.exception) {
          const dropFunction = "DROP FUNCTION IF EXISTS pg_temp.testfunc()";
          if (returningModelAttributes.length === 0) {
            returningModelAttributes.push("*");
          }
          const delimiter = `$func_${uuidv4().replace(/-/g, "")}$`;
          const selectQuery = `SELECT (testfunc.response).${returningModelAttributes.join(", (testfunc.response).")}, testfunc.sequelize_caught_exception FROM pg_temp.testfunc();`;
          options.exception = "WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL;";
          valueQuery = `CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response ${quotedTable}, OUT sequelize_caught_exception text) RETURNS RECORD AS ${delimiter} BEGIN ${valueQuery} RETURNING * INTO response; EXCEPTION ${options.exception} END ${delimiter} LANGUAGE plpgsql; ${selectQuery} ${dropFunction}`;
        } else {
          valueQuery += returningFragment;
          emptyQuery += returningFragment;
        }
        query = `${replacements.attributes.length ? valueQuery : emptyQuery};`;
        if (this._dialect.supports.finalTable) {
          query = `SELECT * FROM FINAL TABLE(${replacements.attributes.length ? valueQuery : emptyQuery});`;
        }
        if (identityWrapperRequired && this._dialect.supports.autoIncrement.identityInsert) {
          query = `SET IDENTITY_INSERT ${quotedTable} ON; ${query} SET IDENTITY_INSERT ${quotedTable} OFF;`;
        }
        const result = { query };
        if (options.bindParam !== false) {
          result.bind = bind;
        }
        return result;
      }
      bulkInsertQuery(tableName, fieldValueHashes, options, fieldMappedAttributes) {
        options = options || {};
        fieldMappedAttributes = fieldMappedAttributes || {};
        const tuples = [];
        const serials = {};
        const allAttributes = [];
        let onDuplicateKeyUpdate = "";
        for (const fieldValueHash of fieldValueHashes) {
          _.forOwn(fieldValueHash, (value, key) => {
            if (!allAttributes.includes(key)) {
              allAttributes.push(key);
            }
            if (fieldMappedAttributes[key] && fieldMappedAttributes[key].autoIncrement === true) {
              serials[key] = true;
            }
          });
        }
        for (const fieldValueHash of fieldValueHashes) {
          const values = allAttributes.map((key) => {
            if (this._dialect.supports.bulkDefault && serials[key] === true) {
              return fieldValueHash[key] != null ? fieldValueHash[key] : "DEFAULT";
            }
            return this.escape(fieldValueHash[key], fieldMappedAttributes[key], { context: "INSERT" });
          });
          tuples.push(`(${values.join(",")})`);
        }
        if (this._dialect.supports.inserts.updateOnDuplicate && options.updateOnDuplicate) {
          if (this._dialect.supports.inserts.updateOnDuplicate == " ON CONFLICT DO UPDATE SET") {
            const conflictKeys = options.upsertKeys.map((attr) => this.quoteIdentifier(attr));
            const updateKeys = options.updateOnDuplicate.map((attr) => `${this.quoteIdentifier(attr)}=EXCLUDED.${this.quoteIdentifier(attr)}`);
            onDuplicateKeyUpdate = ` ON CONFLICT (${conflictKeys.join(",")}) DO UPDATE SET ${updateKeys.join(",")}`;
          } else {
            const valueKeys = options.updateOnDuplicate.map((attr) => `${this.quoteIdentifier(attr)}=VALUES(${this.quoteIdentifier(attr)})`);
            onDuplicateKeyUpdate = `${this._dialect.supports.inserts.updateOnDuplicate} ${valueKeys.join(",")}`;
          }
        }
        const ignoreDuplicates = options.ignoreDuplicates ? this._dialect.supports.inserts.ignoreDuplicates : "";
        const attributes = allAttributes.map((attr) => this.quoteIdentifier(attr)).join(",");
        const onConflictDoNothing = options.ignoreDuplicates ? this._dialect.supports.inserts.onConflictDoNothing : "";
        let returning = "";
        if (this._dialect.supports.returnValues && options.returning) {
          const returnValues = this.generateReturnValues(fieldMappedAttributes, options);
          returning += returnValues.returningFragment;
        }
        return Utils2.joinSQLFragments([
          "INSERT",
          ignoreDuplicates,
          "INTO",
          this.quoteTable(tableName),
          `(${attributes})`,
          "VALUES",
          tuples.join(","),
          onDuplicateKeyUpdate,
          onConflictDoNothing,
          returning,
          ";"
        ]);
      }
      updateQuery(tableName, attrValueHash, where2, options, attributes) {
        options = options || {};
        _.defaults(options, this.options);
        attrValueHash = Utils2.removeNullValuesFromHash(attrValueHash, options.omitNull, options);
        const values = [];
        const bind = [];
        const modelAttributeMap = {};
        let outputFragment = "";
        let tmpTable = "";
        let suffix = "";
        if (_.get(this, ["sequelize", "options", "dialectOptions", "prependSearchPath"]) || options.searchPath) {
          options.bindParam = false;
        }
        const bindParam = options.bindParam === void 0 ? this.bindParam(bind) : options.bindParam;
        if (this._dialect.supports["LIMIT ON UPDATE"] && options.limit) {
          if (this.dialect !== "mssql" && this.dialect !== "db2") {
            suffix = ` LIMIT ${this.escape(options.limit)} `;
          }
        }
        if (this._dialect.supports.returnValues && options.returning) {
          const returnValues = this.generateReturnValues(attributes, options);
          suffix += returnValues.returningFragment;
          tmpTable = returnValues.tmpTable || "";
          outputFragment = returnValues.outputFragment || "";
          if (!this._dialect.supports.returnValues.output && options.returning) {
            options.mapToModel = true;
          }
        }
        if (attributes) {
          _.each(attributes, (attribute, key) => {
            modelAttributeMap[key] = attribute;
            if (attribute.field) {
              modelAttributeMap[attribute.field] = attribute;
            }
          });
        }
        for (const key in attrValueHash) {
          if (modelAttributeMap && modelAttributeMap[key] && modelAttributeMap[key].autoIncrement === true && !this._dialect.supports.autoIncrement.update) {
            continue;
          }
          const value = attrValueHash[key];
          if (value instanceof Utils2.SequelizeMethod || options.bindParam === false) {
            values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || void 0, { context: "UPDATE" })}`);
          } else {
            values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || void 0, { context: "UPDATE" }, bindParam)}`);
          }
        }
        const whereOptions = __spreadProps(__spreadValues({}, options), { bindParam });
        if (values.length === 0) {
          return "";
        }
        const query = `${tmpTable}UPDATE ${this.quoteTable(tableName)} SET ${values.join(",")}${outputFragment} ${this.whereQuery(where2, whereOptions)}${suffix}`.trim();
        const result = { query };
        if (options.bindParam !== false) {
          result.bind = bind;
        }
        return result;
      }
      arithmeticQuery(operator, tableName, where2, incrementAmountsByField, extraAttributesToBeUpdated, options) {
        options = options || {};
        _.defaults(options, { returning: true });
        extraAttributesToBeUpdated = Utils2.removeNullValuesFromHash(extraAttributesToBeUpdated, this.options.omitNull);
        let outputFragment = "";
        let returningFragment = "";
        if (this._dialect.supports.returnValues && options.returning) {
          const returnValues = this.generateReturnValues(null, options);
          outputFragment = returnValues.outputFragment;
          returningFragment = returnValues.returningFragment;
        }
        const updateSetSqlFragments = [];
        for (const field in incrementAmountsByField) {
          const incrementAmount = incrementAmountsByField[field];
          const quotedField = this.quoteIdentifier(field);
          const escapedAmount = this.escape(incrementAmount);
          updateSetSqlFragments.push(`${quotedField}=${quotedField}${operator} ${escapedAmount}`);
        }
        for (const field in extraAttributesToBeUpdated) {
          const newValue = extraAttributesToBeUpdated[field];
          const quotedField = this.quoteIdentifier(field);
          const escapedValue = this.escape(newValue);
          updateSetSqlFragments.push(`${quotedField}=${escapedValue}`);
        }
        return Utils2.joinSQLFragments([
          "UPDATE",
          this.quoteTable(tableName),
          "SET",
          updateSetSqlFragments.join(","),
          outputFragment,
          this.whereQuery(where2),
          returningFragment
        ]);
      }
      addIndexQuery(tableName, attributes, options, rawTablename) {
        options = options || {};
        if (!Array.isArray(attributes)) {
          options = attributes;
          attributes = void 0;
        } else {
          options.fields = attributes;
        }
        options.prefix = options.prefix || rawTablename || tableName;
        if (options.prefix && typeof options.prefix === "string") {
          options.prefix = options.prefix.replace(/\./g, "_");
          options.prefix = options.prefix.replace(/("|')/g, "");
        }
        const fieldsSql = options.fields.map((field) => {
          if (field instanceof Utils2.SequelizeMethod) {
            return this.handleSequelizeMethod(field);
          }
          if (typeof field === "string") {
            field = {
              name: field
            };
          }
          let result = "";
          if (field.attribute) {
            field.name = field.attribute;
          }
          if (!field.name) {
            throw new Error(`The following index field has no name: ${util.inspect(field)}`);
          }
          result += this.quoteIdentifier(field.name);
          if (this._dialect.supports.index.collate && field.collate) {
            result += ` COLLATE ${this.quoteIdentifier(field.collate)}`;
          }
          if (this._dialect.supports.index.operator) {
            const operator = field.operator || options.operator;
            if (operator) {
              result += ` ${operator}`;
            }
          }
          if (this._dialect.supports.index.length && field.length) {
            result += `(${field.length})`;
          }
          if (field.order) {
            result += ` ${field.order}`;
          }
          return result;
        });
        if (!options.name) {
          options = Utils2.nameIndex(options, options.prefix);
        }
        options = Model3._conformIndex(options);
        if (!this._dialect.supports.index.type) {
          delete options.type;
        }
        if (options.where) {
          options.where = this.whereQuery(options.where);
        }
        if (typeof tableName === "string") {
          tableName = this.quoteIdentifiers(tableName);
        } else {
          tableName = this.quoteTable(tableName);
        }
        const concurrently = this._dialect.supports.index.concurrently && options.concurrently ? "CONCURRENTLY" : void 0;
        let ind;
        if (this._dialect.supports.indexViaAlter) {
          ind = [
            "ALTER TABLE",
            tableName,
            concurrently,
            "ADD"
          ];
        } else {
          ind = ["CREATE"];
        }
        ind = ind.concat(options.unique ? "UNIQUE" : "", options.type, "INDEX", !this._dialect.supports.indexViaAlter ? concurrently : void 0, this.quoteIdentifiers(options.name), this._dialect.supports.index.using === 1 && options.using ? `USING ${options.using}` : "", !this._dialect.supports.indexViaAlter ? `ON ${tableName}` : void 0, this._dialect.supports.index.using === 2 && options.using ? `USING ${options.using}` : "", `(${fieldsSql.join(", ")})`, this._dialect.supports.index.parser && options.parser ? `WITH PARSER ${options.parser}` : void 0, this._dialect.supports.index.where && options.where ? options.where : void 0);
        return _.compact(ind).join(" ");
      }
      addConstraintQuery(tableName, options) {
        if (typeof tableName === "string") {
          tableName = this.quoteIdentifiers(tableName);
        } else {
          tableName = this.quoteTable(tableName);
        }
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          tableName,
          "ADD",
          this.getConstraintSnippet(tableName, options || {}),
          ";"
        ]);
      }
      getConstraintSnippet(tableName, options) {
        let constraintSnippet, constraintName;
        const fieldsSql = options.fields.map((field) => {
          if (typeof field === "string") {
            return this.quoteIdentifier(field);
          }
          if (field instanceof Utils2.SequelizeMethod) {
            return this.handleSequelizeMethod(field);
          }
          if (field.attribute) {
            field.name = field.attribute;
          }
          if (!field.name) {
            throw new Error(`The following index field has no name: ${field}`);
          }
          return this.quoteIdentifier(field.name);
        });
        const fieldsSqlQuotedString = fieldsSql.join(", ");
        const fieldsSqlString = fieldsSql.join("_");
        switch (options.type.toUpperCase()) {
          case "UNIQUE":
            constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_uk`);
            constraintSnippet = `CONSTRAINT ${constraintName} UNIQUE (${fieldsSqlQuotedString})`;
            break;
          case "CHECK":
            options.where = this.whereItemsQuery(options.where);
            constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_ck`);
            constraintSnippet = `CONSTRAINT ${constraintName} CHECK (${options.where})`;
            break;
          case "DEFAULT":
            if (options.defaultValue === void 0) {
              throw new Error("Default value must be specified for DEFAULT CONSTRAINT");
            }
            if (this._dialect.name !== "mssql") {
              throw new Error("Default constraints are supported only for MSSQL dialect.");
            }
            constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_df`);
            constraintSnippet = `CONSTRAINT ${constraintName} DEFAULT (${this.escape(options.defaultValue)}) FOR ${fieldsSql[0]}`;
            break;
          case "PRIMARY KEY":
            constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_pk`);
            constraintSnippet = `CONSTRAINT ${constraintName} PRIMARY KEY (${fieldsSqlQuotedString})`;
            break;
          case "FOREIGN KEY":
            const references = options.references;
            if (!references || !references.table || !(references.field || references.fields)) {
              throw new Error("references object with table and field must be specified");
            }
            constraintName = this.quoteIdentifier(options.name || `${tableName}_${fieldsSqlString}_${references.table}_fk`);
            const quotedReferences = typeof references.field !== "undefined" ? this.quoteIdentifier(references.field) : references.fields.map((f) => this.quoteIdentifier(f)).join(", ");
            const referencesSnippet = `${this.quoteTable(references.table)} (${quotedReferences})`;
            constraintSnippet = `CONSTRAINT ${constraintName} `;
            constraintSnippet += `FOREIGN KEY (${fieldsSqlQuotedString}) REFERENCES ${referencesSnippet}`;
            if (options.onUpdate) {
              constraintSnippet += ` ON UPDATE ${options.onUpdate.toUpperCase()}`;
            }
            if (options.onDelete) {
              constraintSnippet += ` ON DELETE ${options.onDelete.toUpperCase()}`;
            }
            break;
          default:
            throw new Error(`${options.type} is invalid.`);
        }
        if (options.deferrable && ["UNIQUE", "PRIMARY KEY", "FOREIGN KEY"].includes(options.type.toUpperCase())) {
          constraintSnippet += ` ${this.deferConstraintsQuery(options)}`;
        }
        return constraintSnippet;
      }
      removeConstraintQuery(tableName, constraintName) {
        if (typeof tableName === "string") {
          tableName = this.quoteIdentifiers(tableName);
        } else {
          tableName = this.quoteTable(tableName);
        }
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          tableName,
          "DROP CONSTRAINT",
          this.quoteIdentifiers(constraintName)
        ]);
      }
      quote(collection, parent, connector) {
        const validOrderOptions = [
          "ASC",
          "DESC",
          "ASC NULLS LAST",
          "DESC NULLS LAST",
          "ASC NULLS FIRST",
          "DESC NULLS FIRST",
          "NULLS FIRST",
          "NULLS LAST"
        ];
        connector = connector || ".";
        if (typeof collection === "string") {
          return this.quoteIdentifiers(collection);
        }
        if (Array.isArray(collection)) {
          collection.forEach((item2, index) => {
            const previous = collection[index - 1];
            let previousAssociation;
            let previousModel;
            if (!previous && parent !== void 0) {
              previousModel = parent;
            } else if (previous && previous instanceof Association2) {
              previousAssociation = previous;
              previousModel = previous.target;
            }
            if (previousModel && previousModel.prototype instanceof Model3) {
              let model;
              let as;
              if (typeof item2 === "function" && item2.prototype instanceof Model3) {
                model = item2;
              } else if (_.isPlainObject(item2) && item2.model && item2.model.prototype instanceof Model3) {
                model = item2.model;
                as = item2.as;
              }
              if (model) {
                if (!as && previousAssociation && previousAssociation instanceof Association2 && previousAssociation.through && previousAssociation.through.model === model) {
                  item2 = new Association2(previousModel, model, {
                    as: model.name
                  });
                } else {
                  item2 = previousModel.getAssociationForAlias(model, as);
                  if (!item2) {
                    item2 = previousModel.getAssociationForAlias(model, model.name);
                  }
                }
                if (!(item2 instanceof Association2)) {
                  throw new Error(util.format("Unable to find a valid association for model, '%s'", model.name));
                }
              }
            }
            if (typeof item2 === "string") {
              const orderIndex = validOrderOptions.indexOf(item2.toUpperCase());
              if (index > 0 && orderIndex !== -1) {
                item2 = this.sequelize.literal(` ${validOrderOptions[orderIndex]}`);
              } else if (previousModel && previousModel.prototype instanceof Model3) {
                if (previousModel.associations !== void 0 && previousModel.associations[item2]) {
                  item2 = previousModel.associations[item2];
                } else if (previousModel.rawAttributes !== void 0 && previousModel.rawAttributes[item2] && item2 !== previousModel.rawAttributes[item2].field) {
                  item2 = previousModel.rawAttributes[item2].field;
                } else if (item2.includes(".") && previousModel.rawAttributes !== void 0) {
                  const itemSplit = item2.split(".");
                  if (previousModel.rawAttributes[itemSplit[0]].type instanceof DataTypes2.JSON) {
                    const identifier2 = this.quoteIdentifiers(`${previousModel.name}.${previousModel.rawAttributes[itemSplit[0]].field}`);
                    const path = itemSplit.slice(1);
                    item2 = this.jsonPathExtractionQuery(identifier2, path);
                    item2 = this.sequelize.literal(item2);
                  }
                }
              }
            }
            collection[index] = item2;
          }, this);
          const collectionLength = collection.length;
          const tableNames = [];
          let item;
          let i = 0;
          for (i = 0; i < collectionLength - 1; i++) {
            item = collection[i];
            if (typeof item === "string" || item._modelAttribute || item instanceof Utils2.SequelizeMethod) {
              break;
            } else if (item instanceof Association2) {
              tableNames[i] = item.as;
            }
          }
          let sql = "";
          if (i > 0) {
            sql += `${this.quoteIdentifier(tableNames.join(connector))}.`;
          } else if (typeof collection[0] === "string" && parent) {
            sql += `${this.quoteIdentifier(parent.name)}.`;
          }
          collection.slice(i).forEach((collectionItem) => {
            sql += this.quote(collectionItem, parent, connector);
          }, this);
          return sql;
        }
        if (collection._modelAttribute) {
          return `${this.quoteTable(collection.Model.name)}.${this.quoteIdentifier(collection.fieldName)}`;
        }
        if (collection instanceof Utils2.SequelizeMethod) {
          return this.handleSequelizeMethod(collection);
        }
        if (_.isPlainObject(collection) && collection.raw) {
          throw new Error('The `{raw: "..."}` syntax is no longer supported.  Use `sequelize.literal` instead.');
        }
        throw new Error(`Unknown structure passed to order / group: ${util.inspect(collection)}`);
      }
      _initQuoteIdentifier() {
        this._quoteIdentifier = this.quoteIdentifier;
        this.quoteIdentifier = function(identifier2, force) {
          if (identifier2 === "*")
            return identifier2;
          return this._quoteIdentifier(identifier2, force);
        };
      }
      quoteIdentifier(identifier2, force) {
        throw new Error(`quoteIdentifier for Dialect "${this.dialect}" is not implemented`);
      }
      quoteIdentifiers(identifiers) {
        if (identifiers.includes(".")) {
          identifiers = identifiers.split(".");
          const head = identifiers.slice(0, identifiers.length - 1).join("->");
          const tail = identifiers[identifiers.length - 1];
          return `${this.quoteIdentifier(head)}.${this.quoteIdentifier(tail)}`;
        }
        return this.quoteIdentifier(identifiers);
      }
      quoteAttribute(attribute, model) {
        if (model && attribute in model.rawAttributes) {
          return this.quoteIdentifier(attribute);
        }
        return this.quoteIdentifiers(attribute);
      }
      quoteTable(param, alias) {
        let table = "";
        if (alias === true) {
          alias = param.as || param.name || param;
        }
        if (_.isObject(param)) {
          if (this._dialect.supports.schemas) {
            if (param.schema) {
              table += `${this.quoteIdentifier(param.schema)}.`;
            }
            table += this.quoteIdentifier(param.tableName);
          } else {
            if (param.schema) {
              table += param.schema + (param.delimiter || ".");
            }
            table += param.tableName;
            table = this.quoteIdentifier(table);
          }
        } else {
          table = this.quoteIdentifier(param);
        }
        if (alias) {
          table += ` AS ${this.quoteIdentifier(alias)}`;
        }
        return table;
      }
      escape(value, field, options) {
        options = options || {};
        if (value !== null && value !== void 0) {
          if (value instanceof Utils2.SequelizeMethod) {
            return this.handleSequelizeMethod(value);
          }
          if (field && field.type) {
            this.validate(value, field, options);
            if (field.type.stringify) {
              const simpleEscape = (escVal) => SqlString.escape(escVal, this.options.timezone, this.dialect);
              value = field.type.stringify(value, { escape: simpleEscape, field, timezone: this.options.timezone, operation: options.operation });
              if (field.type.escape === false) {
                return value;
              }
            }
          }
        }
        return SqlString.escape(value, this.options.timezone, this.dialect);
      }
      bindParam(bind) {
        return (value) => {
          bind.push(value);
          return `$${bind.length}`;
        };
      }
      format(value, field, options, bindParam) {
        options = options || {};
        if (value !== null && value !== void 0) {
          if (value instanceof Utils2.SequelizeMethod) {
            throw new Error("Cannot pass SequelizeMethod as a bind parameter - use escape instead");
          }
          if (field && field.type) {
            this.validate(value, field, options);
            if (field.type.bindParam) {
              return field.type.bindParam(value, { escape: _.identity, field, timezone: this.options.timezone, operation: options.operation, bindParam });
            }
          }
        }
        return bindParam(value);
      }
      validate(value, field, options) {
        if (this.typeValidation && field.type.validate && value) {
          try {
            if (options.isList && Array.isArray(value)) {
              for (const item of value) {
                field.type.validate(item, options);
              }
            } else {
              field.type.validate(value, options);
            }
          } catch (error) {
            if (error instanceof sequelizeError.ValidationError) {
              error.errors.push(new sequelizeError.ValidationErrorItem(error.message, "Validation error", field.fieldName, value, null, `${field.type.key} validator`));
            }
            throw error;
          }
        }
      }
      isIdentifierQuoted(identifier2) {
        return /^\s*(?:([`"'])(?:(?!\1).|\1{2})*\1\.?)+\s*$/i.test(identifier2);
      }
      jsonPathExtractionQuery(column, path, isJson) {
        let paths = _.toPath(path);
        let pathStr;
        const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);
        switch (this.dialect) {
          case "mysql":
          case "mariadb":
          case "sqlite":
            if (this.dialect === "mysql") {
              paths = paths.map((subPath) => {
                return /\D/.test(subPath) ? Utils2.addTicks(subPath, '"') : subPath;
              });
            }
            pathStr = this.escape(["$"].concat(paths).join(".").replace(/\.(\d+)(?:(?=\.)|$)/g, (__, digit) => `[${digit}]`));
            if (this.dialect === "sqlite") {
              return `json_extract(${quotedColumn},${pathStr})`;
            }
            return `json_unquote(json_extract(${quotedColumn},${pathStr}))`;
          case "postgres":
            const join = isJson ? "#>" : "#>>";
            pathStr = this.escape(`{${paths.join(",")}}`);
            return `(${quotedColumn}${join}${pathStr})`;
          default:
            throw new Error(`Unsupported ${this.dialect} for JSON operations`);
        }
      }
      selectQuery(tableName, options, model) {
        options = options || {};
        const limit = options.limit;
        const mainQueryItems = [];
        const subQueryItems = [];
        const subQuery = options.subQuery === void 0 ? limit && options.hasMultiAssociation : options.subQuery;
        const attributes = {
          main: options.attributes && options.attributes.slice(),
          subQuery: null
        };
        const mainTable = {
          name: tableName,
          quotedName: null,
          as: null,
          model
        };
        const topLevelInfo = {
          names: mainTable,
          options,
          subQuery
        };
        let mainJoinQueries = [];
        let subJoinQueries = [];
        let query;
        if (this.options.minifyAliases && !options.aliasesMapping) {
          options.aliasesMapping = /* @__PURE__ */ new Map();
          options.aliasesByTable = {};
          options.includeAliases = /* @__PURE__ */ new Map();
        }
        if (options.tableAs) {
          mainTable.as = this.quoteIdentifier(options.tableAs);
        } else if (!Array.isArray(mainTable.name) && mainTable.model) {
          mainTable.as = this.quoteIdentifier(mainTable.model.name);
        }
        mainTable.quotedName = !Array.isArray(mainTable.name) ? this.quoteTable(mainTable.name) : tableName.map((t) => {
          return Array.isArray(t) ? this.quoteTable(t[0], t[1]) : this.quoteTable(t, true);
        }).join(", ");
        if (subQuery && attributes.main) {
          for (const keyAtt of mainTable.model.primaryKeyAttributes) {
            if (!attributes.main.some((attr) => keyAtt === attr || keyAtt === attr[0] || keyAtt === attr[1])) {
              attributes.main.push(mainTable.model.rawAttributes[keyAtt].field ? [keyAtt, mainTable.model.rawAttributes[keyAtt].field] : keyAtt);
            }
          }
        }
        attributes.main = this.escapeAttributes(attributes.main, options, mainTable.as);
        attributes.main = attributes.main || (options.include ? [`${mainTable.as}.*`] : ["*"]);
        if (subQuery || options.groupedLimit) {
          attributes.subQuery = attributes.main;
          attributes.main = [`${mainTable.as || mainTable.quotedName}.*`];
        }
        if (options.include) {
          for (const include of options.include) {
            if (include.separate) {
              continue;
            }
            const joinQueries = this.generateInclude(include, { externalAs: mainTable.as, internalAs: mainTable.as }, topLevelInfo);
            subJoinQueries = subJoinQueries.concat(joinQueries.subQuery);
            mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);
            if (joinQueries.attributes.main.length > 0) {
              attributes.main = _.uniq(attributes.main.concat(joinQueries.attributes.main));
            }
            if (joinQueries.attributes.subQuery.length > 0) {
              attributes.subQuery = _.uniq(attributes.subQuery.concat(joinQueries.attributes.subQuery));
            }
          }
        }
        if (subQuery) {
          subQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.subQuery, mainTable.quotedName, mainTable.as));
          subQueryItems.push(subJoinQueries.join(""));
        } else {
          if (options.groupedLimit) {
            if (!mainTable.as) {
              mainTable.as = mainTable.quotedName;
            }
            const where2 = __spreadValues({}, options.where);
            let groupedLimitOrder, whereKey, include, groupedTableName = mainTable.as;
            if (typeof options.groupedLimit.on === "string") {
              whereKey = options.groupedLimit.on;
            } else if (options.groupedLimit.on instanceof HasMany2) {
              whereKey = options.groupedLimit.on.foreignKeyField;
            }
            if (options.groupedLimit.on instanceof BelongsToMany2) {
              groupedTableName = options.groupedLimit.on.manyFromSource.as;
              const groupedLimitOptions = Model3._validateIncludedElements({
                include: [{
                  association: options.groupedLimit.on.manyFromSource,
                  duplicating: false,
                  required: true,
                  where: __spreadValues({
                    [Op2.placeholder]: true
                  }, options.groupedLimit.through && options.groupedLimit.through.where)
                }],
                model
              });
              options.hasJoin = true;
              options.hasMultiAssociation = true;
              options.includeMap = Object.assign(groupedLimitOptions.includeMap, options.includeMap);
              options.includeNames = groupedLimitOptions.includeNames.concat(options.includeNames || []);
              include = groupedLimitOptions.include;
              if (Array.isArray(options.order)) {
                options.order.forEach((order, i) => {
                  if (Array.isArray(order)) {
                    order = order[0];
                  }
                  let alias = `subquery_order_${i}`;
                  options.attributes.push([order, alias]);
                  alias = this.sequelize.literal(this.quote(alias));
                  if (Array.isArray(options.order[i])) {
                    options.order[i][0] = alias;
                  } else {
                    options.order[i] = alias;
                  }
                });
                groupedLimitOrder = options.order;
              }
            } else {
              groupedLimitOrder = options.order;
              delete options.order;
              where2[Op2.placeholder] = true;
            }
            const baseQuery = `SELECT * FROM (${this.selectQuery(tableName, {
              attributes: options.attributes,
              offset: options.offset,
              limit: options.groupedLimit.limit,
              order: groupedLimitOrder,
              aliasesMapping: options.aliasesMapping,
              aliasesByTable: options.aliasesByTable,
              where: where2,
              include,
              model
            }, model).replace(/;$/, "")}) AS sub`;
            const placeHolder = this.whereItemQuery(Op2.placeholder, true, { model });
            const splicePos = baseQuery.indexOf(placeHolder);
            mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, `(${options.groupedLimit.values.map((value) => {
              let groupWhere;
              if (whereKey) {
                groupWhere = {
                  [whereKey]: value
                };
              }
              if (include) {
                groupWhere = {
                  [options.groupedLimit.on.foreignIdentifierField]: value
                };
              }
              return Utils2.spliceStr(baseQuery, splicePos, placeHolder.length, this.getWhereConditions(groupWhere, groupedTableName));
            }).join(this._dialect.supports["UNION ALL"] ? " UNION ALL " : " UNION ")})`, mainTable.as));
          } else {
            mainQueryItems.push(this.selectFromTableFragment(options, mainTable.model, attributes.main, mainTable.quotedName, mainTable.as));
          }
          mainQueryItems.push(mainJoinQueries.join(""));
        }
        if (Object.prototype.hasOwnProperty.call(options, "where") && !options.groupedLimit) {
          options.where = this.getWhereConditions(options.where, mainTable.as || tableName, model, options);
          if (options.where) {
            if (subQuery) {
              subQueryItems.push(` WHERE ${options.where}`);
            } else {
              mainQueryItems.push(` WHERE ${options.where}`);
              mainQueryItems.forEach((value, key) => {
                if (value.startsWith("SELECT")) {
                  mainQueryItems[key] = this.selectFromTableFragment(options, model, attributes.main, mainTable.quotedName, mainTable.as, options.where);
                }
              });
            }
          }
        }
        if (options.group) {
          options.group = Array.isArray(options.group) ? options.group.map((t) => this.aliasGrouping(t, model, mainTable.as, options)).join(", ") : this.aliasGrouping(options.group, model, mainTable.as, options);
          if (subQuery && options.group) {
            subQueryItems.push(` GROUP BY ${options.group}`);
          } else if (options.group) {
            mainQueryItems.push(` GROUP BY ${options.group}`);
          }
        }
        if (Object.prototype.hasOwnProperty.call(options, "having")) {
          options.having = this.getWhereConditions(options.having, tableName, model, options, false);
          if (options.having) {
            if (subQuery) {
              subQueryItems.push(` HAVING ${options.having}`);
            } else {
              mainQueryItems.push(` HAVING ${options.having}`);
            }
          }
        }
        if (options.order) {
          const orders = this.getQueryOrders(options, model, subQuery);
          if (orders.mainQueryOrder.length) {
            mainQueryItems.push(` ORDER BY ${orders.mainQueryOrder.join(", ")}`);
          }
          if (orders.subQueryOrder.length) {
            subQueryItems.push(` ORDER BY ${orders.subQueryOrder.join(", ")}`);
          }
        }
        const limitOrder = this.addLimitAndOffset(options, mainTable.model);
        if (limitOrder && !options.groupedLimit) {
          if (subQuery) {
            subQueryItems.push(limitOrder);
          } else {
            mainQueryItems.push(limitOrder);
          }
        }
        if (subQuery) {
          this._throwOnEmptyAttributes(attributes.main, { modelName: model && model.name, as: mainTable.as });
          query = `SELECT ${attributes.main.join(", ")} FROM (${subQueryItems.join("")}) AS ${mainTable.as}${mainJoinQueries.join("")}${mainQueryItems.join("")}`;
        } else {
          query = mainQueryItems.join("");
        }
        if (options.lock && this._dialect.supports.lock) {
          let lock = options.lock;
          if (typeof options.lock === "object") {
            lock = options.lock.level;
          }
          if (this._dialect.supports.lockKey && ["KEY SHARE", "NO KEY UPDATE"].includes(lock)) {
            query += ` FOR ${lock}`;
          } else if (lock === "SHARE") {
            query += ` ${this._dialect.supports.forShare}`;
          } else {
            query += " FOR UPDATE";
          }
          if (this._dialect.supports.lockOf && options.lock.of && options.lock.of.prototype instanceof Model3) {
            query += ` OF ${this.quoteTable(options.lock.of.name)}`;
          }
          if (this._dialect.supports.skipLocked && options.skipLocked) {
            query += " SKIP LOCKED";
          }
        }
        return `${query};`;
      }
      aliasGrouping(field, model, tableName, options) {
        const src = Array.isArray(field) ? field[0] : field;
        return this.quote(this._getAliasForField(tableName, src, options) || src, model);
      }
      escapeAttributes(attributes, options, mainTableAs) {
        return attributes && attributes.map((attr) => {
          let addTable = true;
          if (attr instanceof Utils2.SequelizeMethod) {
            return this.handleSequelizeMethod(attr);
          }
          if (Array.isArray(attr)) {
            if (attr.length !== 2) {
              throw new Error(`${JSON.stringify(attr)} is not a valid attribute definition. Please use the following format: ['attribute definition', 'alias']`);
            }
            attr = attr.slice();
            if (attr[0] instanceof Utils2.SequelizeMethod) {
              attr[0] = this.handleSequelizeMethod(attr[0]);
              addTable = false;
            } else if (!attr[0].includes("(") && !attr[0].includes(")")) {
              attr[0] = this.quoteIdentifier(attr[0]);
            } else {
              deprecations.noRawAttributes();
            }
            let alias = attr[1];
            if (this.options.minifyAliases) {
              alias = this._getMinifiedAlias(alias, mainTableAs, options);
            }
            attr = [attr[0], this.quoteIdentifier(alias)].join(" AS ");
          } else {
            attr = !attr.includes(Utils2.TICK_CHAR) && !attr.includes('"') ? this.quoteAttribute(attr, options.model) : this.escape(attr);
          }
          if (!_.isEmpty(options.include) && (!attr.includes(".") || options.dotNotation) && addTable) {
            attr = `${mainTableAs}.${attr}`;
          }
          return attr;
        });
      }
      generateInclude(include, parentTableName, topLevelInfo) {
        const joinQueries = {
          mainQuery: [],
          subQuery: []
        };
        const mainChildIncludes = [];
        const subChildIncludes = [];
        let requiredMismatch = false;
        const includeAs = {
          internalAs: include.as,
          externalAs: include.as
        };
        const attributes = {
          main: [],
          subQuery: []
        };
        let joinQuery;
        topLevelInfo.options.keysEscaped = true;
        if (topLevelInfo.names.name !== parentTableName.externalAs && topLevelInfo.names.as !== parentTableName.externalAs) {
          includeAs.internalAs = `${parentTableName.internalAs}->${include.as}`;
          includeAs.externalAs = `${parentTableName.externalAs}.${include.as}`;
        }
        if (topLevelInfo.options.includeIgnoreAttributes !== false) {
          include.model._expandAttributes(include);
          Utils2.mapFinderOptions(include, include.model);
          const includeAttributes = include.attributes.map((attr) => {
            let attrAs = attr;
            let verbatim = false;
            if (Array.isArray(attr) && attr.length === 2) {
              if (attr[0] instanceof Utils2.SequelizeMethod && (attr[0] instanceof Utils2.Literal || attr[0] instanceof Utils2.Cast || attr[0] instanceof Utils2.Fn)) {
                verbatim = true;
              }
              attr = attr.map((attr2) => attr2 instanceof Utils2.SequelizeMethod ? this.handleSequelizeMethod(attr2) : attr2);
              attrAs = attr[1];
              attr = attr[0];
            }
            if (attr instanceof Utils2.Literal) {
              return attr.val;
            }
            if (attr instanceof Utils2.Cast || attr instanceof Utils2.Fn) {
              throw new Error("Tried to select attributes using Sequelize.cast or Sequelize.fn without specifying an alias for the result, during eager loading. This means the attribute will not be added to the returned instance");
            }
            let prefix;
            if (verbatim === true) {
              prefix = attr;
            } else if (/#>>|->>/.test(attr)) {
              prefix = `(${this.quoteIdentifier(includeAs.internalAs)}.${attr.replace(/\(|\)/g, "")})`;
            } else if (/json_extract\(/.test(attr)) {
              prefix = attr.replace(/json_extract\(/i, `json_extract(${this.quoteIdentifier(includeAs.internalAs)}.`);
            } else {
              prefix = `${this.quoteIdentifier(includeAs.internalAs)}.${this.quoteIdentifier(attr)}`;
            }
            let alias = `${includeAs.externalAs}.${attrAs}`;
            if (this.options.minifyAliases) {
              alias = this._getMinifiedAlias(alias, includeAs.internalAs, topLevelInfo.options);
            }
            return Utils2.joinSQLFragments([
              prefix,
              "AS",
              this.quoteIdentifier(alias, true)
            ]);
          });
          if (include.subQuery && topLevelInfo.subQuery) {
            for (const attr of includeAttributes) {
              attributes.subQuery.push(attr);
            }
          } else {
            for (const attr of includeAttributes) {
              attributes.main.push(attr);
            }
          }
        }
        if (include.through) {
          joinQuery = this.generateThroughJoin(include, includeAs, parentTableName.internalAs, topLevelInfo);
        } else {
          this._generateSubQueryFilter(include, includeAs, topLevelInfo);
          joinQuery = this.generateJoin(include, topLevelInfo);
        }
        if (joinQuery.attributes.main.length > 0) {
          attributes.main = attributes.main.concat(joinQuery.attributes.main);
        }
        if (joinQuery.attributes.subQuery.length > 0) {
          attributes.subQuery = attributes.subQuery.concat(joinQuery.attributes.subQuery);
        }
        if (include.include) {
          for (const childInclude of include.include) {
            if (childInclude.separate || childInclude._pseudo) {
              continue;
            }
            const childJoinQueries = this.generateInclude(childInclude, includeAs, topLevelInfo);
            if (include.required === false && childInclude.required === true) {
              requiredMismatch = true;
            }
            if (childInclude.subQuery && topLevelInfo.subQuery) {
              subChildIncludes.push(childJoinQueries.subQuery);
            }
            if (childJoinQueries.mainQuery) {
              mainChildIncludes.push(childJoinQueries.mainQuery);
            }
            if (childJoinQueries.attributes.main.length > 0) {
              attributes.main = attributes.main.concat(childJoinQueries.attributes.main);
            }
            if (childJoinQueries.attributes.subQuery.length > 0) {
              attributes.subQuery = attributes.subQuery.concat(childJoinQueries.attributes.subQuery);
            }
          }
        }
        if (include.subQuery && topLevelInfo.subQuery) {
          if (requiredMismatch && subChildIncludes.length > 0) {
            joinQueries.subQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${subChildIncludes.join("")} ) ON ${joinQuery.condition}`);
          } else {
            joinQueries.subQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);
            if (subChildIncludes.length > 0) {
              joinQueries.subQuery.push(subChildIncludes.join(""));
            }
          }
          joinQueries.mainQuery.push(mainChildIncludes.join(""));
        } else {
          if (requiredMismatch && mainChildIncludes.length > 0) {
            joinQueries.mainQuery.push(` ${joinQuery.join} ( ${joinQuery.body}${mainChildIncludes.join("")} ) ON ${joinQuery.condition}`);
          } else {
            joinQueries.mainQuery.push(` ${joinQuery.join} ${joinQuery.body} ON ${joinQuery.condition}`);
            if (mainChildIncludes.length > 0) {
              joinQueries.mainQuery.push(mainChildIncludes.join(""));
            }
          }
          joinQueries.subQuery.push(subChildIncludes.join(""));
        }
        return {
          mainQuery: joinQueries.mainQuery.join(""),
          subQuery: joinQueries.subQuery.join(""),
          attributes
        };
      }
      _getMinifiedAlias(alias, tableName, options) {
        if (options.aliasesByTable[`${tableName}${alias}`]) {
          return options.aliasesByTable[`${tableName}${alias}`];
        }
        if (alias.match(/subquery_order_[0-9]/)) {
          return alias;
        }
        const minifiedAlias = `_${options.aliasesMapping.size}`;
        options.aliasesMapping.set(minifiedAlias, alias);
        options.aliasesByTable[`${tableName}${alias}`] = minifiedAlias;
        return minifiedAlias;
      }
      _getAliasForField(tableName, field, options) {
        if (this.options.minifyAliases) {
          if (options.aliasesByTable[`${tableName}${field}`]) {
            return options.aliasesByTable[`${tableName}${field}`];
          }
        }
        return null;
      }
      generateJoin(include, topLevelInfo) {
        const association = include.association;
        const parent = include.parent;
        const parentIsTop = !!parent && !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;
        let $parent;
        let joinWhere;
        const left = association.source;
        const attrLeft = association instanceof BelongsTo2 ? association.identifier : association.sourceKeyAttribute || left.primaryKeyAttribute;
        const fieldLeft = association instanceof BelongsTo2 ? association.identifierField : left.rawAttributes[association.sourceKeyAttribute || left.primaryKeyAttribute].field;
        let asLeft;
        const right = include.model;
        const tableRight = right.getTableName();
        const fieldRight = association instanceof BelongsTo2 ? right.rawAttributes[association.targetIdentifier || right.primaryKeyAttribute].field : association.identifierField;
        let asRight = include.as;
        while (($parent = $parent && $parent.parent || include.parent) && $parent.association) {
          if (asLeft) {
            asLeft = `${$parent.as}->${asLeft}`;
          } else {
            asLeft = $parent.as;
          }
        }
        if (!asLeft)
          asLeft = parent.as || parent.model.name;
        else
          asRight = `${asLeft}->${asRight}`;
        let joinOn = `${this.quoteTable(asLeft)}.${this.quoteIdentifier(fieldLeft)}`;
        const subqueryAttributes = [];
        if (topLevelInfo.options.groupedLimit && parentIsTop || topLevelInfo.subQuery && include.parent.subQuery && !include.subQuery) {
          if (parentIsTop) {
            const tableName = this.quoteTable(parent.as || parent.model.name);
            joinOn = this._getAliasForField(tableName, attrLeft, topLevelInfo.options) || `${tableName}.${this.quoteIdentifier(attrLeft)}`;
            if (topLevelInfo.subQuery) {
              const dbIdentifier = `${tableName}.${this.quoteIdentifier(fieldLeft)}`;
              subqueryAttributes.push(dbIdentifier !== joinOn ? `${dbIdentifier} AS ${this.quoteIdentifier(attrLeft)}` : dbIdentifier);
            }
          } else {
            const joinSource = `${asLeft.replace(/->/g, ".")}.${attrLeft}`;
            joinOn = this._getAliasForField(asLeft, joinSource, topLevelInfo.options) || this.quoteIdentifier(joinSource);
          }
        }
        joinOn += ` = ${this.quoteIdentifier(asRight)}.${this.quoteIdentifier(fieldRight)}`;
        if (include.on) {
          joinOn = this.whereItemsQuery(include.on, {
            prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),
            model: include.model
          });
        }
        if (include.where) {
          joinWhere = this.whereItemsQuery(include.where, {
            prefix: this.sequelize.literal(this.quoteIdentifier(asRight)),
            model: include.model
          });
          if (joinWhere) {
            if (include.or) {
              joinOn += ` OR ${joinWhere}`;
            } else {
              joinOn += ` AND ${joinWhere}`;
            }
          }
        }
        if (this.options.minifyAliases && asRight.length > 63) {
          const alias = `%${topLevelInfo.options.includeAliases.size}`;
          topLevelInfo.options.includeAliases.set(alias, asRight);
        }
        return {
          join: include.required ? "INNER JOIN" : include.right && this._dialect.supports["RIGHT JOIN"] ? "RIGHT OUTER JOIN" : "LEFT OUTER JOIN",
          body: this.quoteTable(tableRight, asRight),
          condition: joinOn,
          attributes: {
            main: [],
            subQuery: subqueryAttributes
          }
        };
      }
      generateReturnValues(modelAttributes, options) {
        const returnFields = [];
        const returnTypes = [];
        let outputFragment = "";
        let returningFragment = "";
        let tmpTable = "";
        if (Array.isArray(options.returning)) {
          returnFields.push(...options.returning.map((field) => this.quoteIdentifier(field)));
        } else if (modelAttributes) {
          _.each(modelAttributes, (attribute) => {
            if (!(attribute.type instanceof DataTypes2.VIRTUAL)) {
              returnFields.push(this.quoteIdentifier(attribute.field));
              returnTypes.push(attribute.type);
            }
          });
        }
        if (_.isEmpty(returnFields)) {
          returnFields.push("*");
        }
        if (this._dialect.supports.returnValues.returning) {
          returningFragment = ` RETURNING ${returnFields.join(",")}`;
        } else if (this._dialect.supports.returnValues.output) {
          outputFragment = ` OUTPUT ${returnFields.map((field) => `INSERTED.${field}`).join(",")}`;
          if (options.hasTrigger && this._dialect.supports.tmpTableTrigger) {
            const tmpColumns = returnFields.map((field, i) => `${field} ${returnTypes[i].toSql()}`);
            tmpTable = `DECLARE @tmp TABLE (${tmpColumns.join(",")}); `;
            outputFragment += " INTO @tmp";
            returningFragment = "; SELECT * FROM @tmp";
          }
        }
        return { outputFragment, returnFields, returningFragment, tmpTable };
      }
      generateThroughJoin(include, includeAs, parentTableName, topLevelInfo) {
        const through = include.through;
        const throughTable = through.model.getTableName();
        const throughAs = `${includeAs.internalAs}->${through.as}`;
        const externalThroughAs = `${includeAs.externalAs}.${through.as}`;
        const throughAttributes = through.attributes.map((attr) => {
          let alias = `${externalThroughAs}.${Array.isArray(attr) ? attr[1] : attr}`;
          if (this.options.minifyAliases) {
            alias = this._getMinifiedAlias(alias, throughAs, topLevelInfo.options);
          }
          return Utils2.joinSQLFragments([
            `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(Array.isArray(attr) ? attr[0] : attr)}`,
            "AS",
            this.quoteIdentifier(alias)
          ]);
        });
        const association = include.association;
        const parentIsTop = !include.parent.association && include.parent.model.name === topLevelInfo.options.model.name;
        const tableSource = parentTableName;
        const identSource = association.identifierField;
        const tableTarget = includeAs.internalAs;
        const identTarget = association.foreignIdentifierField;
        const attrTarget = association.targetKeyField;
        const joinType = include.required ? "INNER JOIN" : include.right && this._dialect.supports["RIGHT JOIN"] ? "RIGHT OUTER JOIN" : "LEFT OUTER JOIN";
        let joinBody;
        let joinCondition;
        const attributes = {
          main: [],
          subQuery: []
        };
        let attrSource = association.sourceKey;
        let sourceJoinOn;
        let targetJoinOn;
        let throughWhere;
        let targetWhere;
        if (topLevelInfo.options.includeIgnoreAttributes !== false) {
          for (const attr of throughAttributes) {
            attributes.main.push(attr);
          }
        }
        if (!topLevelInfo.subQuery) {
          attrSource = association.sourceKeyField;
        }
        if (topLevelInfo.subQuery && !include.subQuery && !include.parent.subQuery && include.parent.model !== topLevelInfo.options.mainModel) {
          attrSource = association.sourceKeyField;
        }
        if (topLevelInfo.subQuery && !include.subQuery && include.parent.subQuery && !parentIsTop) {
          const joinSource = this._getAliasForField(tableSource, `${tableSource}.${attrSource}`, topLevelInfo.options) || `${tableSource}.${attrSource}`;
          sourceJoinOn = `${this.quoteIdentifier(joinSource)} = `;
        } else {
          const aliasedSource = this._getAliasForField(tableSource, attrSource, topLevelInfo.options) || attrSource;
          sourceJoinOn = `${this.quoteTable(tableSource)}.${this.quoteIdentifier(aliasedSource)} = `;
        }
        sourceJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identSource)}`;
        targetJoinOn = `${this.quoteIdentifier(tableTarget)}.${this.quoteIdentifier(attrTarget)} = `;
        targetJoinOn += `${this.quoteIdentifier(throughAs)}.${this.quoteIdentifier(identTarget)}`;
        if (through.where) {
          throughWhere = this.getWhereConditions(through.where, this.sequelize.literal(this.quoteIdentifier(throughAs)), through.model);
        }
        joinBody = `( ${this.quoteTable(throughTable, throughAs)} INNER JOIN ${this.quoteTable(include.model.getTableName(), includeAs.internalAs)} ON ${targetJoinOn}`;
        if (throughWhere) {
          joinBody += ` AND ${throughWhere}`;
        }
        joinBody += ")";
        joinCondition = sourceJoinOn;
        if (include.where || include.through.where) {
          if (include.where) {
            targetWhere = this.getWhereConditions(include.where, this.sequelize.literal(this.quoteIdentifier(includeAs.internalAs)), include.model, topLevelInfo.options);
            if (targetWhere) {
              joinCondition += ` AND ${targetWhere}`;
            }
          }
        }
        this._generateSubQueryFilter(include, includeAs, topLevelInfo);
        return {
          join: joinType,
          body: joinBody,
          condition: joinCondition,
          attributes
        };
      }
      _generateSubQueryFilter(include, includeAs, topLevelInfo) {
        if (!topLevelInfo.subQuery || !include.subQueryFilter) {
          return;
        }
        if (!topLevelInfo.options.where) {
          topLevelInfo.options.where = {};
        }
        let parent = include;
        let child = include;
        let nestedIncludes = this._getRequiredClosure(include).include;
        let query;
        while (parent = parent.parent) {
          if (parent.parent && !parent.required) {
            return;
          }
          if (parent.subQueryFilter) {
            return;
          }
          nestedIncludes = [__spreadProps(__spreadValues({}, child), { include: nestedIncludes, attributes: [] })];
          child = parent;
        }
        const topInclude = nestedIncludes[0];
        const topParent = topInclude.parent;
        const topAssociation = topInclude.association;
        topInclude.association = void 0;
        if (topInclude.through && Object(topInclude.through.model) === topInclude.through.model) {
          query = this.selectQuery(topInclude.through.model.getTableName(), {
            attributes: [topInclude.through.model.primaryKeyField],
            include: Model3._validateIncludedElements({
              model: topInclude.through.model,
              include: [{
                association: topAssociation.toTarget,
                required: true,
                where: topInclude.where,
                include: topInclude.include
              }]
            }).include,
            model: topInclude.through.model,
            where: {
              [Op2.and]: [
                this.sequelize.literal([
                  `${this.quoteTable(topParent.model.name)}.${this.quoteIdentifier(topParent.model.primaryKeyField)}`,
                  `${this.quoteIdentifier(topInclude.through.model.name)}.${this.quoteIdentifier(topAssociation.identifierField)}`
                ].join(" = ")),
                topInclude.through.where
              ]
            },
            limit: 1,
            includeIgnoreAttributes: false
          }, topInclude.through.model);
        } else {
          const isBelongsTo = topAssociation.associationType === "BelongsTo";
          const sourceField = isBelongsTo ? topAssociation.identifierField : topAssociation.sourceKeyField || topParent.model.primaryKeyField;
          const targetField = isBelongsTo ? topAssociation.sourceKeyField || topInclude.model.primaryKeyField : topAssociation.identifierField;
          const join = [
            `${this.quoteIdentifier(topInclude.as)}.${this.quoteIdentifier(targetField)}`,
            `${this.quoteTable(topParent.as || topParent.model.name)}.${this.quoteIdentifier(sourceField)}`
          ].join(" = ");
          query = this.selectQuery(topInclude.model.getTableName(), {
            attributes: [targetField],
            include: Model3._validateIncludedElements(topInclude).include,
            model: topInclude.model,
            where: {
              [Op2.and]: [
                topInclude.where,
                { [Op2.join]: this.sequelize.literal(join) }
              ]
            },
            limit: 1,
            tableAs: topInclude.as,
            includeIgnoreAttributes: false
          }, topInclude.model);
        }
        if (!topLevelInfo.options.where[Op2.and]) {
          topLevelInfo.options.where[Op2.and] = [];
        }
        topLevelInfo.options.where[`__${includeAs.internalAs}`] = this.sequelize.literal([
          "(",
          query.replace(/;$/, ""),
          ")",
          "IS NOT NULL"
        ].join(" "));
      }
      _getRequiredClosure(include) {
        const copy = __spreadProps(__spreadValues({}, include), { attributes: [], include: [] });
        if (Array.isArray(include.include)) {
          copy.include = include.include.filter((i) => i.required).map((inc) => this._getRequiredClosure(inc));
        }
        return copy;
      }
      getQueryOrders(options, model, subQuery) {
        const mainQueryOrder = [];
        const subQueryOrder = [];
        if (Array.isArray(options.order)) {
          for (let order of options.order) {
            if (!Array.isArray(order)) {
              order = [order];
            }
            if (subQuery && Array.isArray(order) && order[0] && !(order[0] instanceof Association2) && !(typeof order[0] === "function" && order[0].prototype instanceof Model3) && !(typeof order[0].model === "function" && order[0].model.prototype instanceof Model3) && !(typeof order[0] === "string" && model && model.associations !== void 0 && model.associations[order[0]])) {
              subQueryOrder.push(this.quote(order, model, "->"));
            }
            if (subQuery) {
              const subQueryAttribute = options.attributes.find((a) => Array.isArray(a) && a[0] === order[0] && a[1]);
              if (subQueryAttribute) {
                const modelName = this.quoteIdentifier(model.name);
                order[0] = new Utils2.Col(this._getAliasForField(modelName, subQueryAttribute[1], options) || subQueryAttribute[1]);
              }
            }
            mainQueryOrder.push(this.quote(order, model, "->"));
          }
        } else if (options.order instanceof Utils2.SequelizeMethod) {
          const sql = this.quote(options.order, model, "->");
          if (subQuery) {
            subQueryOrder.push(sql);
          }
          mainQueryOrder.push(sql);
        } else {
          throw new Error("Order must be type of array or instance of a valid sequelize method.");
        }
        return { mainQueryOrder, subQueryOrder };
      }
      _throwOnEmptyAttributes(attributes, extraInfo = {}) {
        if (attributes.length > 0)
          return;
        const asPart = extraInfo.as && `as ${extraInfo.as}` || "";
        const namePart = extraInfo.modelName && `for model '${extraInfo.modelName}'` || "";
        const message = `Attempted a SELECT query ${namePart} ${asPart} without selecting any columns`;
        throw new sequelizeError.QueryError(message.replace(/ +/g, " "));
      }
      selectFromTableFragment(options, model, attributes, tables, mainTableAs) {
        this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });
        let fragment = `SELECT ${attributes.join(", ")} FROM ${tables}`;
        if (mainTableAs) {
          fragment += ` AS ${mainTableAs}`;
        }
        if (options.indexHints && this._dialect.supports.indexHints) {
          for (const hint of options.indexHints) {
            if (IndexHints2[hint.type]) {
              fragment += ` ${IndexHints2[hint.type]} INDEX (${hint.values.map((indexName) => this.quoteIdentifiers(indexName)).join(",")})`;
            }
          }
        }
        return fragment;
      }
      addLimitAndOffset(options) {
        let fragment = "";
        if (options.offset != null && options.limit == null) {
          fragment += " LIMIT " + this.escape(options.offset) + ", " + 1e13;
        } else if (options.limit != null) {
          if (options.offset != null) {
            fragment += " LIMIT " + this.escape(options.offset) + ", " + this.escape(options.limit);
          } else {
            fragment += " LIMIT " + this.escape(options.limit);
          }
        }
        return fragment;
      }
      handleSequelizeMethod(smth, tableName, factory, options, prepend) {
        let result;
        if (Object.prototype.hasOwnProperty.call(this.OperatorMap, smth.comparator)) {
          smth.comparator = this.OperatorMap[smth.comparator];
        }
        if (smth instanceof Utils2.Where) {
          let value = smth.logic;
          let key;
          if (smth.attribute instanceof Utils2.SequelizeMethod) {
            key = this.getWhereConditions(smth.attribute, tableName, factory, options, prepend);
          } else {
            key = `${this.quoteTable(smth.attribute.Model.name)}.${this.quoteIdentifier(smth.attribute.field || smth.attribute.fieldName)}`;
          }
          if (value && value instanceof Utils2.SequelizeMethod) {
            value = this.getWhereConditions(value, tableName, factory, options, prepend);
            if (value === "NULL") {
              if (smth.comparator === "=") {
                smth.comparator = "IS";
              }
              if (smth.comparator === "!=") {
                smth.comparator = "IS NOT";
              }
            }
            return [key, value].join(` ${smth.comparator} `);
          }
          if (_.isPlainObject(value)) {
            return this.whereItemQuery(smth.attribute, value, {
              model: factory
            });
          }
          if ([this.OperatorMap[Op2.between], this.OperatorMap[Op2.notBetween]].includes(smth.comparator)) {
            value = `${this.escape(value[0])} AND ${this.escape(value[1])}`;
          } else if (typeof value === "boolean") {
            value = this.booleanValue(value);
          } else {
            value = this.escape(value);
          }
          if (value === "NULL") {
            if (smth.comparator === "=") {
              smth.comparator = "IS";
            }
            if (smth.comparator === "!=") {
              smth.comparator = "IS NOT";
            }
          }
          return [key, value].join(` ${smth.comparator} `);
        }
        if (smth instanceof Utils2.Literal) {
          return smth.val;
        }
        if (smth instanceof Utils2.Cast) {
          if (smth.val instanceof Utils2.SequelizeMethod) {
            result = this.handleSequelizeMethod(smth.val, tableName, factory, options, prepend);
          } else if (_.isPlainObject(smth.val)) {
            result = this.whereItemsQuery(smth.val);
          } else {
            result = this.escape(smth.val);
          }
          return `CAST(${result} AS ${smth.type.toUpperCase()})`;
        }
        if (smth instanceof Utils2.Fn) {
          return `${smth.fn}(${smth.args.map((arg) => {
            if (arg instanceof Utils2.SequelizeMethod) {
              return this.handleSequelizeMethod(arg, tableName, factory, options, prepend);
            }
            if (_.isPlainObject(arg)) {
              return this.whereItemsQuery(arg);
            }
            return this.escape(typeof arg === "string" ? arg.replace("$", "$$$") : arg);
          }).join(", ")})`;
        }
        if (smth instanceof Utils2.Col) {
          if (Array.isArray(smth.col) && !factory) {
            throw new Error("Cannot call Sequelize.col() with array outside of order / group clause");
          }
          if (smth.col.startsWith("*")) {
            return "*";
          }
          return this.quote(smth.col, factory);
        }
        return smth.toString(this, factory);
      }
      whereQuery(where2, options) {
        const query = this.whereItemsQuery(where2, options);
        if (query && query.length) {
          return `WHERE ${query}`;
        }
        return "";
      }
      whereItemsQuery(where2, options, binding) {
        if (where2 === null || where2 === void 0 || Utils2.getComplexSize(where2) === 0) {
          return "";
        }
        if (typeof where2 === "string") {
          throw new Error("Support for `{where: 'raw query'}` has been removed.");
        }
        const items = [];
        binding = binding || "AND";
        if (binding[0] !== " ")
          binding = ` ${binding} `;
        if (_.isPlainObject(where2)) {
          Utils2.getComplexKeys(where2).forEach((prop) => {
            const item = where2[prop];
            items.push(this.whereItemQuery(prop, item, options));
          });
        } else {
          items.push(this.whereItemQuery(void 0, where2, options));
        }
        return items.length && items.filter((item) => item && item.length).join(binding) || "";
      }
      whereItemQuery(key, value, options = {}) {
        if (value === void 0) {
          throw new Error(`WHERE parameter "${key}" has invalid "undefined" value`);
        }
        if (typeof key === "string" && key.includes(".") && options.model) {
          const keyParts = key.split(".");
          if (options.model.rawAttributes[keyParts[0]] && options.model.rawAttributes[keyParts[0]].type instanceof DataTypes2.JSON) {
            const tmp = {};
            const field2 = options.model.rawAttributes[keyParts[0]];
            _.set(tmp, keyParts.slice(1), value);
            return this.whereItemQuery(field2.field || keyParts[0], tmp, __spreadValues({ field: field2 }, options));
          }
        }
        const field = this._findField(key, options);
        const fieldType = field && field.type || options.type;
        const isPlainObject = _.isPlainObject(value);
        const isArray = !isPlainObject && Array.isArray(value);
        key = this.OperatorsAliasMap && this.OperatorsAliasMap[key] || key;
        if (isPlainObject) {
          value = this._replaceAliases(value);
        }
        const valueKeys = isPlainObject && Utils2.getComplexKeys(value);
        if (key === void 0) {
          if (typeof value === "string") {
            return value;
          }
          if (isPlainObject && valueKeys.length === 1) {
            return this.whereItemQuery(valueKeys[0], value[valueKeys[0]], options);
          }
        }
        if (value === null) {
          const opValue2 = options.bindParam ? "NULL" : this.escape(value, field);
          return this._joinKeyValue(key, opValue2, this.OperatorMap[Op2.is], options.prefix);
        }
        if (!value) {
          const opValue2 = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);
          return this._joinKeyValue(key, opValue2, this.OperatorMap[Op2.eq], options.prefix);
        }
        if (value instanceof Utils2.SequelizeMethod && !(key !== void 0 && value instanceof Utils2.Fn)) {
          return this.handleSequelizeMethod(value);
        }
        if (key === void 0 && isArray) {
          if (Utils2.canTreatArrayAsAnd(value)) {
            key = Op2.and;
          } else {
            throw new Error("Support for literal replacements in the `where` object has been removed.");
          }
        }
        if (key === Op2.or || key === Op2.and || key === Op2.not) {
          return this._whereGroupBind(key, value, options);
        }
        if (value[Op2.or]) {
          return this._whereBind(this.OperatorMap[Op2.or], key, value[Op2.or], options);
        }
        if (value[Op2.and]) {
          return this._whereBind(this.OperatorMap[Op2.and], key, value[Op2.and], options);
        }
        if (isArray && fieldType instanceof DataTypes2.ARRAY) {
          const opValue2 = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);
          return this._joinKeyValue(key, opValue2, this.OperatorMap[Op2.eq], options.prefix);
        }
        if (isPlainObject && fieldType instanceof DataTypes2.JSON && options.json !== false) {
          return this._whereJSON(key, value, options);
        }
        if (isPlainObject && valueKeys.length > 1) {
          return this._whereBind(this.OperatorMap[Op2.and], key, value, options);
        }
        if (isArray) {
          return this._whereParseSingleValueObject(key, field, Op2.in, value, options);
        }
        if (isPlainObject) {
          if (this.OperatorMap[valueKeys[0]]) {
            return this._whereParseSingleValueObject(key, field, valueKeys[0], value[valueKeys[0]], options);
          }
          return this._whereParseSingleValueObject(key, field, this.OperatorMap[Op2.eq], value, options);
        }
        if (key === Op2.placeholder) {
          const opValue2 = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);
          return this._joinKeyValue(this.OperatorMap[key], opValue2, this.OperatorMap[Op2.eq], options.prefix);
        }
        const opValue = options.bindParam ? this.format(value, field, options, options.bindParam) : this.escape(value, field);
        return this._joinKeyValue(key, opValue, this.OperatorMap[Op2.eq], options.prefix);
      }
      _findField(key, options) {
        if (options.field) {
          return options.field;
        }
        if (options.model && options.model.rawAttributes && options.model.rawAttributes[key]) {
          return options.model.rawAttributes[key];
        }
        if (options.model && options.model.fieldRawAttributesMap && options.model.fieldRawAttributesMap[key]) {
          return options.model.fieldRawAttributesMap[key];
        }
      }
      _whereGroupBind(key, value, options) {
        const binding = key === Op2.or ? this.OperatorMap[Op2.or] : this.OperatorMap[Op2.and];
        const outerBinding = key === Op2.not ? "NOT " : "";
        if (Array.isArray(value)) {
          value = value.map((item) => {
            let itemQuery = this.whereItemsQuery(item, options, this.OperatorMap[Op2.and]);
            if (itemQuery && itemQuery.length && (Array.isArray(item) || _.isPlainObject(item)) && Utils2.getComplexSize(item) > 1) {
              itemQuery = `(${itemQuery})`;
            }
            return itemQuery;
          }).filter((item) => item && item.length);
          value = value.length && value.join(binding);
        } else {
          value = this.whereItemsQuery(value, options, binding);
        }
        if ((key === Op2.or || key === Op2.not) && !value) {
          return "0 = 1";
        }
        return value ? `${outerBinding}(${value})` : void 0;
      }
      _whereBind(binding, key, value, options) {
        if (_.isPlainObject(value)) {
          value = Utils2.getComplexKeys(value).map((prop) => {
            const item = value[prop];
            return this.whereItemQuery(key, { [prop]: item }, options);
          });
        } else {
          value = value.map((item) => this.whereItemQuery(key, item, options));
        }
        value = value.filter((item) => item && item.length);
        return value.length ? `(${value.join(binding)})` : void 0;
      }
      _whereJSON(key, value, options) {
        const items = [];
        let baseKey = this.quoteIdentifier(key);
        if (options.prefix) {
          if (options.prefix instanceof Utils2.Literal) {
            baseKey = `${this.handleSequelizeMethod(options.prefix)}.${baseKey}`;
          } else {
            baseKey = `${this.quoteTable(options.prefix)}.${baseKey}`;
          }
        }
        Utils2.getOperators(value).forEach((op) => {
          const where2 = {
            [op]: value[op]
          };
          items.push(this.whereItemQuery(key, where2, __spreadProps(__spreadValues({}, options), { json: false })));
        });
        _.forOwn(value, (item, prop) => {
          this._traverseJSON(items, baseKey, prop, item, [prop]);
        });
        const result = items.join(this.OperatorMap[Op2.and]);
        return items.length > 1 ? `(${result})` : result;
      }
      _traverseJSON(items, baseKey, prop, item, path) {
        let cast2;
        if (path[path.length - 1].includes("::")) {
          const tmp = path[path.length - 1].split("::");
          cast2 = tmp[1];
          path[path.length - 1] = tmp[0];
        }
        let pathKey = this.jsonPathExtractionQuery(baseKey, path);
        if (_.isPlainObject(item)) {
          Utils2.getOperators(item).forEach((op) => {
            const value = this._toJSONValue(item[op]);
            let isJson = false;
            if (typeof value === "string" && op === Op2.contains) {
              try {
                JSON.stringify(value);
                isJson = true;
              } catch (e) {
              }
            }
            pathKey = this.jsonPathExtractionQuery(baseKey, path, isJson);
            items.push(this.whereItemQuery(this._castKey(pathKey, value, cast2), { [op]: value }));
          });
          _.forOwn(item, (value, itemProp) => {
            this._traverseJSON(items, baseKey, itemProp, value, path.concat([itemProp]));
          });
          return;
        }
        item = this._toJSONValue(item);
        items.push(this.whereItemQuery(this._castKey(pathKey, item, cast2), { [Op2.eq]: item }));
      }
      _toJSONValue(value) {
        return value;
      }
      _castKey(key, value, cast2, json2) {
        cast2 = cast2 || this._getJsonCast(Array.isArray(value) ? value[0] : value);
        if (cast2) {
          return new Utils2.Literal(this.handleSequelizeMethod(new Utils2.Cast(new Utils2.Literal(key), cast2, json2)));
        }
        return new Utils2.Literal(key);
      }
      _getJsonCast(value) {
        if (typeof value === "number") {
          return "double precision";
        }
        if (value instanceof Date) {
          return "timestamptz";
        }
        if (typeof value === "boolean") {
          return "boolean";
        }
        return;
      }
      _joinKeyValue(key, value, comparator, prefix) {
        if (!key) {
          return value;
        }
        if (comparator === void 0) {
          throw new Error(`${key} and ${value} has no comparator`);
        }
        key = this._getSafeKey(key, prefix);
        return [key, value].join(` ${comparator} `);
      }
      _getSafeKey(key, prefix) {
        if (key instanceof Utils2.SequelizeMethod) {
          key = this.handleSequelizeMethod(key);
          return this._prefixKey(this.handleSequelizeMethod(key), prefix);
        }
        if (Utils2.isColString(key)) {
          key = key.substr(1, key.length - 2).split(".");
          if (key.length > 2) {
            key = [
              key.slice(0, -1).join("->"),
              key[key.length - 1]
            ];
          }
          return key.map((identifier2) => this.quoteIdentifier(identifier2)).join(".");
        }
        return this._prefixKey(this.quoteIdentifier(key), prefix);
      }
      _prefixKey(key, prefix) {
        if (prefix) {
          if (prefix instanceof Utils2.Literal) {
            return [this.handleSequelizeMethod(prefix), key].join(".");
          }
          return [this.quoteTable(prefix), key].join(".");
        }
        return key;
      }
      _whereParseSingleValueObject(key, field, prop, value, options) {
        if (prop === Op2.not) {
          if (Array.isArray(value)) {
            prop = Op2.notIn;
          } else if (value !== null && value !== true && value !== false) {
            prop = Op2.ne;
          }
        }
        let comparator = this.OperatorMap[prop] || this.OperatorMap[Op2.eq];
        switch (prop) {
          case Op2.in:
          case Op2.notIn:
            if (value instanceof Utils2.Literal) {
              return this._joinKeyValue(key, value.val, comparator, options.prefix);
            }
            if (value.length) {
              return this._joinKeyValue(key, `(${value.map((item) => this.escape(item, field)).join(", ")})`, comparator, options.prefix);
            }
            if (comparator === this.OperatorMap[Op2.in]) {
              return this._joinKeyValue(key, "(NULL)", comparator, options.prefix);
            }
            return "";
          case Op2.any:
          case Op2.all:
            comparator = `${this.OperatorMap[Op2.eq]} ${comparator}`;
            if (value[Op2.values]) {
              return this._joinKeyValue(key, `(VALUES ${value[Op2.values].map((item) => `(${this.escape(item)})`).join(", ")})`, comparator, options.prefix);
            }
            return this._joinKeyValue(key, `(${this.escape(value, field)})`, comparator, options.prefix);
          case Op2.between:
          case Op2.notBetween:
            return this._joinKeyValue(key, `${this.escape(value[0], field)} AND ${this.escape(value[1], field)}`, comparator, options.prefix);
          case Op2.raw:
            throw new Error("The `$raw` where property is no longer supported.  Use `sequelize.literal` instead.");
          case Op2.col:
            comparator = this.OperatorMap[Op2.eq];
            value = value.split(".");
            if (value.length > 2) {
              value = [
                value.slice(0, -1).join("->"),
                value[value.length - 1]
              ];
            }
            return this._joinKeyValue(key, value.map((identifier2) => this.quoteIdentifier(identifier2)).join("."), comparator, options.prefix);
          case Op2.startsWith:
          case Op2.endsWith:
          case Op2.substring:
            comparator = this.OperatorMap[Op2.like];
            if (value instanceof Utils2.Literal) {
              value = value.val;
            }
            let pattern = `${value}%`;
            if (prop === Op2.endsWith)
              pattern = `%${value}`;
            if (prop === Op2.substring)
              pattern = `%${value}%`;
            return this._joinKeyValue(key, this.escape(pattern), comparator, options.prefix);
        }
        const escapeOptions = {
          acceptStrings: comparator.includes(this.OperatorMap[Op2.like])
        };
        if (_.isPlainObject(value)) {
          if (value[Op2.col]) {
            return this._joinKeyValue(key, this.whereItemQuery(null, value), comparator, options.prefix);
          }
          if (value[Op2.any]) {
            escapeOptions.isList = true;
            return this._joinKeyValue(key, `(${this.escape(value[Op2.any], field, escapeOptions)})`, `${comparator} ${this.OperatorMap[Op2.any]}`, options.prefix);
          }
          if (value[Op2.all]) {
            escapeOptions.isList = true;
            return this._joinKeyValue(key, `(${this.escape(value[Op2.all], field, escapeOptions)})`, `${comparator} ${this.OperatorMap[Op2.all]}`, options.prefix);
          }
        }
        if (value === null && comparator === this.OperatorMap[Op2.eq]) {
          return this._joinKeyValue(key, this.escape(value, field, escapeOptions), this.OperatorMap[Op2.is], options.prefix);
        }
        if (value === null && comparator === this.OperatorMap[Op2.ne]) {
          return this._joinKeyValue(key, this.escape(value, field, escapeOptions), this.OperatorMap[Op2.not], options.prefix);
        }
        return this._joinKeyValue(key, this.escape(value, field, escapeOptions), comparator, options.prefix);
      }
      getWhereConditions(smth, tableName, factory, options, prepend) {
        const where2 = {};
        if (Array.isArray(tableName)) {
          tableName = tableName[0];
          if (Array.isArray(tableName)) {
            tableName = tableName[1];
          }
        }
        options = options || {};
        if (prepend === void 0) {
          prepend = true;
        }
        if (smth && smth instanceof Utils2.SequelizeMethod) {
          return this.handleSequelizeMethod(smth, tableName, factory, options, prepend);
        }
        if (_.isPlainObject(smth)) {
          return this.whereItemsQuery(smth, {
            model: factory,
            prefix: prepend && tableName,
            type: options.type
          });
        }
        if (typeof smth === "number") {
          let primaryKeys = factory ? Object.keys(factory.primaryKeys) : [];
          if (primaryKeys.length > 0) {
            primaryKeys = primaryKeys[0];
          } else {
            primaryKeys = "id";
          }
          where2[primaryKeys] = smth;
          return this.whereItemsQuery(where2, {
            model: factory,
            prefix: prepend && tableName
          });
        }
        if (typeof smth === "string") {
          return this.whereItemsQuery(smth, {
            model: factory,
            prefix: prepend && tableName
          });
        }
        if (Buffer.isBuffer(smth)) {
          return this.escape(smth);
        }
        if (Array.isArray(smth)) {
          if (smth.length === 0 || smth.length > 0 && smth[0].length === 0)
            return "1=1";
          if (Utils2.canTreatArrayAsAnd(smth)) {
            const _smth = { [Op2.and]: smth };
            return this.getWhereConditions(_smth, tableName, factory, options, prepend);
          }
          throw new Error("Support for literal replacements in the `where` object has been removed.");
        }
        if (smth === null) {
          return this.whereItemsQuery(smth, {
            model: factory,
            prefix: prepend && tableName
          });
        }
        return "1=1";
      }
      parseConditionObject(conditions, path) {
        path = path || [];
        return _.reduce(conditions, (result, value, key) => {
          if (_.isObject(value)) {
            return result.concat(this.parseConditionObject(value, path.concat(key)));
          }
          result.push({ path: path.concat(key), value });
          return result;
        }, []);
      }
      booleanValue(value) {
        return value;
      }
    };
    Object.assign(QueryGenerator.prototype, require_operators2());
    Object.assign(QueryGenerator.prototype, require_transaction2());
    module.exports = QueryGenerator;
  }
});

// node_modules/sequelize/lib/dialects/mysql/query-generator.js
var require_query_generator2 = __commonJS({
  "node_modules/sequelize/lib/dialects/mysql/query-generator.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var _ = require_lodash();
    var Utils2 = require_utils();
    var AbstractQueryGenerator = require_query_generator();
    var util = __require("util");
    var Op2 = require_operators();
    var JSON_FUNCTION_REGEX = /^\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\([^)]*\)/i;
    var JSON_OPERATOR_REGEX = /^\s*(->>?|@>|<@|\?[|&]?|\|{2}|#-)/i;
    var TOKEN_CAPTURE_REGEX = /^\s*((?:([`"'])(?:(?!\2).|\2{2})*\2)|[\w\d\s]+|[().,;+-])/i;
    var FOREIGN_KEY_FIELDS = [
      "CONSTRAINT_NAME as constraint_name",
      "CONSTRAINT_NAME as constraintName",
      "CONSTRAINT_SCHEMA as constraintSchema",
      "CONSTRAINT_SCHEMA as constraintCatalog",
      "TABLE_NAME as tableName",
      "TABLE_SCHEMA as tableSchema",
      "TABLE_SCHEMA as tableCatalog",
      "COLUMN_NAME as columnName",
      "REFERENCED_TABLE_SCHEMA as referencedTableSchema",
      "REFERENCED_TABLE_SCHEMA as referencedTableCatalog",
      "REFERENCED_TABLE_NAME as referencedTableName",
      "REFERENCED_COLUMN_NAME as referencedColumnName"
    ].join(",");
    var typeWithoutDefault = /* @__PURE__ */ new Set(["BLOB", "TEXT", "GEOMETRY", "JSON"]);
    var MySQLQueryGenerator = class extends AbstractQueryGenerator {
      constructor(options) {
        super(options);
        this.OperatorMap = __spreadProps(__spreadValues({}, this.OperatorMap), {
          [Op2.regexp]: "REGEXP",
          [Op2.notRegexp]: "NOT REGEXP"
        });
      }
      createDatabaseQuery(databaseName, options) {
        options = __spreadValues({
          charset: null,
          collate: null
        }, options);
        return Utils2.joinSQLFragments([
          "CREATE DATABASE IF NOT EXISTS",
          this.quoteIdentifier(databaseName),
          options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,
          options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,
          ";"
        ]);
      }
      dropDatabaseQuery(databaseName) {
        return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;
      }
      createSchema() {
        return "SHOW TABLES";
      }
      showSchemasQuery() {
        return "SHOW TABLES";
      }
      versionQuery() {
        return "SELECT VERSION() as `version`";
      }
      createTableQuery(tableName, attributes, options) {
        options = __spreadValues({
          engine: "InnoDB",
          charset: null,
          rowFormat: null
        }, options);
        const primaryKeys = [];
        const foreignKeys = {};
        const attrStr = [];
        for (const attr in attributes) {
          if (!Object.prototype.hasOwnProperty.call(attributes, attr))
            continue;
          const dataType = attributes[attr];
          let match;
          if (dataType.includes("PRIMARY KEY")) {
            primaryKeys.push(attr);
            if (dataType.includes("REFERENCES")) {
              match = dataType.match(/^(.+) (REFERENCES.*)$/);
              attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace("PRIMARY KEY", "")}`);
              foreignKeys[attr] = match[2];
            } else {
              attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace("PRIMARY KEY", "")}`);
            }
          } else if (dataType.includes("REFERENCES")) {
            match = dataType.match(/^(.+) (REFERENCES.*)$/);
            attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);
            foreignKeys[attr] = match[2];
          } else {
            attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);
          }
        }
        const table = this.quoteTable(tableName);
        let attributesClause = attrStr.join(", ");
        const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(", ");
        if (options.uniqueKeys) {
          _.each(options.uniqueKeys, (columns, indexName) => {
            if (columns.customIndex) {
              if (typeof indexName !== "string") {
                indexName = `uniq_${tableName}_${columns.fields.join("_")}`;
              }
              attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map((field) => this.quoteIdentifier(field)).join(", ")})`;
            }
          });
        }
        if (pkString.length > 0) {
          attributesClause += `, PRIMARY KEY (${pkString})`;
        }
        for (const fkey in foreignKeys) {
          if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {
            attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;
          }
        }
        return Utils2.joinSQLFragments([
          "CREATE TABLE IF NOT EXISTS",
          table,
          `(${attributesClause})`,
          `ENGINE=${options.engine}`,
          options.comment && typeof options.comment === "string" && `COMMENT ${this.escape(options.comment)}`,
          options.charset && `DEFAULT CHARSET=${options.charset}`,
          options.collate && `COLLATE ${options.collate}`,
          options.initialAutoIncrement && `AUTO_INCREMENT=${options.initialAutoIncrement}`,
          options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,
          ";"
        ]);
      }
      describeTableQuery(tableName, schema, schemaDelimiter) {
        const table = this.quoteTable(this.addSchema({
          tableName,
          _schema: schema,
          _schemaDelimiter: schemaDelimiter
        }));
        return `SHOW FULL COLUMNS FROM ${table};`;
      }
      showTablesQuery(database) {
        let query = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'";
        if (database) {
          query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;
        } else {
          query += " AND TABLE_SCHEMA NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'SYS')";
        }
        return `${query};`;
      }
      addColumnQuery(table, key, dataType) {
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(table),
          "ADD",
          this.quoteIdentifier(key),
          this.attributeToSQL(dataType, {
            context: "addColumn",
            tableName: table,
            foreignKey: key
          }),
          ";"
        ]);
      }
      removeColumnQuery(tableName, attributeName) {
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(tableName),
          "DROP",
          this.quoteIdentifier(attributeName),
          ";"
        ]);
      }
      changeColumnQuery(tableName, attributes) {
        const attrString = [];
        const constraintString = [];
        for (const attributeName in attributes) {
          let definition = attributes[attributeName];
          if (definition.includes("REFERENCES")) {
            const attrName = this.quoteIdentifier(attributeName);
            definition = definition.replace(/.+?(?=REFERENCES)/, "");
            constraintString.push(`FOREIGN KEY (${attrName}) ${definition}`);
          } else {
            attrString.push(`\`${attributeName}\` \`${attributeName}\` ${definition}`);
          }
        }
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(tableName),
          attrString.length && `CHANGE ${attrString.join(", ")}`,
          constraintString.length && `ADD ${constraintString.join(", ")}`,
          ";"
        ]);
      }
      renameColumnQuery(tableName, attrBefore, attributes) {
        const attrString = [];
        for (const attrName in attributes) {
          const definition = attributes[attrName];
          attrString.push(`\`${attrBefore}\` \`${attrName}\` ${definition}`);
        }
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(tableName),
          "CHANGE",
          attrString.join(", "),
          ";"
        ]);
      }
      handleSequelizeMethod(smth, tableName, factory, options, prepend) {
        if (smth instanceof Utils2.Json) {
          if (smth.conditions) {
            const conditions = this.parseConditionObject(smth.conditions).map((condition) => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);
            return conditions.join(" AND ");
          }
          if (smth.path) {
            let str;
            if (this._checkValidJsonStatement(smth.path)) {
              str = smth.path;
            } else {
              const paths = _.toPath(smth.path);
              const column = paths.shift();
              str = this.jsonPathExtractionQuery(column, paths);
            }
            if (smth.value) {
              str += util.format(" = %s", this.escape(smth.value));
            }
            return str;
          }
        } else if (smth instanceof Utils2.Cast) {
          if (/timestamp/i.test(smth.type)) {
            smth.type = "datetime";
          } else if (smth.json && /boolean/i.test(smth.type)) {
            smth.type = "char";
          } else if (/double precision/i.test(smth.type) || /boolean/i.test(smth.type) || /integer/i.test(smth.type)) {
            smth.type = "decimal";
          } else if (/text/i.test(smth.type)) {
            smth.type = "char";
          }
        }
        return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);
      }
      _toJSONValue(value) {
        if (typeof value === "boolean") {
          return value.toString();
        }
        if (value === null) {
          return "null";
        }
        return value;
      }
      truncateTableQuery(tableName) {
        return `TRUNCATE ${this.quoteTable(tableName)}`;
      }
      deleteQuery(tableName, where2, options = {}, model) {
        let limit = "";
        let query = `DELETE FROM ${this.quoteTable(tableName)}`;
        if (options.limit) {
          limit = ` LIMIT ${this.escape(options.limit)}`;
        }
        where2 = this.getWhereConditions(where2, null, model, options);
        if (where2) {
          query += ` WHERE ${where2}`;
        }
        return query + limit;
      }
      showIndexesQuery(tableName, options) {
        return Utils2.joinSQLFragments([
          `SHOW INDEX FROM ${this.quoteTable(tableName)}`,
          options && options.database && `FROM \`${options.database}\``
        ]);
      }
      showConstraintsQuery(table, constraintName) {
        const tableName = table.tableName || table;
        const schemaName = table.schema;
        return Utils2.joinSQLFragments([
          "SELECT CONSTRAINT_CATALOG AS constraintCatalog,",
          "CONSTRAINT_NAME AS constraintName,",
          "CONSTRAINT_SCHEMA AS constraintSchema,",
          "CONSTRAINT_TYPE AS constraintType,",
          "TABLE_NAME AS tableName,",
          "TABLE_SCHEMA AS tableSchema",
          "from INFORMATION_SCHEMA.TABLE_CONSTRAINTS",
          `WHERE table_name='${tableName}'`,
          constraintName && `AND constraint_name = '${constraintName}'`,
          schemaName && `AND TABLE_SCHEMA = '${schemaName}'`,
          ";"
        ]);
      }
      removeIndexQuery(tableName, indexNameOrAttributes) {
        let indexName = indexNameOrAttributes;
        if (typeof indexName !== "string") {
          indexName = Utils2.underscore(`${tableName}_${indexNameOrAttributes.join("_")}`);
        }
        return Utils2.joinSQLFragments([
          "DROP INDEX",
          this.quoteIdentifier(indexName),
          "ON",
          this.quoteTable(tableName)
        ]);
      }
      attributeToSQL(attribute, options) {
        if (!_.isPlainObject(attribute)) {
          attribute = {
            type: attribute
          };
        }
        const attributeString = attribute.type.toString({ escape: this.escape.bind(this) });
        let template = attributeString;
        if (attribute.allowNull === false) {
          template += " NOT NULL";
        }
        if (attribute.autoIncrement) {
          template += " auto_increment";
        }
        if (!typeWithoutDefault.has(attributeString) && attribute.type._binary !== true && Utils2.defaultValueSchemable(attribute.defaultValue)) {
          template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;
        }
        if (attribute.unique === true) {
          template += " UNIQUE";
        }
        if (attribute.primaryKey) {
          template += " PRIMARY KEY";
        }
        if (attribute.comment) {
          template += ` COMMENT ${this.escape(attribute.comment)}`;
        }
        if (attribute.first) {
          template += " FIRST";
        }
        if (attribute.after) {
          template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;
        }
        if (attribute.references) {
          if (options && options.context === "addColumn" && options.foreignKey) {
            const attrName = this.quoteIdentifier(options.foreignKey);
            const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);
            template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;
          }
          template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;
          if (attribute.references.key) {
            template += ` (${this.quoteIdentifier(attribute.references.key)})`;
          } else {
            template += ` (${this.quoteIdentifier("id")})`;
          }
          if (attribute.onDelete) {
            template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;
          }
          if (attribute.onUpdate) {
            template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;
          }
        }
        return template;
      }
      attributesToSQL(attributes, options) {
        const result = {};
        for (const key in attributes) {
          const attribute = attributes[key];
          result[attribute.field || key] = this.attributeToSQL(attribute, options);
        }
        return result;
      }
      _checkValidJsonStatement(stmt) {
        if (typeof stmt !== "string") {
          return false;
        }
        let currentIndex = 0;
        let openingBrackets = 0;
        let closingBrackets = 0;
        let hasJsonFunction = false;
        let hasInvalidToken = false;
        while (currentIndex < stmt.length) {
          const string = stmt.substr(currentIndex);
          const functionMatches = JSON_FUNCTION_REGEX.exec(string);
          if (functionMatches) {
            currentIndex += functionMatches[0].indexOf("(");
            hasJsonFunction = true;
            continue;
          }
          const operatorMatches = JSON_OPERATOR_REGEX.exec(string);
          if (operatorMatches) {
            currentIndex += operatorMatches[0].length;
            hasJsonFunction = true;
            continue;
          }
          const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);
          if (tokenMatches) {
            const capturedToken = tokenMatches[1];
            if (capturedToken === "(") {
              openingBrackets++;
            } else if (capturedToken === ")") {
              closingBrackets++;
            } else if (capturedToken === ";") {
              hasInvalidToken = true;
              break;
            }
            currentIndex += tokenMatches[0].length;
            continue;
          }
          break;
        }
        if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {
          throw new Error(`Invalid json statement: ${stmt}`);
        }
        return hasJsonFunction;
      }
      getForeignKeysQuery(table, schemaName) {
        const tableName = table.tableName || table;
        return Utils2.joinSQLFragments([
          "SELECT",
          FOREIGN_KEY_FIELDS,
          `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`,
          `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`,
          "AND REFERENCED_TABLE_NAME IS NOT NULL",
          ";"
        ]);
      }
      getForeignKeyQuery(table, columnName) {
        const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : "";
        const quotedTableName = wrapSingleQuote(table.tableName || table);
        const quotedColumnName = wrapSingleQuote(columnName);
        return Utils2.joinSQLFragments([
          "SELECT",
          FOREIGN_KEY_FIELDS,
          "FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE",
          "WHERE (",
          [
            `REFERENCED_TABLE_NAME = ${quotedTableName}`,
            table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`,
            `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`
          ],
          ") OR (",
          [
            `TABLE_NAME = ${quotedTableName}`,
            table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`,
            `AND COLUMN_NAME = ${quotedColumnName}`,
            "AND REFERENCED_TABLE_NAME IS NOT NULL"
          ],
          ")"
        ]);
      }
      dropForeignKeyQuery(tableName, foreignKey) {
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(tableName),
          "DROP FOREIGN KEY",
          this.quoteIdentifier(foreignKey),
          ";"
        ]);
      }
      quoteIdentifier(identifier2, force) {
        return Utils2.addTicks(Utils2.removeTicks(identifier2, "`"), "`");
      }
    };
    function wrapSingleQuote(identifier2) {
      return Utils2.addTicks(identifier2, "'");
    }
    module.exports = MySQLQueryGenerator;
  }
});

// node_modules/sequelize/lib/dialects/mariadb/query-generator.js
var require_query_generator3 = __commonJS({
  "node_modules/sequelize/lib/dialects/mariadb/query-generator.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var MySQLQueryGenerator = require_query_generator2();
    var Utils2 = require_utils();
    var MariaDBQueryGenerator = class extends MySQLQueryGenerator {
      createSchema(schema, options) {
        options = __spreadValues({
          charset: null,
          collate: null
        }, options);
        return Utils2.joinSQLFragments([
          "CREATE SCHEMA IF NOT EXISTS",
          this.quoteIdentifier(schema),
          options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,
          options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,
          ";"
        ]);
      }
      dropSchema(schema) {
        return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)};`;
      }
      showSchemasQuery(options) {
        const schemasToSkip = [
          "'MYSQL'",
          "'INFORMATION_SCHEMA'",
          "'PERFORMANCE_SCHEMA'"
        ];
        if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {
          for (const schemaName of options.skip) {
            schemasToSkip.push(this.escape(schemaName));
          }
        }
        return Utils2.joinSQLFragments([
          "SELECT SCHEMA_NAME as schema_name",
          "FROM INFORMATION_SCHEMA.SCHEMATA",
          `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.join(", ")})`,
          ";"
        ]);
      }
      showTablesQuery(database) {
        let query = "SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'";
        if (database) {
          query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;
        } else {
          query += " AND TABLE_SCHEMA NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA')";
        }
        return `${query};`;
      }
      quoteIdentifier(identifier2, force) {
        return Utils2.addTicks(Utils2.removeTicks(identifier2, "`"), "`");
      }
    };
    module.exports = MariaDBQueryGenerator;
  }
});

// node_modules/sequelize/lib/dialects/mysql/query-interface.js
var require_query_interface2 = __commonJS({
  "node_modules/sequelize/lib/dialects/mysql/query-interface.js"(exports) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var sequelizeErrors = require_errors();
    var { QueryInterface: QueryInterface2 } = require_query_interface();
    var QueryTypes2 = require_query_types();
    var MySQLQueryInterface = class extends QueryInterface2 {
      async removeColumn(tableName, columnName, options) {
        options = options || {};
        const [results] = await this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {
          tableName,
          schema: this.sequelize.config.database
        }, columnName), __spreadValues({ raw: true }, options));
        if (results.length && results[0].constraint_name !== "PRIMARY") {
          await Promise.all(results.map((constraint) => this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), __spreadValues({ raw: true }, options))));
        }
        return await this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), __spreadValues({ raw: true }, options));
      }
      async upsert(tableName, insertValues, updateValues, where2, options) {
        options = __spreadValues({}, options);
        options.type = QueryTypes2.UPSERT;
        options.updateOnDuplicate = Object.keys(updateValues);
        options.upsertKeys = Object.values(options.model.primaryKeys).map((item) => item.field);
        const model = options.model;
        const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);
        return await this.sequelize.query(sql, options);
      }
      async removeConstraint(tableName, constraintName, options) {
        const sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {
          tableName,
          schema: this.sequelize.config.database
        }, constraintName);
        const constraints = await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {
          type: this.sequelize.QueryTypes.SHOWCONSTRAINTS
        }));
        const constraint = constraints[0];
        let query;
        if (!constraint || !constraint.constraintType) {
          throw new sequelizeErrors.UnknownConstraintError({
            message: `Constraint ${constraintName} on table ${tableName} does not exist`,
            constraint: constraintName,
            table: tableName
          });
        }
        if (constraint.constraintType === "FOREIGN KEY") {
          query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);
        } else {
          query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);
        }
        return await this.sequelize.query(query, options);
      }
    };
    exports.MySQLQueryInterface = MySQLQueryInterface;
  }
});

// node_modules/sequelize/lib/dialects/mariadb/index.js
var require_mariadb = __commonJS({
  "node_modules/sequelize/lib/dialects/mariadb/index.js"(exports, module) {
    "use strict";
    var _ = require_lodash();
    var AbstractDialect = require_abstract();
    var ConnectionManager = require_connection_manager2();
    var Query = require_query2();
    var QueryGenerator = require_query_generator3();
    var { MySQLQueryInterface } = require_query_interface2();
    var DataTypes2 = require_data_types8().mariadb;
    var MariadbDialect = class extends AbstractDialect {
      constructor(sequelize) {
        super();
        this.sequelize = sequelize;
        this.connectionManager = new ConnectionManager(this, sequelize);
        this.queryGenerator = new QueryGenerator({
          _dialect: this,
          sequelize
        });
        this.queryInterface = new MySQLQueryInterface(sequelize, this.queryGenerator);
      }
    };
    MariadbDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {
      "VALUES ()": true,
      "LIMIT ON UPDATE": true,
      lock: true,
      forShare: "LOCK IN SHARE MODE",
      settingIsolationLevelDuringTransaction: false,
      schemas: true,
      inserts: {
        ignoreDuplicates: " IGNORE",
        updateOnDuplicate: " ON DUPLICATE KEY UPDATE"
      },
      index: {
        collate: false,
        length: true,
        parser: true,
        type: true,
        using: 1
      },
      constraints: {
        dropConstraint: false,
        check: false
      },
      indexViaAlter: true,
      indexHints: true,
      NUMERIC: true,
      GEOMETRY: true,
      JSON: true,
      REGEXP: true
    });
    MariadbDialect.prototype.defaultVersion = "10.1.44";
    MariadbDialect.prototype.Query = Query;
    MariadbDialect.prototype.QueryGenerator = QueryGenerator;
    MariadbDialect.prototype.DataTypes = DataTypes2;
    MariadbDialect.prototype.name = "mariadb";
    MariadbDialect.prototype.TICK_CHAR = "`";
    MariadbDialect.prototype.TICK_CHAR_LEFT = MariadbDialect.prototype.TICK_CHAR;
    MariadbDialect.prototype.TICK_CHAR_RIGHT = MariadbDialect.prototype.TICK_CHAR;
    module.exports = MariadbDialect;
  }
});

// node_modules/sequelize/lib/dialects/mssql/connection-manager.js
var require_connection_manager3 = __commonJS({
  "node_modules/sequelize/lib/dialects/mssql/connection-manager.js"(exports, module) {
    "use strict";
    var AbstractConnectionManager = require_connection_manager();
    var AsyncQueue = require_async_queue().default;
    var { logger } = require_logger();
    var sequelizeErrors = require_errors();
    var DataTypes2 = require_data_types8().mssql;
    var parserStore = require_parserStore()("mssql");
    var debug = logger.debugContext("connection:mssql");
    var debugTedious = logger.debugContext("connection:mssql:tedious");
    var ConnectionManager = class extends AbstractConnectionManager {
      constructor(dialect, sequelize) {
        sequelize.config.port = sequelize.config.port || 1433;
        super(dialect, sequelize);
        this.lib = this._loadDialectModule("tedious");
        this.refreshTypeParser(DataTypes2);
      }
      _refreshTypeParser(dataType) {
        parserStore.refresh(dataType);
      }
      _clearTypeParser() {
        parserStore.clear();
      }
      async connect(config) {
        const connectionConfig = {
          server: config.host,
          authentication: {
            type: "default",
            options: {
              userName: config.username || void 0,
              password: config.password || void 0
            }
          },
          options: {
            port: parseInt(config.port, 10),
            database: config.database,
            trustServerCertificate: true
          }
        };
        if (config.dialectOptions) {
          if (config.dialectOptions.options && config.dialectOptions.options.instanceName) {
            delete connectionConfig.options.port;
          }
          if (config.dialectOptions.authentication) {
            Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);
          }
          Object.assign(connectionConfig.options, config.dialectOptions.options);
        }
        try {
          return await new Promise((resolve, reject) => {
            const connection = new this.lib.Connection(connectionConfig);
            if (connection.state === connection.STATE.INITIALIZED) {
              connection.connect();
            }
            connection.queue = new AsyncQueue();
            connection.lib = this.lib;
            const connectHandler = (error) => {
              connection.removeListener("end", endHandler);
              connection.removeListener("error", errorHandler);
              if (error)
                return reject(error);
              debug("connection acquired");
              resolve(connection);
            };
            const endHandler = () => {
              connection.removeListener("connect", connectHandler);
              connection.removeListener("error", errorHandler);
              reject(new Error("Connection was closed by remote server"));
            };
            const errorHandler = (error) => {
              connection.removeListener("connect", connectHandler);
              connection.removeListener("end", endHandler);
              reject(error);
            };
            connection.once("error", errorHandler);
            connection.once("end", endHandler);
            connection.once("connect", connectHandler);
            connection.on("error", (error) => {
              switch (error.code) {
                case "ESOCKET":
                case "ECONNRESET":
                  this.pool.destroy(connection);
              }
            });
            if (config.dialectOptions && config.dialectOptions.debug) {
              connection.on("debug", debugTedious.log.bind(debugTedious));
            }
          });
        } catch (error) {
          if (!error.code) {
            throw new sequelizeErrors.ConnectionError(error);
          }
          switch (error.code) {
            case "ESOCKET":
              if (error.message.includes("connect EHOSTUNREACH")) {
                throw new sequelizeErrors.HostNotReachableError(error);
              }
              if (error.message.includes("connect ENETUNREACH")) {
                throw new sequelizeErrors.HostNotReachableError(error);
              }
              if (error.message.includes("connect EADDRNOTAVAIL")) {
                throw new sequelizeErrors.HostNotReachableError(error);
              }
              if (error.message.includes("getaddrinfo ENOTFOUND")) {
                throw new sequelizeErrors.HostNotFoundError(error);
              }
              if (error.message.includes("connect ECONNREFUSED")) {
                throw new sequelizeErrors.ConnectionRefusedError(error);
              }
              throw new sequelizeErrors.ConnectionError(error);
            case "ER_ACCESS_DENIED_ERROR":
            case "ELOGIN":
              throw new sequelizeErrors.AccessDeniedError(error);
            case "EINVAL":
              throw new sequelizeErrors.InvalidConnectionError(error);
            default:
              throw new sequelizeErrors.ConnectionError(error);
          }
        }
      }
      async disconnect(connection) {
        if (connection.closed) {
          return;
        }
        connection.queue.close();
        return new Promise((resolve) => {
          connection.on("end", resolve);
          connection.close();
          debug("connection closed");
        });
      }
      validate(connection) {
        return connection && (connection.loggedIn || connection.state.name === "LoggedIn");
      }
    };
    module.exports = ConnectionManager;
    module.exports.ConnectionManager = ConnectionManager;
    module.exports.default = ConnectionManager;
  }
});

// node_modules/sequelize/lib/dialects/mssql/query.js
var require_query3 = __commonJS({
  "node_modules/sequelize/lib/dialects/mssql/query.js"(exports, module) {
    "use strict";
    var AbstractQuery = require_query();
    var sequelizeErrors = require_errors();
    var parserStore = require_parserStore()("mssql");
    var _ = require_lodash();
    var { logger } = require_logger();
    var debug = logger.debugContext("sql:mssql");
    function getScale(aNum) {
      if (!Number.isFinite(aNum))
        return 0;
      let e = 1;
      while (Math.round(aNum * e) / e !== aNum)
        e *= 10;
      return Math.log10(e);
    }
    var Query = class extends AbstractQuery {
      getInsertIdField() {
        return "id";
      }
      getSQLTypeFromJsType(value, TYPES) {
        const paramType = { type: TYPES.VarChar, typeOptions: {} };
        paramType.type = TYPES.NVarChar;
        if (typeof value === "number") {
          if (Number.isInteger(value)) {
            if (value >= -2147483648 && value <= 2147483647) {
              paramType.type = TYPES.Int;
            } else {
              paramType.type = TYPES.BigInt;
            }
          } else {
            paramType.type = TYPES.Numeric;
            paramType.typeOptions = { precision: 30, scale: getScale(value) };
          }
        } else if (typeof value === "boolean") {
          paramType.type = TYPES.Bit;
        }
        if (Buffer.isBuffer(value)) {
          paramType.type = TYPES.VarBinary;
        }
        return paramType;
      }
      async _run(connection, sql, parameters, errStack) {
        this.sql = sql;
        const { options } = this;
        const complete = this._logQuery(sql, debug, parameters);
        const query = new Promise((resolve, reject) => {
          if (sql.startsWith("BEGIN TRANSACTION")) {
            return connection.beginTransaction((error) => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);
          }
          if (sql.startsWith("COMMIT TRANSACTION")) {
            return connection.commitTransaction((error) => error ? reject(error) : resolve([]));
          }
          if (sql.startsWith("ROLLBACK TRANSACTION")) {
            return connection.rollbackTransaction((error) => error ? reject(error) : resolve([]), options.transaction.name);
          }
          if (sql.startsWith("SAVE TRANSACTION")) {
            return connection.saveTransaction((error) => error ? reject(error) : resolve([]), options.transaction.name);
          }
          const rows2 = [];
          const request = new connection.lib.Request(sql, (err, rowCount2) => err ? reject(err) : resolve([rows2, rowCount2]));
          if (parameters) {
            _.forOwn(parameters, (value, key) => {
              const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);
              request.addParameter(key, paramType.type, value, paramType.typeOptions);
            });
          }
          request.on("row", (columns) => {
            rows2.push(columns);
          });
          connection.execSql(request);
        });
        let rows, rowCount;
        try {
          [rows, rowCount] = await query;
        } catch (err) {
          err.sql = sql;
          err.parameters = parameters;
          throw this.formatError(err, errStack);
        }
        complete();
        if (Array.isArray(rows)) {
          rows = rows.map((columns) => {
            const row = {};
            for (const column of columns) {
              const typeid = column.metadata.type.id;
              const parse = parserStore.get(typeid);
              let value = column.value;
              if (value !== null & !!parse) {
                value = parse(value);
              }
              row[column.metadata.colName] = value;
            }
            return row;
          });
        }
        return this.formatResults(rows, rowCount);
      }
      run(sql, parameters) {
        const errForStack = new Error();
        return this.connection.queue.enqueue(() => this._run(this.connection, sql, parameters, errForStack.stack));
      }
      static formatBindParameters(sql, values, dialect) {
        const bindParam = {};
        const replacementFunc = (match, key, values2) => {
          if (values2[key] !== void 0) {
            bindParam[key] = values2[key];
            return `@${key}`;
          }
          return void 0;
        };
        sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];
        return [sql, bindParam];
      }
      formatResults(data, rowCount) {
        if (this.isInsertQuery(data)) {
          this.handleInsertQuery(data);
          return [this.instance || data, rowCount];
        }
        if (this.isShowTablesQuery()) {
          return this.handleShowTablesQuery(data);
        }
        if (this.isDescribeQuery()) {
          const result = {};
          for (const _result of data) {
            if (_result.Default) {
              _result.Default = _result.Default.replace("('", "").replace("')", "").replace(/'/g, "");
            }
            result[_result.Name] = {
              type: _result.Type.toUpperCase(),
              allowNull: _result.IsNull === "YES" ? true : false,
              defaultValue: _result.Default,
              primaryKey: _result.Constraint === "PRIMARY KEY",
              autoIncrement: _result.IsIdentity === 1,
              comment: _result.Comment
            };
            if (result[_result.Name].type.includes("CHAR") && _result.Length) {
              if (_result.Length === -1) {
                result[_result.Name].type += "(MAX)";
              } else {
                result[_result.Name].type += `(${_result.Length})`;
              }
            }
          }
          return result;
        }
        if (this.isSelectQuery()) {
          return this.handleSelectQuery(data);
        }
        if (this.isShowIndexesQuery()) {
          return this.handleShowIndexesQuery(data);
        }
        if (this.isCallQuery()) {
          return data[0];
        }
        if (this.isBulkUpdateQuery()) {
          if (this.options.returning) {
            return this.handleSelectQuery(data);
          }
          return rowCount;
        }
        if (this.isBulkDeleteQuery()) {
          return data[0] ? data[0].AFFECTEDROWS : 0;
        }
        if (this.isVersionQuery()) {
          return data[0].version;
        }
        if (this.isForeignKeysQuery()) {
          return data;
        }
        if (this.isUpsertQuery()) {
          if (data && data.length === 0) {
            return [this.instance || data, false];
          }
          this.handleInsertQuery(data);
          return [this.instance || data, data[0].$action === "INSERT"];
        }
        if (this.isUpdateQuery()) {
          return [this.instance || data, rowCount];
        }
        if (this.isShowConstraintsQuery()) {
          return this.handleShowConstraintsQuery(data);
        }
        if (this.isRawQuery()) {
          return [data, rowCount];
        }
        return data;
      }
      handleShowTablesQuery(results) {
        return results.map((resultSet) => {
          return {
            tableName: resultSet.TABLE_NAME,
            schema: resultSet.TABLE_SCHEMA
          };
        });
      }
      handleShowConstraintsQuery(data) {
        return data.slice(1).map((result) => {
          const constraint = {};
          for (const key in result) {
            constraint[_.camelCase(key)] = result[key];
          }
          return constraint;
        });
      }
      formatError(err, errStack) {
        let match;
        match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \((.*)\).)?/);
        match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);
        if (match && match.length > 1) {
          let fields = {};
          const uniqueKey = this.model && this.model.uniqueKeys[match[1]];
          let message = "Validation error";
          if (uniqueKey && !!uniqueKey.msg) {
            message = uniqueKey.msg;
          }
          if (match[3]) {
            const values = match[3].split(",").map((part) => part.trim());
            if (uniqueKey) {
              fields = _.zipObject(uniqueKey.fields, values);
            } else {
              fields[match[1]] = match[3];
            }
          }
          const errors = [];
          _.forOwn(fields, (value, field) => {
            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), "unique violation", field, value, this.instance, "not_unique"));
          });
          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });
        }
        match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./) || err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint "(.*)". The conflict occurred in database "(.*)", table "(.*)", column '(.*)'./);
        if (match && match.length > 0) {
          return new sequelizeErrors.ForeignKeyConstraintError({
            fields: null,
            index: match[1],
            parent: err,
            stack: errStack
          });
        }
        match = err.message.match(/Could not drop constraint. See previous errors./);
        if (match && match.length > 0) {
          let constraint = err.sql.match(/(?:constraint|index) \[(.+?)\]/i);
          constraint = constraint ? constraint[1] : void 0;
          let table = err.sql.match(/table \[(.+?)\]/i);
          table = table ? table[1] : void 0;
          return new sequelizeErrors.UnknownConstraintError({
            message: match[1],
            constraint,
            table,
            parent: err,
            stack: errStack
          });
        }
        return new sequelizeErrors.DatabaseError(err, { stack: errStack });
      }
      isShowOrDescribeQuery() {
        let result = false;
        result = result || this.sql.toLowerCase().startsWith("select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'");
        result = result || this.sql.toLowerCase().startsWith("select tablename = t.name, name = ind.name,");
        result = result || this.sql.toLowerCase().startsWith("exec sys.sp_helpindex @objname");
        return result;
      }
      isShowIndexesQuery() {
        return this.sql.toLowerCase().startsWith("exec sys.sp_helpindex @objname");
      }
      handleShowIndexesQuery(data) {
        data = data.reduce((acc, item) => {
          if (!(item.index_name in acc)) {
            acc[item.index_name] = item;
            item.fields = [];
          }
          item.index_keys.split(",").forEach((column) => {
            let columnName = column.trim();
            if (columnName.includes("(-)")) {
              columnName = columnName.replace("(-)", "");
            }
            acc[item.index_name].fields.push({
              attribute: columnName,
              length: void 0,
              order: column.includes("(-)") ? "DESC" : "ASC",
              collate: void 0
            });
          });
          delete item.index_keys;
          return acc;
        }, {});
        return _.map(data, (item) => ({
          primary: item.index_name.toLowerCase().startsWith("pk"),
          fields: item.fields,
          name: item.index_name,
          tableName: void 0,
          unique: item.index_description.toLowerCase().includes("unique"),
          type: void 0
        }));
      }
      handleInsertQuery(results, metaData) {
        if (this.instance) {
          const autoIncrementAttribute = this.model.autoIncrementAttribute;
          let id = null;
          let autoIncrementAttributeAlias = null;
          if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0)
            autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;
          id = id || results && results[0][this.getInsertIdField()];
          id = id || metaData && metaData[this.getInsertIdField()];
          id = id || results && results[0][autoIncrementAttribute];
          id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];
          this.instance[autoIncrementAttribute] = id;
          if (this.instance.dataValues) {
            for (const key in results[0]) {
              if (Object.prototype.hasOwnProperty.call(results[0], key)) {
                const record = results[0][key];
                const attr = _.find(this.model.rawAttributes, (attribute) => attribute.fieldName === key || attribute.field === key);
                this.instance.dataValues[attr && attr.fieldName || key] = record;
              }
            }
          }
        }
      }
    };
    module.exports = Query;
    module.exports.Query = Query;
    module.exports.default = Query;
  }
});

// node_modules/sequelize/lib/dialects/mssql/query-generator.js
var require_query_generator4 = __commonJS({
  "node_modules/sequelize/lib/dialects/mssql/query-generator.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var _ = require_lodash();
    var Utils2 = require_utils();
    var DataTypes2 = require_data_types8();
    var TableHints2 = require_table_hints();
    var AbstractQueryGenerator = require_query_generator();
    var randomBytes = __require("crypto").randomBytes;
    var semver = require_semver2();
    var Op2 = require_operators();
    var throwMethodUndefined = function(methodName) {
      throw new Error(`The method "${methodName}" is not defined! Please add it to your sql dialect.`);
    };
    var MSSQLQueryGenerator = class extends AbstractQueryGenerator {
      createDatabaseQuery(databaseName, options) {
        options = __spreadValues({ collate: null }, options);
        const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : "";
        return [
          "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =",
          wrapSingleQuote(databaseName),
          ")",
          "BEGIN",
          "CREATE DATABASE",
          this.quoteIdentifier(databaseName),
          `${collation};`,
          "END;"
        ].join(" ");
      }
      dropDatabaseQuery(databaseName) {
        return [
          "IF EXISTS (SELECT * FROM sys.databases WHERE name =",
          wrapSingleQuote(databaseName),
          ")",
          "BEGIN",
          "DROP DATABASE",
          this.quoteIdentifier(databaseName),
          ";",
          "END;"
        ].join(" ");
      }
      createSchema(schema) {
        return [
          "IF NOT EXISTS (SELECT schema_name",
          "FROM information_schema.schemata",
          "WHERE schema_name =",
          wrapSingleQuote(schema),
          ")",
          "BEGIN",
          "EXEC sp_executesql N'CREATE SCHEMA",
          this.quoteIdentifier(schema),
          ";'",
          "END;"
        ].join(" ");
      }
      dropSchema(schema) {
        const quotedSchema = wrapSingleQuote(schema);
        return [
          "IF EXISTS (SELECT schema_name",
          "FROM information_schema.schemata",
          "WHERE schema_name =",
          quotedSchema,
          ")",
          "BEGIN",
          "DECLARE @id INT, @ms_sql NVARCHAR(2000);",
          "DECLARE @cascade TABLE (",
          "id INT NOT NULL IDENTITY PRIMARY KEY,",
          "ms_sql NVARCHAR(2000) NOT NULL );",
          "INSERT INTO @cascade ( ms_sql )",
          "SELECT CASE WHEN o.type IN ('F','PK')",
          "THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'",
          "ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END",
          "FROM sys.objects o",
          "JOIN sys.schemas s on o.schema_id = s.schema_id",
          "LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id",
          "WHERE o.type IN ('F', 'PK', 'U') AND s.name = ",
          quotedSchema,
          "ORDER BY o.type ASC;",
          "SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;",
          "WHILE @id IS NOT NULL",
          "BEGIN",
          "BEGIN TRY EXEC sp_executesql @ms_sql; END TRY",
          "BEGIN CATCH BREAK; THROW; END CATCH;",
          "DELETE FROM @cascade WHERE id = @id;",
          "SELECT @id = NULL, @ms_sql = NULL;",
          "SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;",
          "END",
          "EXEC sp_executesql N'DROP SCHEMA",
          this.quoteIdentifier(schema),
          ";'",
          "END;"
        ].join(" ");
      }
      showSchemasQuery() {
        return [
          'SELECT "name" as "schema_name" FROM sys.schemas as s',
          'WHERE "s"."name" NOT IN (',
          "'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'",
          ")",
          "AND",
          '"s"."name" NOT LIKE',
          "'db_%'"
        ].join(" ");
      }
      versionQuery() {
        return [
          "DECLARE @ms_ver NVARCHAR(20);",
          "SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));",
          "SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'"
        ].join(" ");
      }
      createTableQuery(tableName, attributes, options) {
        const primaryKeys = [], foreignKeys = {}, attributesClauseParts = [];
        let commentStr = "";
        for (const attr in attributes) {
          if (Object.prototype.hasOwnProperty.call(attributes, attr)) {
            let dataType = attributes[attr];
            let match;
            if (dataType.includes("COMMENT ")) {
              const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);
              const commentText = commentMatch[2].replace("COMMENT", "").trim();
              commentStr += this.commentTemplate(commentText, tableName, attr);
              dataType = commentMatch[1];
            }
            if (dataType.includes("PRIMARY KEY")) {
              primaryKeys.push(attr);
              if (dataType.includes("REFERENCES")) {
                match = dataType.match(/^(.+) (REFERENCES.*)$/);
                attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1].replace("PRIMARY KEY", "")}`);
                foreignKeys[attr] = match[2];
              } else {
                attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType.replace("PRIMARY KEY", "")}`);
              }
            } else if (dataType.includes("REFERENCES")) {
              match = dataType.match(/^(.+) (REFERENCES.*)$/);
              attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1]}`);
              foreignKeys[attr] = match[2];
            } else {
              attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType}`);
            }
          }
        }
        const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(", ");
        if (options.uniqueKeys) {
          _.each(options.uniqueKeys, (columns, indexName) => {
            if (columns.customIndex) {
              if (typeof indexName !== "string") {
                indexName = `uniq_${tableName}_${columns.fields.join("_")}`;
              }
              attributesClauseParts.push(`CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map((field) => this.quoteIdentifier(field)).join(", ")})`);
            }
          });
        }
        if (pkString.length > 0) {
          attributesClauseParts.push(`PRIMARY KEY (${pkString})`);
        }
        for (const fkey in foreignKeys) {
          if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {
            attributesClauseParts.push(`FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`);
          }
        }
        const quotedTableName = this.quoteTable(tableName);
        return Utils2.joinSQLFragments([
          `IF OBJECT_ID('${quotedTableName}', 'U') IS NULL`,
          `CREATE TABLE ${quotedTableName} (${attributesClauseParts.join(", ")})`,
          ";",
          commentStr
        ]);
      }
      describeTableQuery(tableName, schema) {
        let sql = [
          "SELECT",
          "c.COLUMN_NAME AS 'Name',",
          "c.DATA_TYPE AS 'Type',",
          "c.CHARACTER_MAXIMUM_LENGTH AS 'Length',",
          "c.IS_NULLABLE as 'IsNull',",
          "COLUMN_DEFAULT AS 'Default',",
          "pk.CONSTRAINT_TYPE AS 'Constraint',",
          "COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',",
          "CAST(prop.value AS NVARCHAR) AS 'Comment'",
          "FROM",
          "INFORMATION_SCHEMA.TABLES t",
          "INNER JOIN",
          "INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA",
          "LEFT JOIN (SELECT tc.table_schema, tc.table_name, ",
          "cu.column_name, tc.CONSTRAINT_TYPE ",
          "FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ",
          "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu ",
          "ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ",
          "and tc.constraint_name=cu.constraint_name ",
          "and tc.CONSTRAINT_TYPE='PRIMARY KEY') pk ",
          "ON pk.table_schema=c.table_schema ",
          "AND pk.table_name=c.table_name ",
          "AND pk.column_name=c.column_name ",
          "INNER JOIN sys.columns AS sc",
          "ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name",
          "LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id",
          "AND prop.minor_id = sc.column_id",
          "AND prop.name = 'MS_Description'",
          "WHERE t.TABLE_NAME =",
          wrapSingleQuote(tableName)
        ].join(" ");
        if (schema) {
          sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;
        }
        return sql;
      }
      renameTableQuery(before, after) {
        return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;
      }
      showTablesQuery() {
        return "SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';";
      }
      dropTableQuery(tableName) {
        const quoteTbl = this.quoteTable(tableName);
        return Utils2.joinSQLFragments([
          `IF OBJECT_ID('${quoteTbl}', 'U') IS NOT NULL`,
          "DROP TABLE",
          quoteTbl,
          ";"
        ]);
      }
      addColumnQuery(table, key, dataType) {
        dataType.field = key;
        let commentStr = "";
        if (dataType.comment && _.isString(dataType.comment)) {
          commentStr = this.commentTemplate(dataType.comment, table, key);
          delete dataType["comment"];
        }
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(table),
          "ADD",
          this.quoteIdentifier(key),
          this.attributeToSQL(dataType, { context: "addColumn" }),
          ";",
          commentStr
        ]);
      }
      commentTemplate(comment, table, column) {
        return ` EXEC sp_addextendedproperty @name = N'MS_Description', @value = ${this.escape(comment)}, @level0type = N'Schema', @level0name = 'dbo', @level1type = N'Table', @level1name = ${this.quoteIdentifier(table)}, @level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;
      }
      removeColumnQuery(tableName, attributeName) {
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(tableName),
          "DROP COLUMN",
          this.quoteIdentifier(attributeName),
          ";"
        ]);
      }
      changeColumnQuery(tableName, attributes) {
        const attrString = [], constraintString = [];
        let commentString = "";
        for (const attributeName in attributes) {
          const quotedAttrName = this.quoteIdentifier(attributeName);
          let definition = attributes[attributeName];
          if (definition.includes("COMMENT ")) {
            const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);
            const commentText = commentMatch[2].replace("COMMENT", "").trim();
            commentString += this.commentTemplate(commentText, tableName, attributeName);
            definition = commentMatch[1];
          }
          if (definition.includes("REFERENCES")) {
            constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, "")}`);
          } else {
            attrString.push(`${quotedAttrName} ${definition}`);
          }
        }
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(tableName),
          attrString.length && `ALTER COLUMN ${attrString.join(", ")}`,
          constraintString.length && `ADD ${constraintString.join(", ")}`,
          ";",
          commentString
        ]);
      }
      renameColumnQuery(tableName, attrBefore, attributes) {
        const newName = Object.keys(attributes)[0];
        return Utils2.joinSQLFragments([
          "EXEC sp_rename",
          `'${this.quoteTable(tableName)}.${attrBefore}',`,
          `'${newName}',`,
          "'COLUMN'",
          ";"
        ]);
      }
      bulkInsertQuery(tableName, attrValueHashes, options, attributes) {
        const quotedTable = this.quoteTable(tableName);
        options = options || {};
        attributes = attributes || {};
        const tuples = [];
        const allAttributes = [];
        const allQueries = [];
        let needIdentityInsertWrapper = false, outputFragment = "";
        if (options.returning) {
          const returnValues = this.generateReturnValues(attributes, options);
          outputFragment = returnValues.outputFragment;
        }
        const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;
        attrValueHashes.forEach((attrValueHash) => {
          const fields = Object.keys(attrValueHash);
          const firstAttr = attributes[fields[0]];
          if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {
            allQueries.push(emptyQuery);
            return;
          }
          _.forOwn(attrValueHash, (value, key) => {
            if (value !== null && attributes[key] && attributes[key].autoIncrement) {
              needIdentityInsertWrapper = true;
            }
            if (!allAttributes.includes(key)) {
              if (value === null && attributes[key] && attributes[key].autoIncrement)
                return;
              allAttributes.push(key);
            }
          });
        });
        if (allAttributes.length > 0) {
          attrValueHashes.forEach((attrValueHash) => {
            tuples.push(`(${allAttributes.map((key) => this.escape(attrValueHash[key])).join(",")})`);
          });
          const quotedAttributes = allAttributes.map((attr) => this.quoteIdentifier(attr)).join(",");
          allQueries.push((tupleStr) => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);
        }
        const commands = [];
        let offset = 0;
        const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;
        while (offset < Math.max(tuples.length, 1)) {
          const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));
          let generatedQuery = allQueries.map((v) => typeof v === "string" ? v : v(tupleStr)).join(";");
          if (needIdentityInsertWrapper) {
            generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;
          }
          commands.push(generatedQuery);
          offset += batch;
        }
        return commands.join(";");
      }
      updateQuery(tableName, attrValueHash, where2, options, attributes) {
        const sql = super.updateQuery(tableName, attrValueHash, where2, options, attributes);
        if (options.limit) {
          const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;
          sql.query = sql.query.replace("UPDATE", updateArgs);
        }
        return sql;
      }
      upsertQuery(tableName, insertValues, updateValues, where2, model) {
        const targetTableAlias = this.quoteTable(`${tableName}_target`);
        const sourceTableAlias = this.quoteTable(`${tableName}_source`);
        const primaryKeysAttrs = [];
        const identityAttrs = [];
        const uniqueAttrs = [];
        const tableNameQuoted = this.quoteTable(tableName);
        let needIdentityInsertWrapper = false;
        for (const key in model.rawAttributes) {
          if (model.rawAttributes[key].primaryKey) {
            primaryKeysAttrs.push(model.rawAttributes[key].field || key);
          }
          if (model.rawAttributes[key].unique) {
            uniqueAttrs.push(model.rawAttributes[key].field || key);
          }
          if (model.rawAttributes[key].autoIncrement) {
            identityAttrs.push(model.rawAttributes[key].field || key);
          }
        }
        for (const index of model._indexes) {
          if (index.unique && index.fields) {
            for (const field of index.fields) {
              const fieldName = typeof field === "string" ? field : field.name || field.attribute;
              if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {
                uniqueAttrs.push(fieldName);
              }
            }
          }
        }
        const updateKeys = Object.keys(updateValues);
        const insertKeys = Object.keys(insertValues);
        const insertKeysQuoted = insertKeys.map((key) => this.quoteIdentifier(key)).join(", ");
        const insertValuesEscaped = insertKeys.map((key) => this.escape(insertValues[key])).join(", ");
        const sourceTableQuery = `VALUES(${insertValuesEscaped})`;
        let joinCondition;
        identityAttrs.forEach((key) => {
          if (insertValues[key] && insertValues[key] !== null) {
            needIdentityInsertWrapper = true;
          }
        });
        const clauses = where2[Op2.or].filter((clause) => {
          let valid = true;
          for (const key in clause) {
            if (typeof clause[key] === "undefined" || clause[key] == null) {
              valid = false;
              break;
            }
          }
          return valid;
        });
        const getJoinSnippet = (array) => {
          return array.map((key) => {
            key = this.quoteIdentifier(key);
            return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;
          });
        };
        if (clauses.length === 0) {
          throw new Error("Primary Key or Unique key should be passed to upsert query");
        } else {
          for (const key in clauses) {
            const keys = Object.keys(clauses[key]);
            if (primaryKeysAttrs.includes(keys[0])) {
              joinCondition = getJoinSnippet(primaryKeysAttrs).join(" AND ");
              break;
            }
          }
          if (!joinCondition) {
            joinCondition = getJoinSnippet(uniqueAttrs).join(" AND ");
          }
        }
        const filteredUpdateClauses = updateKeys.filter((key) => !identityAttrs.includes(key)).map((key) => {
          const value = this.escape(updateValues[key]);
          key = this.quoteIdentifier(key);
          return `${targetTableAlias}.${key} = ${value}`;
        });
        const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses.join(", ")}` : "";
        const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;
        let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;
        query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;
        if (needIdentityInsertWrapper) {
          query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;
        }
        return query;
      }
      truncateTableQuery(tableName) {
        return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;
      }
      deleteQuery(tableName, where2, options = {}, model) {
        const table = this.quoteTable(tableName);
        const whereClause = this.getWhereConditions(where2, null, model, options);
        return Utils2.joinSQLFragments([
          "DELETE",
          options.limit && `TOP(${this.escape(options.limit)})`,
          "FROM",
          table,
          whereClause && `WHERE ${whereClause}`,
          ";",
          "SELECT @@ROWCOUNT AS AFFECTEDROWS",
          ";"
        ]);
      }
      showIndexesQuery(tableName) {
        return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;
      }
      showConstraintsQuery(tableName) {
        return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;
      }
      removeIndexQuery(tableName, indexNameOrAttributes) {
        let indexName = indexNameOrAttributes;
        if (typeof indexName !== "string") {
          indexName = Utils2.underscore(`${tableName}_${indexNameOrAttributes.join("_")}`);
        }
        return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;
      }
      attributeToSQL(attribute) {
        if (!_.isPlainObject(attribute)) {
          attribute = {
            type: attribute
          };
        }
        if (attribute.references) {
          if (attribute.Model && attribute.Model.tableName === attribute.references.model) {
            this.sequelize.log("MSSQL does not support self referencial constraints, we will remove it but we recommend restructuring your query");
            attribute.onDelete = "";
            attribute.onUpdate = "";
          }
        }
        let template;
        if (attribute.type instanceof DataTypes2.ENUM) {
          if (attribute.type.values && !attribute.values)
            attribute.values = attribute.type.values;
          template = attribute.type.toSql();
          template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map((value) => {
            return this.escape(value);
          }).join(", ")}))`;
          return template;
        }
        template = attribute.type.toString();
        if (attribute.allowNull === false) {
          template += " NOT NULL";
        } else if (!attribute.primaryKey && !Utils2.defaultValueSchemable(attribute.defaultValue)) {
          template += " NULL";
        }
        if (attribute.autoIncrement) {
          template += " IDENTITY(1,1)";
        }
        if (attribute.type !== "TEXT" && attribute.type._binary !== true && Utils2.defaultValueSchemable(attribute.defaultValue)) {
          template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;
        }
        if (attribute.unique === true) {
          template += " UNIQUE";
        }
        if (attribute.primaryKey) {
          template += " PRIMARY KEY";
        }
        if (attribute.references) {
          template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;
          if (attribute.references.key) {
            template += ` (${this.quoteIdentifier(attribute.references.key)})`;
          } else {
            template += ` (${this.quoteIdentifier("id")})`;
          }
          if (attribute.onDelete) {
            template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;
          }
          if (attribute.onUpdate) {
            template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;
          }
        }
        if (attribute.comment && typeof attribute.comment === "string") {
          template += ` COMMENT ${attribute.comment}`;
        }
        return template;
      }
      attributesToSQL(attributes, options) {
        const result = {}, existingConstraints = [];
        let key, attribute;
        for (key in attributes) {
          attribute = attributes[key];
          if (attribute.references) {
            if (existingConstraints.includes(attribute.references.model.toString())) {
              attribute.onDelete = "";
              attribute.onUpdate = "";
            } else {
              existingConstraints.push(attribute.references.model.toString());
              attribute.onUpdate = "";
            }
          }
          if (key && !attribute.field)
            attribute.field = key;
          result[attribute.field || key] = this.attributeToSQL(attribute, options);
        }
        return result;
      }
      createTrigger() {
        throwMethodUndefined("createTrigger");
      }
      dropTrigger() {
        throwMethodUndefined("dropTrigger");
      }
      renameTrigger() {
        throwMethodUndefined("renameTrigger");
      }
      createFunction() {
        throwMethodUndefined("createFunction");
      }
      dropFunction() {
        throwMethodUndefined("dropFunction");
      }
      renameFunction() {
        throwMethodUndefined("renameFunction");
      }
      _getForeignKeysQueryPrefix(catalogName) {
        return `${"SELECT constraint_name = OBJ.NAME, constraintName = OBJ.NAME, "}${catalogName ? `constraintCatalog = '${catalogName}', ` : ""}constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), tableName = TB.NAME, tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${catalogName ? `tableCatalog = '${catalogName}', ` : ""}columnName = COL.NAME, referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${catalogName ? `referencedCatalog = '${catalogName}', ` : ""}referencedTableName = RTB.NAME, referencedColumnName = RCOL.NAME FROM sys.foreign_key_columns FKC INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID`;
      }
      getForeignKeysQuery(table, catalogName) {
        const tableName = table.tableName || table;
        let sql = `${this._getForeignKeysQueryPrefix(catalogName)} WHERE TB.NAME =${wrapSingleQuote(tableName)}`;
        if (table.schema) {
          sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;
        }
        return sql;
      }
      getForeignKeyQuery(table, attributeName) {
        const tableName = table.tableName || table;
        return Utils2.joinSQLFragments([
          this._getForeignKeysQueryPrefix(),
          "WHERE",
          `TB.NAME =${wrapSingleQuote(tableName)}`,
          "AND",
          `COL.NAME =${wrapSingleQuote(attributeName)}`,
          table.schema && `AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`
        ]);
      }
      getPrimaryKeyConstraintQuery(table, attributeName) {
        const tableName = wrapSingleQuote(table.tableName || table);
        return Utils2.joinSQLFragments([
          "SELECT K.TABLE_NAME AS tableName,",
          "K.COLUMN_NAME AS columnName,",
          "K.CONSTRAINT_NAME AS constraintName",
          "FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C",
          "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K",
          "ON C.TABLE_NAME = K.TABLE_NAME",
          "AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG",
          "AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA",
          "AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME",
          "WHERE C.CONSTRAINT_TYPE = 'PRIMARY KEY'",
          `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`,
          `AND K.TABLE_NAME = ${tableName}`,
          ";"
        ]);
      }
      dropForeignKeyQuery(tableName, foreignKey) {
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(tableName),
          "DROP",
          this.quoteIdentifier(foreignKey)
        ]);
      }
      getDefaultConstraintQuery(tableName, attributeName) {
        const quotedTable = this.quoteTable(tableName);
        return Utils2.joinSQLFragments([
          "SELECT name FROM sys.default_constraints",
          `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U')`,
          `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}')`,
          `AND object_id = OBJECT_ID('${quotedTable}', 'U'))`,
          ";"
        ]);
      }
      dropConstraintQuery(tableName, constraintName) {
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(tableName),
          "DROP CONSTRAINT",
          this.quoteIdentifier(constraintName),
          ";"
        ]);
      }
      setIsolationLevelQuery() {
      }
      generateTransactionId() {
        return randomBytes(10).toString("hex");
      }
      startTransactionQuery(transaction) {
        if (transaction.parent) {
          return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;
        }
        return "BEGIN TRANSACTION;";
      }
      commitTransactionQuery(transaction) {
        if (transaction.parent) {
          return;
        }
        return "COMMIT TRANSACTION;";
      }
      rollbackTransactionQuery(transaction) {
        if (transaction.parent) {
          return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;
        }
        return "ROLLBACK TRANSACTION;";
      }
      selectFromTableFragment(options, model, attributes, tables, mainTableAs, where2) {
        this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });
        const dbVersion = this.sequelize.options.databaseVersion;
        const isSQLServer2008 = semver.valid(dbVersion) && semver.lt(dbVersion, "11.0.0");
        if (isSQLServer2008 && options.offset) {
          const offset = options.offset || 0;
          const isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;
          let orders = { mainQueryOrder: [] };
          if (options.order) {
            orders = this.getQueryOrders(options, model, isSubQuery);
          }
          if (orders.mainQueryOrder.length === 0) {
            orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));
          }
          const tmpTable = mainTableAs || "OffsetTable";
          if (options.include) {
            const subQuery = options.subQuery === void 0 ? options.limit && options.hasMultiAssociation : options.subQuery;
            const mainTable = {
              name: mainTableAs,
              quotedName: null,
              as: null,
              model
            };
            const topLevelInfo = {
              names: mainTable,
              options,
              subQuery
            };
            let mainJoinQueries = [];
            for (const include of options.include) {
              if (include.separate) {
                continue;
              }
              const joinQueries = this.generateInclude(include, { externalAs: mainTableAs, internalAs: mainTableAs }, topLevelInfo);
              mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);
            }
            return Utils2.joinSQLFragments([
              "SELECT TOP 100 PERCENT",
              attributes.join(", "),
              "FROM (",
              [
                "SELECT",
                options.limit && `TOP ${options.limit}`,
                "* FROM (",
                [
                  "SELECT ROW_NUMBER() OVER (",
                  [
                    "ORDER BY",
                    orders.mainQueryOrder.join(", ")
                  ],
                  `) as row_num, ${tmpTable}.* FROM (`,
                  [
                    "SELECT DISTINCT",
                    `${tmpTable}.* FROM ${tables} AS ${tmpTable}`,
                    mainJoinQueries,
                    where2 && `WHERE ${where2}`
                  ],
                  `) AS ${tmpTable}`
                ],
                `) AS ${tmpTable} WHERE row_num > ${offset}`
              ],
              `) AS ${tmpTable}`
            ]);
          }
          return Utils2.joinSQLFragments([
            "SELECT TOP 100 PERCENT",
            attributes.join(", "),
            "FROM (",
            [
              "SELECT",
              options.limit && `TOP ${options.limit}`,
              "* FROM (",
              [
                "SELECT ROW_NUMBER() OVER (",
                [
                  "ORDER BY",
                  orders.mainQueryOrder.join(", ")
                ],
                `) as row_num, * FROM ${tables} AS ${tmpTable}`,
                where2 && `WHERE ${where2}`
              ],
              `) AS ${tmpTable} WHERE row_num > ${offset}`
            ],
            `) AS ${tmpTable}`
          ]);
        }
        return Utils2.joinSQLFragments([
          "SELECT",
          isSQLServer2008 && options.limit && `TOP ${options.limit}`,
          attributes.join(", "),
          `FROM ${tables}`,
          mainTableAs && `AS ${mainTableAs}`,
          options.tableHint && TableHints2[options.tableHint] && `WITH (${TableHints2[options.tableHint]})`
        ]);
      }
      addLimitAndOffset(options, model) {
        if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, "11.0.0")) {
          return "";
        }
        const offset = options.offset || 0;
        const isSubQuery = options.subQuery === void 0 ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation : options.subQuery;
        let fragment = "";
        let orders = {};
        if (options.order) {
          orders = this.getQueryOrders(options, model, isSubQuery);
        }
        if (options.limit || options.offset) {
          if (!options.order || options.order.length === 0 || options.include && orders.subQueryOrder.length === 0) {
            const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(model.primaryKeyField)}`;
            if (!options.order || !options.order.length) {
              fragment += ` ORDER BY ${tablePkFragment}`;
            } else {
              const orderFieldNames = _.map(options.order, (order) => order[0]);
              const primaryKeyFieldAlreadyPresent = _.includes(orderFieldNames, model.primaryKeyField);
              if (!primaryKeyFieldAlreadyPresent) {
                fragment += options.order && !isSubQuery ? ", " : " ORDER BY ";
                fragment += tablePkFragment;
              }
            }
          }
          if (options.offset || options.limit) {
            fragment += ` OFFSET ${this.escape(offset)} ROWS`;
          }
          if (options.limit) {
            fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;
          }
        }
        return fragment;
      }
      booleanValue(value) {
        return value ? 1 : 0;
      }
      quoteIdentifier(identifier2, force) {
        return `[${identifier2.replace(/[[\]']+/g, "")}]`;
      }
    };
    function wrapSingleQuote(identifier2) {
      return Utils2.addTicks(Utils2.removeTicks(identifier2, "'"), "'");
    }
    module.exports = MSSQLQueryGenerator;
  }
});

// node_modules/sequelize/lib/dialects/mssql/query-interface.js
var require_query_interface3 = __commonJS({
  "node_modules/sequelize/lib/dialects/mssql/query-interface.js"(exports) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var _ = require_lodash();
    var Utils2 = require_utils();
    var QueryTypes2 = require_query_types();
    var Op2 = require_operators();
    var { QueryInterface: QueryInterface2 } = require_query_interface();
    var MSSqlQueryInterface = class extends QueryInterface2 {
      async removeColumn(tableName, attributeName, options) {
        options = __spreadValues({ raw: true }, options || {});
        const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);
        const [results0] = await this.sequelize.query(findConstraintSql, options);
        if (results0.length) {
          const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);
          await this.sequelize.query(dropConstraintSql, options);
        }
        const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);
        const [results] = await this.sequelize.query(findForeignKeySql, options);
        if (results.length) {
          const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);
          await this.sequelize.query(dropForeignKeySql, options);
        }
        const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);
        const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);
        if (result.length) {
          const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);
          await this.sequelize.query(dropConstraintSql, options);
        }
        const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);
        return this.sequelize.query(removeSql, options);
      }
      async upsert(tableName, insertValues, updateValues, where2, options) {
        const model = options.model;
        const wheres = [];
        options = __spreadValues({}, options);
        if (!Utils2.isWhereEmpty(where2)) {
          wheres.push(where2);
        }
        let indexes = Object.values(model.uniqueKeys).map((item) => item.fields);
        indexes = indexes.concat(Object.values(model._indexes).filter((item) => item.unique).map((item) => item.fields));
        const attributes = Object.keys(insertValues);
        for (const index of indexes) {
          if (_.intersection(attributes, index).length === index.length) {
            where2 = {};
            for (const field of index) {
              where2[field] = insertValues[field];
            }
            wheres.push(where2);
          }
        }
        where2 = { [Op2.or]: wheres };
        options.type = QueryTypes2.UPSERT;
        options.raw = true;
        const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where2, model, options);
        return await this.sequelize.query(sql, options);
      }
    };
    exports.MSSqlQueryInterface = MSSqlQueryInterface;
  }
});

// node_modules/sequelize/lib/dialects/mssql/index.js
var require_mssql = __commonJS({
  "node_modules/sequelize/lib/dialects/mssql/index.js"(exports, module) {
    "use strict";
    var _ = require_lodash();
    var AbstractDialect = require_abstract();
    var ConnectionManager = require_connection_manager3();
    var Query = require_query3();
    var QueryGenerator = require_query_generator4();
    var DataTypes2 = require_data_types8().mssql;
    var { MSSqlQueryInterface } = require_query_interface3();
    var MssqlDialect = class extends AbstractDialect {
      constructor(sequelize) {
        super();
        this.sequelize = sequelize;
        this.connectionManager = new ConnectionManager(this, sequelize);
        this.queryGenerator = new QueryGenerator({
          _dialect: this,
          sequelize
        });
        this.queryInterface = new MSSqlQueryInterface(sequelize, this.queryGenerator);
      }
    };
    MssqlDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {
      DEFAULT: true,
      "DEFAULT VALUES": true,
      "LIMIT ON UPDATE": true,
      "ORDER NULLS": false,
      lock: false,
      transactions: true,
      migrations: false,
      returnValues: {
        output: true
      },
      schemas: true,
      autoIncrement: {
        identityInsert: true,
        defaultValue: false,
        update: false
      },
      constraints: {
        restrict: false,
        default: true
      },
      index: {
        collate: false,
        length: false,
        parser: false,
        type: true,
        using: false,
        where: true
      },
      NUMERIC: true,
      tmpTableTrigger: true
    });
    MssqlDialect.prototype.defaultVersion = "12.0.2000";
    MssqlDialect.prototype.Query = Query;
    MssqlDialect.prototype.name = "mssql";
    MssqlDialect.prototype.TICK_CHAR = '"';
    MssqlDialect.prototype.TICK_CHAR_LEFT = "[";
    MssqlDialect.prototype.TICK_CHAR_RIGHT = "]";
    MssqlDialect.prototype.DataTypes = DataTypes2;
    module.exports = MssqlDialect;
  }
});

// node_modules/sequelize/lib/dialects/mysql/connection-manager.js
var require_connection_manager4 = __commonJS({
  "node_modules/sequelize/lib/dialects/mysql/connection-manager.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var AbstractConnectionManager = require_connection_manager();
    var SequelizeErrors = require_errors();
    var { logger } = require_logger();
    var DataTypes2 = require_data_types8().mysql;
    var momentTz = require_moment_timezone2();
    var debug = logger.debugContext("connection:mysql");
    var parserStore = require_parserStore()("mysql");
    var { promisify } = __require("util");
    var ConnectionManager = class extends AbstractConnectionManager {
      constructor(dialect, sequelize) {
        sequelize.config.port = sequelize.config.port || 3306;
        super(dialect, sequelize);
        this.lib = this._loadDialectModule("mysql2");
        this.refreshTypeParser(DataTypes2);
      }
      _refreshTypeParser(dataType) {
        parserStore.refresh(dataType);
      }
      _clearTypeParser() {
        parserStore.clear();
      }
      static _typecast(field, next) {
        if (parserStore.get(field.type)) {
          return parserStore.get(field.type)(field, this.sequelize.options, next);
        }
        return next();
      }
      async connect(config) {
        const connectionConfig = __spreadValues({
          host: config.host,
          port: config.port,
          user: config.username,
          flags: "-FOUND_ROWS",
          password: config.password,
          database: config.database,
          timezone: this.sequelize.options.timezone,
          typeCast: ConnectionManager._typecast.bind(this),
          bigNumberStrings: false,
          supportBigNumbers: true
        }, config.dialectOptions);
        try {
          const connection = await new Promise((resolve, reject) => {
            const connection2 = this.lib.createConnection(connectionConfig);
            const errorHandler = (e) => {
              connection2.removeListener("connect", connectHandler);
              connection2.removeListener("error", connectHandler);
              reject(e);
            };
            const connectHandler = () => {
              connection2.removeListener("error", errorHandler);
              resolve(connection2);
            };
            connection2.on("error", errorHandler);
            connection2.once("connect", connectHandler);
          });
          debug("connection acquired");
          connection.on("error", (error) => {
            switch (error.code) {
              case "ESOCKET":
              case "ECONNRESET":
              case "EPIPE":
              case "PROTOCOL_CONNECTION_LOST":
                this.pool.destroy(connection);
            }
          });
          if (!this.sequelize.config.keepDefaultTimezone) {
            let tzOffset = this.sequelize.options.timezone;
            tzOffset = /\//.test(tzOffset) ? momentTz.tz(tzOffset).format("Z") : tzOffset;
            await promisify((cb) => connection.query(`SET time_zone = '${tzOffset}'`, cb))();
          }
          return connection;
        } catch (err) {
          switch (err.code) {
            case "ECONNREFUSED":
              throw new SequelizeErrors.ConnectionRefusedError(err);
            case "ER_ACCESS_DENIED_ERROR":
              throw new SequelizeErrors.AccessDeniedError(err);
            case "ENOTFOUND":
              throw new SequelizeErrors.HostNotFoundError(err);
            case "EHOSTUNREACH":
              throw new SequelizeErrors.HostNotReachableError(err);
            case "EINVAL":
              throw new SequelizeErrors.InvalidConnectionError(err);
            default:
              throw new SequelizeErrors.ConnectionError(err);
          }
        }
      }
      async disconnect(connection) {
        if (connection._closing) {
          debug("connection tried to disconnect but was already at CLOSED state");
          return;
        }
        return await promisify((callback) => connection.end(callback))();
      }
      validate(connection) {
        return connection && !connection._fatalError && !connection._protocolError && !connection._closing && !connection.stream.destroyed;
      }
    };
    module.exports = ConnectionManager;
    module.exports.ConnectionManager = ConnectionManager;
    module.exports.default = ConnectionManager;
  }
});

// node_modules/sequelize/lib/dialects/mysql/query.js
var require_query4 = __commonJS({
  "node_modules/sequelize/lib/dialects/mysql/query.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var AbstractQuery = require_query();
    var sequelizeErrors = require_errors();
    var _ = require_lodash();
    var { logger } = require_logger();
    var ER_DUP_ENTRY = 1062;
    var ER_DEADLOCK = 1213;
    var ER_ROW_IS_REFERENCED = 1451;
    var ER_NO_REFERENCED_ROW = 1452;
    var debug = logger.debugContext("sql:mysql");
    var Query = class extends AbstractQuery {
      constructor(connection, sequelize, options) {
        super(connection, sequelize, __spreadValues({ showWarnings: false }, options));
      }
      static formatBindParameters(sql, values, dialect) {
        const bindParam = [];
        const replacementFunc = (match, key, values_) => {
          if (values_[key] !== void 0) {
            bindParam.push(values_[key]);
            return "?";
          }
          return void 0;
        };
        sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];
        return [sql, bindParam.length > 0 ? bindParam : void 0];
      }
      async run(sql, parameters) {
        this.sql = sql;
        const { connection, options } = this;
        const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;
        const complete = this._logQuery(sql, debug, parameters);
        if (parameters) {
          debug("parameters(%j)", parameters);
        }
        let results;
        const errForStack = new Error();
        try {
          if (parameters && parameters.length) {
            results = await new Promise((resolve, reject) => {
              connection.execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);
            });
          } else {
            results = await new Promise((resolve, reject) => {
              connection.query({ sql }, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);
            });
          }
        } catch (error) {
          if (options.transaction && error.errno === ER_DEADLOCK) {
            try {
              await options.transaction.rollback();
            } catch (error_) {
            }
            options.transaction.finished = "rollback";
          }
          error.sql = sql;
          error.parameters = parameters;
          throw this.formatError(error, errForStack.stack);
        } finally {
          complete();
        }
        if (showWarnings && results && results.warningStatus > 0) {
          await this.logWarnings(results);
        }
        return this.formatResults(results);
      }
      formatResults(data) {
        let result = this.instance;
        if (this.isInsertQuery(data)) {
          this.handleInsertQuery(data);
          if (!this.instance) {
            if (data.constructor.name === "ResultSetHeader" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {
              const startId = data[this.getInsertIdField()];
              result = [];
              for (let i = startId; i < startId + data.affectedRows; i++) {
                result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });
              }
            } else {
              result = data[this.getInsertIdField()];
            }
          }
        }
        if (this.isSelectQuery()) {
          return this.handleSelectQuery(data);
        }
        if (this.isShowTablesQuery()) {
          return this.handleShowTablesQuery(data);
        }
        if (this.isDescribeQuery()) {
          result = {};
          for (const _result of data) {
            const enumRegex = /^enum/i;
            result[_result.Field] = {
              type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, "ENUM") : _result.Type.toUpperCase(),
              allowNull: _result.Null === "YES",
              defaultValue: _result.Default,
              primaryKey: _result.Key === "PRI",
              autoIncrement: Object.prototype.hasOwnProperty.call(_result, "Extra") && _result.Extra.toLowerCase() === "auto_increment",
              comment: _result.Comment ? _result.Comment : null
            };
          }
          return result;
        }
        if (this.isShowIndexesQuery()) {
          return this.handleShowIndexesQuery(data);
        }
        if (this.isCallQuery()) {
          return data[0];
        }
        if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {
          return data.affectedRows;
        }
        if (this.isVersionQuery()) {
          return data[0].version;
        }
        if (this.isForeignKeysQuery()) {
          return data;
        }
        if (this.isUpsertQuery()) {
          return [result, data.affectedRows === 1];
        }
        if (this.isInsertQuery() || this.isUpdateQuery()) {
          return [result, data.affectedRows];
        }
        if (this.isShowConstraintsQuery()) {
          return data;
        }
        if (this.isRawQuery()) {
          return [data, data];
        }
        return result;
      }
      async logWarnings(results) {
        const warningResults = await this.run("SHOW WARNINGS");
        const warningMessage = `MySQL Warnings (${this.connection.uuid || "default"}): `;
        const messages = [];
        for (const _warningRow of warningResults) {
          if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== "function") {
            continue;
          }
          for (const _warningResult of _warningRow) {
            if (Object.prototype.hasOwnProperty.call(_warningResult, "Message")) {
              messages.push(_warningResult.Message);
            } else {
              for (const _objectKey of _warningResult.keys()) {
                messages.push([_objectKey, _warningResult[_objectKey]].join(": "));
              }
            }
          }
        }
        this.sequelize.log(warningMessage + messages.join("; "), this.options);
        return results;
      }
      formatError(err, errStack) {
        const errCode = err.errno || err.code;
        switch (errCode) {
          case ER_DUP_ENTRY: {
            const match = err.message.match(/Duplicate entry '([\s\S]*)' for key '?((.|\s)*?)'?$/);
            let fields = {};
            let message = "Validation error";
            const values = match ? match[1].split("-") : void 0;
            const fieldKey = match ? match[2].split(".").pop() : void 0;
            const fieldVal = match ? match[1] : void 0;
            const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];
            if (uniqueKey) {
              if (uniqueKey.msg)
                message = uniqueKey.msg;
              fields = _.zipObject(uniqueKey.fields, values);
            } else {
              fields[fieldKey] = fieldVal;
            }
            const errors = [];
            _.forOwn(fields, (value, field) => {
              errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), "unique violation", field, value, this.instance, "not_unique"));
            });
            return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });
          }
          case ER_ROW_IS_REFERENCED:
          case ER_NO_REFERENCED_ROW: {
            const match = err.message.match(/CONSTRAINT ([`"])(.*)\1 FOREIGN KEY \(\1(.*)\1\) REFERENCES \1(.*)\1 \(\1(.*)\1\)/);
            const quoteChar = match ? match[1] : "`";
            const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;
            return new sequelizeErrors.ForeignKeyConstraintError({
              reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? "parent" : "child",
              table: match ? match[4] : void 0,
              fields,
              value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,
              index: match ? match[2] : void 0,
              parent: err,
              stack: errStack
            });
          }
          default:
            return new sequelizeErrors.DatabaseError(err, { stack: errStack });
        }
      }
      handleShowIndexesQuery(data) {
        data = data.reduce((acc, item) => {
          if (!(item.Key_name in acc)) {
            acc[item.Key_name] = item;
            item.fields = [];
          }
          acc[item.Key_name].fields[item.Seq_in_index - 1] = {
            attribute: item.Column_name,
            length: item.Sub_part || void 0,
            order: item.Collation === "A" ? "ASC" : void 0
          };
          delete item.column_name;
          return acc;
        }, {});
        return _.map(data, (item) => ({
          primary: item.Key_name === "PRIMARY",
          fields: item.fields,
          name: item.Key_name,
          tableName: item.Table,
          unique: item.Non_unique !== 1,
          type: item.Index_type
        }));
      }
    };
    module.exports = Query;
    module.exports.Query = Query;
    module.exports.default = Query;
  }
});

// node_modules/sequelize/lib/dialects/mysql/index.js
var require_mysql = __commonJS({
  "node_modules/sequelize/lib/dialects/mysql/index.js"(exports, module) {
    "use strict";
    var _ = require_lodash();
    var AbstractDialect = require_abstract();
    var ConnectionManager = require_connection_manager4();
    var Query = require_query4();
    var QueryGenerator = require_query_generator2();
    var DataTypes2 = require_data_types8().mysql;
    var { MySQLQueryInterface } = require_query_interface2();
    var MysqlDialect = class extends AbstractDialect {
      constructor(sequelize) {
        super();
        this.sequelize = sequelize;
        this.connectionManager = new ConnectionManager(this, sequelize);
        this.queryGenerator = new QueryGenerator({
          _dialect: this,
          sequelize
        });
        this.queryInterface = new MySQLQueryInterface(sequelize, this.queryGenerator);
      }
    };
    MysqlDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {
      "VALUES ()": true,
      "LIMIT ON UPDATE": true,
      lock: true,
      forShare: "LOCK IN SHARE MODE",
      settingIsolationLevelDuringTransaction: false,
      inserts: {
        ignoreDuplicates: " IGNORE",
        updateOnDuplicate: " ON DUPLICATE KEY UPDATE"
      },
      index: {
        collate: false,
        length: true,
        parser: true,
        type: true,
        using: 1
      },
      constraints: {
        dropConstraint: false,
        check: false
      },
      indexViaAlter: true,
      indexHints: true,
      NUMERIC: true,
      GEOMETRY: true,
      JSON: true,
      REGEXP: true
    });
    MysqlDialect.prototype.defaultVersion = "5.7.0";
    MysqlDialect.prototype.Query = Query;
    MysqlDialect.prototype.QueryGenerator = QueryGenerator;
    MysqlDialect.prototype.DataTypes = DataTypes2;
    MysqlDialect.prototype.name = "mysql";
    MysqlDialect.prototype.TICK_CHAR = "`";
    MysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;
    MysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;
    module.exports = MysqlDialect;
  }
});

// node_modules/sequelize/lib/dialects/postgres/connection-manager.js
var require_connection_manager5 = __commonJS({
  "node_modules/sequelize/lib/dialects/postgres/connection-manager.js"(exports, module) {
    "use strict";
    var _ = require_lodash();
    var AbstractConnectionManager = require_connection_manager();
    var { logger } = require_logger();
    var debug = logger.debugContext("connection:pg");
    var sequelizeErrors = require_errors();
    var semver = require_semver2();
    var dataTypes = require_data_types8();
    var momentTz = require_moment_timezone2();
    var { promisify } = __require("util");
    var ConnectionManager = class extends AbstractConnectionManager {
      constructor(dialect, sequelize) {
        sequelize.config.port = sequelize.config.port || 5432;
        super(dialect, sequelize);
        const pgLib = this._loadDialectModule("pg");
        this.lib = this.sequelize.config.native ? pgLib.native : pgLib;
        this._clearDynamicOIDs();
        this._clearTypeParser();
        this.refreshTypeParser(dataTypes.postgres);
      }
      _refreshTypeParser(dataType) {
        const arrayParserBuilder = (parser2) => {
          return (value) => this.lib.types.arrayParser.create(value, parser2).parse();
        };
        const rangeParserBuilder = (parser2) => {
          return (value) => dataType.parse(value, { parser: parser2 });
        };
        if (dataType.key.toLowerCase() === "range") {
          for (const name in this.nameOidMap) {
            const entry = this.nameOidMap[name];
            if (!entry.rangeOid)
              continue;
            const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));
            const arrayRangeParser = arrayParserBuilder(rangeParser);
            this.oidParserMap.set(entry.rangeOid, rangeParser);
            if (!entry.arrayRangeOid)
              continue;
            this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);
          }
          return;
        }
        const parser = (value) => dataType.parse(value);
        const arrayParser = arrayParserBuilder(parser);
        if (dataType.key.toLowerCase() === "enum") {
          this.enumOids.oids.forEach((oid) => {
            this.oidParserMap.set(oid, parser);
          });
          this.enumOids.arrayOids.forEach((arrayOid) => {
            this.oidParserMap.set(arrayOid, arrayParser);
          });
          return;
        }
        dataType.types.postgres.forEach((name) => {
          if (!this.nameOidMap[name])
            return;
          this.oidParserMap.set(this.nameOidMap[name].oid, parser);
          if (!this.nameOidMap[name].arrayOid)
            return;
          this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);
        });
      }
      _clearTypeParser() {
        this.oidParserMap = /* @__PURE__ */ new Map();
      }
      getTypeParser(oid, ...args) {
        if (this.oidParserMap.get(oid))
          return this.oidParserMap.get(oid);
        return this.lib.types.getTypeParser(oid, ...args);
      }
      async connect(config) {
        config.user = config.username;
        const connectionConfig = _.pick(config, [
          "user",
          "password",
          "host",
          "database",
          "port"
        ]);
        connectionConfig.types = {
          getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)
        };
        if (config.dialectOptions) {
          _.merge(connectionConfig, _.pick(config.dialectOptions, [
            "application_name",
            "ssl",
            "client_encoding",
            "binary",
            "keepAlive",
            "statement_timeout",
            "query_timeout",
            "idle_in_transaction_session_timeout",
            "options"
          ]));
        }
        const connection = await new Promise((resolve, reject) => {
          let responded = false;
          const connection2 = new this.lib.Client(connectionConfig);
          const parameterHandler = (message) => {
            switch (message.parameterName) {
              case "server_version":
                if (this.sequelize.options.databaseVersion === 0) {
                  const version = semver.coerce(message.parameterValue).version;
                  this.sequelize.options.databaseVersion = semver.valid(version) ? version : this.dialect.defaultVersion;
                }
                break;
              case "standard_conforming_strings":
                connection2["standard_conforming_strings"] = message.parameterValue;
                break;
            }
          };
          const endHandler = () => {
            debug("connection timeout");
            if (!responded) {
              reject(new sequelizeErrors.ConnectionTimedOutError(new Error("Connection timed out")));
            }
          };
          connection2.once("end", endHandler);
          if (!this.sequelize.config.native) {
            connection2.connection.on("parameterStatus", parameterHandler);
          }
          connection2.connect((err) => {
            responded = true;
            if (!this.sequelize.config.native) {
              connection2.connection.removeListener("parameterStatus", parameterHandler);
            }
            if (err) {
              if (err.code) {
                switch (err.code) {
                  case "ECONNREFUSED":
                    reject(new sequelizeErrors.ConnectionRefusedError(err));
                    break;
                  case "ENOTFOUND":
                    reject(new sequelizeErrors.HostNotFoundError(err));
                    break;
                  case "EHOSTUNREACH":
                    reject(new sequelizeErrors.HostNotReachableError(err));
                    break;
                  case "EINVAL":
                    reject(new sequelizeErrors.InvalidConnectionError(err));
                    break;
                  default:
                    reject(new sequelizeErrors.ConnectionError(err));
                    break;
                }
              } else {
                reject(new sequelizeErrors.ConnectionError(err));
              }
            } else {
              debug("connection acquired");
              connection2.removeListener("end", endHandler);
              resolve(connection2);
            }
          });
        });
        let query = "";
        if (this.sequelize.options.standardConformingStrings !== false && connection["standard_conforming_strings"] !== "on") {
          query += "SET standard_conforming_strings=on;";
        }
        if (this.sequelize.options.clientMinMessages !== void 0) {
          console.warn('Usage of "options.clientMinMessages" is deprecated and will be removed in v7.');
          console.warn('Please use the sequelize option "dialectOptions.clientMinMessages" instead.');
        }
        if (!(config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === "ignore" || this.sequelize.options.clientMinMessages === false)) {
          const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || "warning";
          query += `SET client_min_messages TO ${clientMinMessages};`;
        }
        if (!this.sequelize.config.keepDefaultTimezone) {
          const isZone = !!momentTz.tz.zone(this.sequelize.options.timezone);
          if (isZone) {
            query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;
          } else {
            query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;
          }
        }
        if (query) {
          await connection.query(query);
        }
        if (Object.keys(this.nameOidMap).length === 0 && this.enumOids.oids.length === 0 && this.enumOids.arrayOids.length === 0) {
          await this._refreshDynamicOIDs(connection);
        }
        connection.on("error", (error) => {
          connection._invalid = true;
          debug(`connection error ${error.code || error.message}`);
          this.pool.destroy(connection);
        });
        return connection;
      }
      async disconnect(connection) {
        if (connection._ending) {
          debug("connection tried to disconnect but was already at ENDING state");
          return;
        }
        return await promisify((callback) => connection.end(callback))();
      }
      validate(connection) {
        return !connection._invalid && !connection._ending;
      }
      async _refreshDynamicOIDs(connection) {
        const databaseVersion = this.sequelize.options.databaseVersion;
        const supportedVersion = "8.3.0";
        if ((databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {
          return;
        }
        const results = await (connection || this.sequelize).query("WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));");
        let result = Array.isArray(results) ? results.pop() : results;
        if (Array.isArray(result)) {
          if (result[0].command === "SET") {
            result = result.pop();
          }
        }
        const newNameOidMap = {};
        const newEnumOids = { oids: [], arrayOids: [] };
        for (const row of result.rows) {
          if (row.typtype === "e") {
            newEnumOids.oids.push(row.oid);
            if (row.typarray)
              newEnumOids.arrayOids.push(row.typarray);
            continue;
          }
          newNameOidMap[row.typname] = { oid: row.oid };
          if (row.typarray)
            newNameOidMap[row.typname].arrayOid = row.typarray;
          if (row.rngtypid) {
            newNameOidMap[row.typname].rangeOid = row.rngtypid;
            if (row.rngtyparray)
              newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;
          }
        }
        this.nameOidMap = newNameOidMap;
        this.enumOids = newEnumOids;
        this.refreshTypeParser(dataTypes.postgres);
      }
      _clearDynamicOIDs() {
        this.nameOidMap = {};
        this.enumOids = { oids: [], arrayOids: [] };
      }
    };
    module.exports = ConnectionManager;
    module.exports.ConnectionManager = ConnectionManager;
    module.exports.default = ConnectionManager;
  }
});

// node_modules/sequelize/lib/dialects/postgres/query.js
var require_query5 = __commonJS({
  "node_modules/sequelize/lib/dialects/postgres/query.js"(exports, module) {
    "use strict";
    var AbstractQuery = require_query();
    var QueryTypes2 = require_query_types();
    var sequelizeErrors = require_errors();
    var _ = require_lodash();
    var { logger } = require_logger();
    var debug = logger.debugContext("sql:pg");
    var Query = class extends AbstractQuery {
      static formatBindParameters(sql, values, dialect) {
        const stringReplaceFunc = (value) => typeof value === "string" ? value.replace(/\0/g, "\\0") : value;
        let bindParam;
        if (Array.isArray(values)) {
          bindParam = values.map(stringReplaceFunc);
          sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];
        } else {
          bindParam = [];
          let i = 0;
          const seen = {};
          const replacementFunc = (match, key, values2) => {
            if (seen[key] !== void 0) {
              return seen[key];
            }
            if (values2[key] !== void 0) {
              i = i + 1;
              bindParam.push(stringReplaceFunc(values2[key]));
              seen[key] = `$${i}`;
              return `$${i}`;
            }
            return void 0;
          };
          sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];
        }
        return [sql, bindParam];
      }
      async run(sql, parameters) {
        const { connection } = this;
        if (!_.isEmpty(this.options.searchPath)) {
          sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;
        }
        if (this.sequelize.options.minifyAliases && this.options.includeAliases) {
          _.toPairs(this.options.includeAliases).sort((a, b) => b[1].length - a[1].length).forEach(([alias, original]) => {
            const reg = new RegExp(_.escapeRegExp(original), "g");
            sql = sql.replace(reg, alias);
          });
        }
        this.sql = sql;
        const query = parameters && parameters.length ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result))) : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));
        const complete = this._logQuery(sql, debug, parameters);
        let queryResult;
        const errForStack = new Error();
        try {
          queryResult = await query;
        } catch (error) {
          if (error.code === "ECONNRESET" || /Unable to set non-blocking to true/i.test(error) || /SSL SYSCALL error: EOF detected/i.test(error) || /Local: Authentication failure/i.test(error)) {
            connection._invalid = true;
          }
          error.sql = sql;
          error.parameters = parameters;
          throw this.formatError(error, errForStack.stack);
        }
        complete();
        let rows = Array.isArray(queryResult) ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), []) : queryResult.rows;
        const rowCount = Array.isArray(queryResult) ? queryResult.reduce((count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count, 0) : queryResult.rowCount || 0;
        if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {
          rows = rows.map((row) => _.toPairs(row).reduce((acc, [key, value]) => {
            const mapping = this.options.aliasesMapping.get(key);
            acc[mapping || key] = value;
            return acc;
          }, {}));
        }
        const isTableNameQuery = sql.startsWith("SELECT table_name FROM information_schema.tables");
        const isRelNameQuery = sql.startsWith("SELECT relname FROM pg_class WHERE oid IN");
        if (isRelNameQuery) {
          return rows.map((row) => ({
            name: row.relname,
            tableName: row.relname.split("_")[0]
          }));
        }
        if (isTableNameQuery) {
          return rows.map((row) => Object.values(row));
        }
        if (rows[0] && rows[0].sequelize_caught_exception !== void 0) {
          if (rows[0].sequelize_caught_exception !== null) {
            throw this.formatError({
              sql,
              parameters,
              code: "23505",
              detail: rows[0].sequelize_caught_exception
            });
          }
          for (const row of rows) {
            delete row.sequelize_caught_exception;
          }
        }
        if (this.isShowIndexesQuery()) {
          for (const row of rows) {
            const attributes = /ON .*? (?:USING .*?\s)?\(([^]*)\)/gi.exec(row.definition)[1].split(",");
            const columns = _.zipObject(row.column_indexes, this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names));
            delete row.column_indexes;
            delete row.column_names;
            let field;
            let attribute;
            row.fields = row.indkey.split(" ").map((indKey, index) => {
              field = columns[indKey];
              if (!field) {
                return null;
              }
              attribute = attributes[index];
              return {
                attribute: field,
                collate: attribute.match(/COLLATE "(.*?)"/) ? /COLLATE "(.*?)"/.exec(attribute)[1] : void 0,
                order: attribute.includes("DESC") ? "DESC" : attribute.includes("ASC") ? "ASC" : void 0,
                length: void 0
              };
            }).filter((n) => n !== null);
            delete row.columns;
          }
          return rows;
        }
        if (this.isForeignKeysQuery()) {
          const result = [];
          for (const row of rows) {
            let defParts;
            if (row.condef !== void 0 && (defParts = row.condef.match(/FOREIGN KEY \((.+)\) REFERENCES (.+)\((.+)\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {
              row.id = row.constraint_name;
              row.table = defParts[2];
              row.from = defParts[1];
              row.to = defParts[3];
              let i;
              for (i = 5; i <= 8; i += 3) {
                if (/(UPDATE|DELETE)/.test(defParts[i])) {
                  row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];
                }
              }
            }
            result.push(row);
          }
          return result;
        }
        if (this.isSelectQuery()) {
          let result = rows;
          if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {
            const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {
              m[k.toLowerCase()] = k;
              return m;
            }, {});
            result = rows.map((row) => {
              return _.mapKeys(row, (value, key) => {
                const targetAttr = attrsMap[key];
                if (typeof targetAttr === "string" && targetAttr !== key) {
                  return targetAttr;
                }
                return key;
              });
            });
          }
          return this.handleSelectQuery(result);
        }
        if (QueryTypes2.DESCRIBE === this.options.type) {
          const result = {};
          for (const row of rows) {
            result[row.Field] = {
              type: row.Type.toUpperCase(),
              allowNull: row.Null === "YES",
              defaultValue: row.Default,
              comment: row.Comment,
              special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],
              primaryKey: row.Constraint === "PRIMARY KEY"
            };
            if (result[row.Field].type === "BOOLEAN") {
              result[row.Field].defaultValue = { "false": false, "true": true }[result[row.Field].defaultValue];
              if (result[row.Field].defaultValue === void 0) {
                result[row.Field].defaultValue = null;
              }
            }
            if (typeof result[row.Field].defaultValue === "string") {
              result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, "");
              if (result[row.Field].defaultValue.includes("::")) {
                const split = result[row.Field].defaultValue.split("::");
                if (split[1].toLowerCase() !== "regclass)") {
                  result[row.Field].defaultValue = split[0];
                }
              }
            }
          }
          return result;
        }
        if (this.isVersionQuery()) {
          return rows[0].server_version;
        }
        if (this.isShowOrDescribeQuery()) {
          return rows;
        }
        if (QueryTypes2.BULKUPDATE === this.options.type) {
          if (!this.options.returning) {
            return parseInt(rowCount, 10);
          }
          return this.handleSelectQuery(rows);
        }
        if (QueryTypes2.BULKDELETE === this.options.type) {
          return parseInt(rowCount, 10);
        }
        if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {
          if (this.instance && this.instance.dataValues) {
            if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {
              throw new sequelizeErrors.EmptyResultError();
            }
            for (const key in rows[0]) {
              if (Object.prototype.hasOwnProperty.call(rows[0], key)) {
                const record = rows[0][key];
                const attr = _.find(this.model.rawAttributes, (attribute) => attribute.fieldName === key || attribute.field === key);
                this.instance.dataValues[attr && attr.fieldName || key] = record;
              }
            }
          }
          if (this.isUpsertQuery()) {
            return [
              this.instance,
              null
            ];
          }
          return [
            this.instance || rows && (this.options.plain && rows[0] || rows) || void 0,
            rowCount
          ];
        }
        if (this.isRawQuery()) {
          return [rows, queryResult];
        }
        return rows;
      }
      formatError(err, errStack) {
        let match;
        let table;
        let index;
        let fields;
        let errors;
        let message;
        const code = err.code || err.sqlState;
        const errMessage = err.message || err.messagePrimary;
        const errDetail = err.detail || err.messageDetail;
        switch (code) {
          case "23503":
            index = errMessage.match(/violates foreign key constraint "(.+?)"/);
            index = index ? index[1] : void 0;
            table = errMessage.match(/on table "(.+?)"/);
            table = table ? table[1] : void 0;
            return new sequelizeErrors.ForeignKeyConstraintError({
              message: errMessage,
              fields: null,
              index,
              table,
              parent: err,
              stack: errStack
            });
          case "23505":
            if (errDetail && (match = errDetail.replace(/"/g, "").match(/Key \((.*?)\)=\((.*?)\)/))) {
              fields = _.zipObject(match[1].split(", "), match[2].split(", "));
              errors = [];
              message = "Validation error";
              _.forOwn(fields, (value, field) => {
                errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), "unique violation", field, value, this.instance, "not_unique"));
              });
              if (this.model && this.model.uniqueKeys) {
                _.forOwn(this.model.uniqueKeys, (constraint) => {
                  if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {
                    message = constraint.msg;
                    return false;
                  }
                });
              }
              return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });
            }
            return new sequelizeErrors.UniqueConstraintError({
              message: errMessage,
              parent: err,
              stack: errStack
            });
          case "23P01":
            match = errDetail.match(/Key \((.*?)\)=\((.*?)\)/);
            if (match) {
              fields = _.zipObject(match[1].split(", "), match[2].split(", "));
            }
            message = "Exclusion constraint error";
            return new sequelizeErrors.ExclusionConstraintError({
              message,
              constraint: err.constraint,
              fields,
              table: err.table,
              parent: err,
              stack: errStack
            });
          case "42704":
            if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {
              message = "Unknown constraint error";
              index = errMessage.match(/(?:constraint|index) "(.+?)"/i);
              index = index ? index[1] : void 0;
              table = errMessage.match(/relation "(.+?)"/i);
              table = table ? table[1] : void 0;
              throw new sequelizeErrors.UnknownConstraintError({
                message,
                constraint: index,
                fields,
                table,
                parent: err,
                stack: errStack
              });
            }
          default:
            return new sequelizeErrors.DatabaseError(err, { stack: errStack });
        }
      }
      isForeignKeysQuery() {
        return /SELECT conname as constraint_name, pg_catalog\.pg_get_constraintdef\(r\.oid, true\) as condef FROM pg_catalog\.pg_constraint r WHERE r\.conrelid = \(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\) AND r\.contype = 'f' ORDER BY 1;/.test(this.sql);
      }
      getInsertIdField() {
        return "id";
      }
    };
    module.exports = Query;
    module.exports.Query = Query;
    module.exports.default = Query;
  }
});

// node_modules/sequelize/lib/dialects/postgres/query-generator.js
var require_query_generator5 = __commonJS({
  "node_modules/sequelize/lib/dialects/postgres/query-generator.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var Utils2 = require_utils();
    var util = __require("util");
    var DataTypes2 = require_data_types8();
    var AbstractQueryGenerator = require_query_generator();
    var semver = require_semver2();
    var _ = require_lodash();
    var POSTGRES_RESERVED_WORDS = "all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with".split(",");
    var PostgresQueryGenerator = class extends AbstractQueryGenerator {
      setSearchPath(searchPath) {
        return `SET search_path to ${searchPath};`;
      }
      createDatabaseQuery(databaseName, options) {
        options = __spreadValues({
          encoding: null,
          collate: null
        }, options);
        const values = {
          database: this.quoteTable(databaseName),
          encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : "",
          collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : "",
          ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : "",
          template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : ""
        };
        return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;
      }
      dropDatabaseQuery(databaseName) {
        return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;
      }
      createSchema(schema) {
        const databaseVersion = _.get(this, "sequelize.options.databaseVersion", 0);
        if (databaseVersion && semver.gte(databaseVersion, "9.2.0")) {
          return `CREATE SCHEMA IF NOT EXISTS ${schema};`;
        }
        return `CREATE SCHEMA ${schema};`;
      }
      dropSchema(schema) {
        return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;
      }
      showSchemasQuery() {
        return "SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';";
      }
      versionQuery() {
        return "SHOW SERVER_VERSION";
      }
      createTableQuery(tableName, attributes, options) {
        options = __spreadValues({}, options);
        const databaseVersion = _.get(this, "sequelize.options.databaseVersion", 0);
        const attrStr = [];
        let comments = "";
        let columnComments = "";
        const quotedTable = this.quoteTable(tableName);
        if (options.comment && typeof options.comment === "string") {
          comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;
        }
        for (const attr in attributes) {
          const quotedAttr = this.quoteIdentifier(attr);
          const i = attributes[attr].indexOf("COMMENT ");
          if (i !== -1) {
            const escapedCommentText = this.escape(attributes[attr].substring(i + 8));
            columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;
            attributes[attr] = attributes[attr].substring(0, i);
          }
          const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);
          attrStr.push(`${quotedAttr} ${dataType}`);
        }
        let attributesClause = attrStr.join(", ");
        if (options.uniqueKeys) {
          _.each(options.uniqueKeys, (columns) => {
            if (columns.customIndex) {
              attributesClause += `, UNIQUE (${columns.fields.map((field) => this.quoteIdentifier(field)).join(", ")})`;
            }
          });
        }
        const pks = _.reduce(attributes, (acc, attribute, key) => {
          if (attribute.includes("PRIMARY KEY")) {
            acc.push(this.quoteIdentifier(key));
          }
          return acc;
        }, []).join(",");
        if (pks.length > 0) {
          attributesClause += `, PRIMARY KEY (${pks})`;
        }
        return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, "9.1.0") ? "IF NOT EXISTS " : ""}${quotedTable} (${attributesClause})${comments}${columnComments};`;
      }
      dropTableQuery(tableName, options) {
        options = options || {};
        return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? " CASCADE" : ""};`;
      }
      showTablesQuery() {
        return "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';";
      }
      describeTableQuery(tableName, schema) {
        if (!schema)
          schema = "public";
        return `SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;
      }
      _checkValidJsonStatement(stmt) {
        if (typeof stmt !== "string") {
          return false;
        }
        const jsonFunctionRegex = /^\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\([^)]*\)/i;
        const jsonOperatorRegex = /^\s*(->>?|#>>?|@>|<@|\?[|&]?|\|{2}|#-)/i;
        const tokenCaptureRegex = /^\s*((?:([`"'])(?:(?!\2).|\2{2})*\2)|[\w\d\s]+|[().,;+-])/i;
        let currentIndex = 0;
        let openingBrackets = 0;
        let closingBrackets = 0;
        let hasJsonFunction = false;
        let hasInvalidToken = false;
        while (currentIndex < stmt.length) {
          const string = stmt.substr(currentIndex);
          const functionMatches = jsonFunctionRegex.exec(string);
          if (functionMatches) {
            currentIndex += functionMatches[0].indexOf("(");
            hasJsonFunction = true;
            continue;
          }
          const operatorMatches = jsonOperatorRegex.exec(string);
          if (operatorMatches) {
            currentIndex += operatorMatches[0].length;
            hasJsonFunction = true;
            continue;
          }
          const tokenMatches = tokenCaptureRegex.exec(string);
          if (tokenMatches) {
            const capturedToken = tokenMatches[1];
            if (capturedToken === "(") {
              openingBrackets++;
            } else if (capturedToken === ")") {
              closingBrackets++;
            } else if (capturedToken === ";") {
              hasInvalidToken = true;
              break;
            }
            currentIndex += tokenMatches[0].length;
            continue;
          }
          break;
        }
        hasInvalidToken |= openingBrackets !== closingBrackets;
        if (hasJsonFunction && hasInvalidToken) {
          throw new Error(`Invalid json statement: ${stmt}`);
        }
        return hasJsonFunction;
      }
      handleSequelizeMethod(smth, tableName, factory, options, prepend) {
        if (smth instanceof Utils2.Json) {
          if (smth.conditions) {
            const conditions = this.parseConditionObject(smth.conditions).map((condition) => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);
            return conditions.join(" AND ");
          }
          if (smth.path) {
            let str;
            if (this._checkValidJsonStatement(smth.path)) {
              str = smth.path;
            } else {
              const paths = _.toPath(smth.path);
              const column = paths.shift();
              str = this.jsonPathExtractionQuery(column, paths);
            }
            if (smth.value) {
              str += util.format(" = %s", this.escape(smth.value));
            }
            return str;
          }
        }
        return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);
      }
      addColumnQuery(table, key, attribute) {
        const dbDataType = this.attributeToSQL(attribute, { context: "addColumn", table, key });
        const dataType = attribute.type || attribute;
        const definition = this.dataTypeMapping(table, key, dbDataType);
        const quotedKey = this.quoteIdentifier(key);
        const quotedTable = this.quoteTable(this.extractTableDetails(table));
        let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;
        if (dataType instanceof DataTypes2.ENUM) {
          query = this.pgEnum(table, key, dataType) + query;
        } else if (dataType.type && dataType.type instanceof DataTypes2.ENUM) {
          query = this.pgEnum(table, key, dataType.type) + query;
        }
        return query;
      }
      removeColumnQuery(tableName, attributeName) {
        const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));
        const quotedAttributeName = this.quoteIdentifier(attributeName);
        return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;
      }
      changeColumnQuery(tableName, attributes) {
        const query = (subQuery) => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;
        const sql = [];
        for (const attributeName in attributes) {
          let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);
          let attrSql = "";
          if (definition.includes("NOT NULL")) {
            attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);
            definition = definition.replace("NOT NULL", "").trim();
          } else if (!definition.includes("REFERENCES")) {
            attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);
          }
          if (definition.includes("DEFAULT")) {
            attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);
            definition = definition.replace(/(DEFAULT[^;]+)/, "").trim();
          } else if (!definition.includes("REFERENCES")) {
            attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);
          }
          if (attributes[attributeName].startsWith("ENUM(")) {
            attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);
            definition = definition.replace(/^ENUM\(.+\)/, this.pgEnumName(tableName, attributeName, { schema: false }));
            definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;
          }
          if (definition.match(/UNIQUE;*$/)) {
            definition = definition.replace(/UNIQUE;*$/, "");
            attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace("ALTER COLUMN", "");
          }
          if (definition.includes("REFERENCES")) {
            definition = definition.replace(/.+?(?=REFERENCES)/, "");
            attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace("ALTER COLUMN", "");
          } else {
            attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);
          }
          sql.push(attrSql);
        }
        return sql.join("");
      }
      renameColumnQuery(tableName, attrBefore, attributes) {
        const attrString = [];
        for (const attributeName in attributes) {
          attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);
        }
        return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(", ")};`;
      }
      fn(fnName, tableName, parameters, body, returns, language) {
        fnName = fnName || "testfunc";
        language = language || "plpgsql";
        returns = returns ? `RETURNS ${returns}` : "";
        parameters = parameters || "";
        return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;
      }
      truncateTableQuery(tableName, options = {}) {
        return [
          `TRUNCATE ${this.quoteTable(tableName)}`,
          options.restartIdentity ? " RESTART IDENTITY" : "",
          options.cascade ? " CASCADE" : ""
        ].join("");
      }
      deleteQuery(tableName, where2, options = {}, model) {
        const table = this.quoteTable(tableName);
        let whereClause = this.getWhereConditions(where2, null, model, options);
        const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : "";
        let primaryKeys = "";
        let primaryKeysSelection = "";
        if (whereClause) {
          whereClause = ` WHERE ${whereClause}`;
        }
        if (options.limit) {
          if (!model) {
            throw new Error("Cannot LIMIT delete without a model.");
          }
          const pks = Object.values(model.primaryKeys).map((pk) => this.quoteIdentifier(pk.field)).join(",");
          primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;
          primaryKeysSelection = pks;
          return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;
        }
        return `DELETE FROM ${table}${whereClause}`;
      }
      showIndexesQuery(tableName) {
        let schemaJoin = "";
        let schemaWhere = "";
        if (typeof tableName !== "string") {
          schemaJoin = ", pg_namespace s";
          schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;
          tableName = tableName.tableName;
        }
        return `SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;`;
      }
      showConstraintsQuery(tableName) {
        return [
          'SELECT constraint_catalog AS "constraintCatalog",',
          'constraint_schema AS "constraintSchema",',
          'constraint_name AS "constraintName",',
          'table_catalog AS "tableCatalog",',
          'table_schema AS "tableSchema",',
          'table_name AS "tableName",',
          'constraint_type AS "constraintType",',
          'is_deferrable AS "isDeferrable",',
          'initially_deferred AS "initiallyDeferred"',
          "from INFORMATION_SCHEMA.table_constraints",
          `WHERE table_name='${tableName}';`
        ].join(" ");
      }
      removeIndexQuery(tableName, indexNameOrAttributes, options) {
        let indexName = indexNameOrAttributes;
        if (typeof indexName !== "string") {
          indexName = Utils2.underscore(`${tableName}_${indexNameOrAttributes.join("_")}`);
        }
        return [
          "DROP INDEX",
          options && options.concurrently && "CONCURRENTLY",
          `IF EXISTS ${this.quoteIdentifiers(indexName)}`
        ].filter(Boolean).join(" ");
      }
      addLimitAndOffset(options) {
        let fragment = "";
        if (options.limit != null) {
          fragment += " LIMIT " + this.escape(options.limit);
        }
        if (options.offset != null) {
          fragment += " OFFSET " + this.escape(options.offset);
        }
        return fragment;
      }
      attributeToSQL(attribute, options) {
        if (!_.isPlainObject(attribute)) {
          attribute = {
            type: attribute
          };
        }
        let type;
        if (attribute.type instanceof DataTypes2.ENUM || attribute.type instanceof DataTypes2.ARRAY && attribute.type.type instanceof DataTypes2.ENUM) {
          const enumType = attribute.type.type || attribute.type;
          let values = attribute.values;
          if (enumType.values && !attribute.values) {
            values = enumType.values;
          }
          if (Array.isArray(values) && values.length > 0) {
            type = `ENUM(${values.map((value) => this.escape(value)).join(", ")})`;
            if (attribute.type instanceof DataTypes2.ARRAY) {
              type += "[]";
            }
          } else {
            throw new Error("Values for ENUM haven't been defined.");
          }
        }
        if (!type) {
          type = attribute.type;
        }
        let sql = type.toString();
        if (Object.prototype.hasOwnProperty.call(attribute, "allowNull") && !attribute.allowNull) {
          sql += " NOT NULL";
        }
        if (attribute.autoIncrement) {
          if (attribute.autoIncrementIdentity) {
            sql += " GENERATED BY DEFAULT AS IDENTITY";
          } else {
            sql += " SERIAL";
          }
        }
        if (Utils2.defaultValueSchemable(attribute.defaultValue)) {
          sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;
        }
        if (attribute.unique === true) {
          sql += " UNIQUE";
        }
        if (attribute.primaryKey) {
          sql += " PRIMARY KEY";
        }
        if (attribute.references) {
          let referencesTable = this.quoteTable(attribute.references.model);
          let schema;
          if (options.schema) {
            schema = options.schema;
          } else if ((!attribute.references.model || typeof attribute.references.model == "string") && options.table && options.table.schema) {
            schema = options.table.schema;
          }
          if (schema) {
            referencesTable = this.quoteTable(this.addSchema({
              tableName: referencesTable,
              _schema: schema
            }));
          }
          let referencesKey;
          if (attribute.references.key) {
            referencesKey = this.quoteIdentifiers(attribute.references.key);
          } else {
            referencesKey = this.quoteIdentifier("id");
          }
          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;
          if (attribute.onDelete) {
            sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;
          }
          if (attribute.onUpdate) {
            sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;
          }
          if (attribute.references.deferrable) {
            sql += ` ${attribute.references.deferrable.toString(this)}`;
          }
        }
        if (attribute.comment && typeof attribute.comment === "string") {
          if (options && ["addColumn", "changeColumn"].includes(options.context)) {
            const quotedAttr = this.quoteIdentifier(options.key);
            const escapedCommentText = this.escape(attribute.comment);
            sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;
          } else {
            sql += ` COMMENT ${attribute.comment}`;
          }
        }
        return sql;
      }
      deferConstraintsQuery(options) {
        return options.deferrable.toString(this);
      }
      setConstraintQuery(columns, type) {
        let columnFragment = "ALL";
        if (columns) {
          columnFragment = columns.map((column) => this.quoteIdentifier(column)).join(", ");
        }
        return `SET CONSTRAINTS ${columnFragment} ${type}`;
      }
      setDeferredQuery(columns) {
        return this.setConstraintQuery(columns, "DEFERRED");
      }
      setImmediateQuery(columns) {
        return this.setConstraintQuery(columns, "IMMEDIATE");
      }
      attributesToSQL(attributes, options) {
        const result = {};
        for (const key in attributes) {
          const attribute = attributes[key];
          result[attribute.field || key] = this.attributeToSQL(attribute, __spreadValues({ key }, options));
        }
        return result;
      }
      createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {
        const decodedEventType = this.decodeTriggerEventType(eventType);
        const eventSpec = this.expandTriggerEventSpec(fireOnSpec);
        const expandedOptions = this.expandOptions(optionsArray);
        const paramList = this._expandFunctionParamList(functionParams);
        return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : ""} EXECUTE PROCEDURE ${functionName}(${paramList});`;
      }
      dropTrigger(tableName, triggerName) {
        return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;
      }
      renameTrigger(tableName, oldTriggerName, newTriggerName) {
        return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;
      }
      createFunction(functionName, params, returnType, language, body, optionsArray, options) {
        if (!functionName || !returnType || !language || !body)
          throw new Error("createFunction missing some parameters. Did you pass functionName, returnType, language and body?");
        const paramList = this._expandFunctionParamList(params);
        const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : "";
        const expandedOptionsArray = this.expandOptions(optionsArray);
        const statement = options && options.force ? "CREATE OR REPLACE FUNCTION" : "CREATE FUNCTION";
        return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;
      }
      dropFunction(functionName, params) {
        if (!functionName)
          throw new Error("requires functionName");
        const paramList = this._expandFunctionParamList(params);
        return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;
      }
      renameFunction(oldFunctionName, params, newFunctionName) {
        const paramList = this._expandFunctionParamList(params);
        return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;
      }
      pgEscapeAndQuote(val) {
        return this.quoteIdentifier(Utils2.removeTicks(this.escape(val), "'"));
      }
      _expandFunctionParamList(params) {
        if (params === void 0 || !Array.isArray(params)) {
          throw new Error("_expandFunctionParamList: function parameters array required, including an empty one for no arguments");
        }
        const paramList = [];
        params.forEach((curParam) => {
          const paramDef = [];
          if (curParam.type) {
            if (curParam.direction) {
              paramDef.push(curParam.direction);
            }
            if (curParam.name) {
              paramDef.push(curParam.name);
            }
            paramDef.push(curParam.type);
          } else {
            throw new Error("function or trigger used with a parameter without any type");
          }
          const joined = paramDef.join(" ");
          if (joined)
            paramList.push(joined);
        });
        return paramList.join(", ");
      }
      _expandFunctionVariableList(variables) {
        if (!Array.isArray(variables)) {
          throw new Error("_expandFunctionVariableList: function variables must be an array");
        }
        const variableDefinitions = [];
        variables.forEach((variable) => {
          if (!variable.name || !variable.type) {
            throw new Error("function variable must have a name and type");
          }
          let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;
          if (variable.default) {
            variableDefinition += ` := ${variable.default}`;
          }
          variableDefinition += ";";
          variableDefinitions.push(variableDefinition);
        });
        return variableDefinitions.join(" ");
      }
      expandOptions(options) {
        return options === void 0 || _.isEmpty(options) ? "" : options.join(" ");
      }
      decodeTriggerEventType(eventSpecifier) {
        const EVENT_DECODER = {
          "after": "AFTER",
          "before": "BEFORE",
          "instead_of": "INSTEAD OF",
          "after_constraint": "AFTER"
        };
        if (!EVENT_DECODER[eventSpecifier]) {
          throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);
        }
        return EVENT_DECODER[eventSpecifier];
      }
      triggerEventTypeIsConstraint(eventSpecifier) {
        return eventSpecifier === "after_constraint" ? "CONSTRAINT " : "";
      }
      expandTriggerEventSpec(fireOnSpec) {
        if (_.isEmpty(fireOnSpec)) {
          throw new Error("no table change events specified to trigger on");
        }
        return _.map(fireOnSpec, (fireValue, fireKey) => {
          const EVENT_MAP = {
            "insert": "INSERT",
            "update": "UPDATE",
            "delete": "DELETE",
            "truncate": "TRUNCATE"
          };
          if (!EVENT_MAP[fireValue]) {
            throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);
          }
          let eventSpec = EVENT_MAP[fireValue];
          if (eventSpec === "UPDATE") {
            if (Array.isArray(fireValue) && fireValue.length > 0) {
              eventSpec += ` OF ${fireValue.join(", ")}`;
            }
          }
          return eventSpec;
        }).join(" OR ");
      }
      pgEnumName(tableName, attr, options) {
        options = options || {};
        const tableDetails = this.extractTableDetails(tableName, options);
        let enumName = Utils2.addTicks(Utils2.generateEnumName(tableDetails.tableName, attr), '"');
        if (options.schema !== false && tableDetails.schema) {
          enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;
        }
        return enumName;
      }
      pgListEnums(tableName, attrName, options) {
        let enumName = "";
        const tableDetails = this.extractTableDetails(tableName, options);
        if (tableDetails.tableName && attrName) {
          enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/"/g, "'")}`;
        }
        return `SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;
      }
      pgEnum(tableName, attr, dataType, options) {
        const enumName = this.pgEnumName(tableName, attr, options);
        let values;
        if (dataType.values) {
          values = `ENUM(${dataType.values.map((value) => this.escape(value)).join(", ")})`;
        } else {
          values = dataType.toString().match(/^ENUM\(.+\)/)[0];
        }
        let sql = `CREATE TYPE ${enumName} AS ${values};`;
        if (!!options && options.force === true) {
          sql = this.pgEnumDrop(tableName, attr) + sql;
        }
        return sql;
      }
      pgEnumAdd(tableName, attr, value, options) {
        const enumName = this.pgEnumName(tableName, attr);
        let sql = `ALTER TYPE ${enumName} ADD VALUE `;
        if (semver.gte(this.sequelize.options.databaseVersion, "9.3.0")) {
          sql += "IF NOT EXISTS ";
        }
        sql += this.escape(value);
        if (options.before) {
          sql += ` BEFORE ${this.escape(options.before)}`;
        } else if (options.after) {
          sql += ` AFTER ${this.escape(options.after)}`;
        }
        return sql;
      }
      pgEnumDrop(tableName, attr, enumName) {
        enumName = enumName || this.pgEnumName(tableName, attr);
        return `DROP TYPE IF EXISTS ${enumName}; `;
      }
      fromArray(text) {
        text = text.replace(/^{/, "").replace(/}$/, "");
        let matches = text.match(/("(?:\\.|[^"\\\\])*"|[^,]*)(?:\s*,\s*|\s*$)/ig);
        if (matches.length < 1) {
          return [];
        }
        matches = matches.map((m) => m.replace(/",$/, "").replace(/,$/, "").replace(/(^"|"$)/g, ""));
        return matches.slice(0, -1);
      }
      dataTypeMapping(tableName, attr, dataType) {
        if (dataType.includes("PRIMARY KEY")) {
          dataType = dataType.replace("PRIMARY KEY", "");
        }
        if (dataType.includes("SERIAL")) {
          if (dataType.includes("BIGINT")) {
            dataType = dataType.replace("SERIAL", "BIGSERIAL");
            dataType = dataType.replace("BIGINT", "");
          } else if (dataType.includes("SMALLINT")) {
            dataType = dataType.replace("SERIAL", "SMALLSERIAL");
            dataType = dataType.replace("SMALLINT", "");
          } else {
            dataType = dataType.replace("INTEGER", "");
          }
          dataType = dataType.replace("NOT NULL", "");
        }
        if (dataType.startsWith("ENUM(")) {
          dataType = dataType.replace(/^ENUM\(.+\)/, this.pgEnumName(tableName, attr));
        }
        return dataType;
      }
      getForeignKeysQuery(tableName) {
        return `SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;
      }
      _getForeignKeyReferencesQueryPrefix() {
        return "SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name ";
      }
      getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {
        return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${catalogName ? ` AND tc.table_catalog = '${catalogName}'` : ""}${schemaName ? ` AND tc.table_schema = '${schemaName}'` : ""}`;
      }
      getForeignKeyReferenceQuery(table, columnName) {
        const tableName = table.tableName || table;
        const schema = table.schema;
        return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${schema ? ` AND tc.table_schema = '${schema}'` : ""}`;
      }
      dropForeignKeyQuery(tableName, foreignKey) {
        return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;
      }
      quoteIdentifier(identifier2, force) {
        const optForceQuote = force || false;
        const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;
        const rawIdentifier = Utils2.removeTicks(identifier2, '"');
        if (optForceQuote === true || optQuoteIdentifiers !== false || identifier2.includes(".") || identifier2.includes("->") || POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())) {
          return Utils2.addTicks(rawIdentifier, '"');
        }
        return rawIdentifier;
      }
    };
    module.exports = PostgresQueryGenerator;
  }
});

// node_modules/sequelize/lib/dialects/postgres/query-interface.js
var require_query_interface4 = __commonJS({
  "node_modules/sequelize/lib/dialects/postgres/query-interface.js"(exports) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var DataTypes2 = require_data_types8();
    var QueryTypes2 = require_query_types();
    var { QueryInterface: QueryInterface2 } = require_query_interface();
    var Utils2 = require_utils();
    var PostgresQueryInterface = class extends QueryInterface2 {
      async ensureEnums(tableName, attributes, options, model) {
        const keys = Object.keys(attributes);
        const keyLen = keys.length;
        let sql = "";
        let promises = [];
        let i = 0;
        for (i = 0; i < keyLen; i++) {
          const attribute = attributes[keys[i]];
          const type = attribute.type;
          if (type instanceof DataTypes2.ENUM || type instanceof DataTypes2.ARRAY && type.type instanceof DataTypes2.ENUM) {
            sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);
            promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { plain: true, raw: true, type: QueryTypes2.SELECT })));
          }
        }
        const results = await Promise.all(promises);
        promises = [];
        let enumIdx = 0;
        const addEnumValue = (field, value, relativeValue, position = "before", spliceStart = promises.length) => {
          const valueOptions = __spreadValues({}, options);
          valueOptions.before = null;
          valueOptions.after = null;
          switch (position) {
            case "after":
              valueOptions.after = relativeValue;
              break;
            case "before":
            default:
              valueOptions.before = relativeValue;
              break;
          }
          promises.splice(spliceStart, 0, () => {
            return this.sequelize.query(this.queryGenerator.pgEnumAdd(tableName, field, value, valueOptions), valueOptions);
          });
        };
        for (i = 0; i < keyLen; i++) {
          const attribute = attributes[keys[i]];
          const type = attribute.type;
          const enumType = type.type || type;
          const field = attribute.field || keys[i];
          if (type instanceof DataTypes2.ENUM || type instanceof DataTypes2.ARRAY && enumType instanceof DataTypes2.ENUM) {
            if (!results[enumIdx]) {
              promises.push(() => {
                return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), __spreadProps(__spreadValues({}, options), { raw: true }));
              });
            } else if (!!results[enumIdx] && !!model) {
              const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);
              const vals = enumType.values;
              let lastOldEnumValue;
              let rightestPosition = -1;
              for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {
                const enumVal = enumVals[oldIndex];
                const newIdx = vals.indexOf(enumVal);
                lastOldEnumValue = enumVal;
                if (newIdx === -1) {
                  continue;
                }
                const newValuesBefore = vals.slice(0, newIdx);
                const promisesLength = promises.length;
                for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {
                  if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {
                    break;
                  }
                  addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, "before", promisesLength);
                }
                if (newIdx > rightestPosition) {
                  rightestPosition = newIdx;
                }
              }
              if (lastOldEnumValue && rightestPosition < vals.length - 1) {
                const remainingEnumValues = vals.slice(rightestPosition + 1);
                for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {
                  addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, "after");
                }
              }
              enumIdx++;
            }
          }
        }
        const result = await promises.reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());
        if (promises.length) {
          await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();
        }
        return result;
      }
      async getForeignKeyReferencesForTable(table, options) {
        const queryOptions = __spreadProps(__spreadValues({}, options), {
          type: QueryTypes2.FOREIGNKEYS
        });
        const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);
        const result = await this.sequelize.query(query, queryOptions);
        return result.map(Utils2.camelizeObjectKeys);
      }
      async dropEnum(enumName, options) {
        options = options || {};
        return this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)), __spreadProps(__spreadValues({}, options), { raw: true }));
      }
      async dropAllEnums(options) {
        options = options || {};
        const enums = await this.pgListEnums(null, options);
        return await Promise.all(enums.map((result) => this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)), __spreadProps(__spreadValues({}, options), { raw: true }))));
      }
      async pgListEnums(tableName, options) {
        options = options || {};
        const sql = this.queryGenerator.pgListEnums(tableName);
        return this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { plain: false, raw: true, type: QueryTypes2.SELECT }));
      }
      async dropTable(tableName, options) {
        await super.dropTable(tableName, options);
        const promises = [];
        const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: "tableName" });
        if (!instanceTable) {
          return;
        }
        const getTableName = (!options || !options.schema || options.schema === "public" ? "" : `${options.schema}_`) + tableName;
        const keys = Object.keys(instanceTable.rawAttributes);
        const keyLen = keys.length;
        for (let i = 0; i < keyLen; i++) {
          if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes2.ENUM) {
            const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);
            options.supportsSearchPath = false;
            promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { raw: true })));
          }
        }
        await Promise.all(promises);
      }
    };
    exports.PostgresQueryInterface = PostgresQueryInterface;
  }
});

// node_modules/sequelize/lib/dialects/postgres/index.js
var require_postgres = __commonJS({
  "node_modules/sequelize/lib/dialects/postgres/index.js"(exports, module) {
    "use strict";
    var _ = require_lodash();
    var AbstractDialect = require_abstract();
    var ConnectionManager = require_connection_manager5();
    var Query = require_query5();
    var QueryGenerator = require_query_generator5();
    var DataTypes2 = require_data_types8().postgres;
    var { PostgresQueryInterface } = require_query_interface4();
    var PostgresDialect = class extends AbstractDialect {
      constructor(sequelize) {
        super();
        this.sequelize = sequelize;
        this.connectionManager = new ConnectionManager(this, sequelize);
        this.queryGenerator = new QueryGenerator({
          _dialect: this,
          sequelize
        });
        this.queryInterface = new PostgresQueryInterface(sequelize, this.queryGenerator);
      }
    };
    PostgresDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {
      "DEFAULT VALUES": true,
      EXCEPTION: true,
      "ON DUPLICATE KEY": false,
      "ORDER NULLS": true,
      returnValues: {
        returning: true
      },
      bulkDefault: true,
      schemas: true,
      lock: true,
      lockOf: true,
      lockKey: true,
      lockOuterJoinFailure: true,
      skipLocked: true,
      forShare: "FOR SHARE",
      index: {
        concurrently: true,
        using: 2,
        where: true,
        functionBased: true,
        operator: true
      },
      inserts: {
        onConflictDoNothing: " ON CONFLICT DO NOTHING",
        updateOnDuplicate: " ON CONFLICT DO UPDATE SET",
        conflictFields: true
      },
      NUMERIC: true,
      ARRAY: true,
      RANGE: true,
      GEOMETRY: true,
      REGEXP: true,
      GEOGRAPHY: true,
      JSON: true,
      JSONB: true,
      HSTORE: true,
      TSVECTOR: true,
      deferrableConstraints: true,
      searchPath: true
    });
    PostgresDialect.prototype.defaultVersion = "9.5.0";
    PostgresDialect.prototype.Query = Query;
    PostgresDialect.prototype.DataTypes = DataTypes2;
    PostgresDialect.prototype.name = "postgres";
    PostgresDialect.prototype.TICK_CHAR = '"';
    PostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;
    PostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;
    module.exports = PostgresDialect;
    module.exports.default = PostgresDialect;
    module.exports.PostgresDialect = PostgresDialect;
  }
});

// node_modules/sequelize/lib/dialects/sqlite/connection-manager.js
var require_connection_manager6 = __commonJS({
  "node_modules/sequelize/lib/dialects/sqlite/connection-manager.js"(exports, module) {
    "use strict";
    var fs = __require("fs");
    var path = __require("path");
    var AbstractConnectionManager = require_connection_manager();
    var { logger } = require_logger();
    var debug = logger.debugContext("connection:sqlite");
    var dataTypes = require_data_types8().sqlite;
    var sequelizeErrors = require_errors();
    var parserStore = require_parserStore()("sqlite");
    var { promisify } = __require("util");
    var ConnectionManager = class extends AbstractConnectionManager {
      constructor(dialect, sequelize) {
        super(dialect, sequelize);
        if (this.sequelize.options.host === "localhost") {
          delete this.sequelize.options.host;
        }
        this.connections = {};
        this.lib = this._loadDialectModule("sqlite3");
        this.refreshTypeParser(dataTypes);
      }
      async _onProcessExit() {
        await Promise.all(Object.getOwnPropertyNames(this.connections).map((connection) => promisify((callback) => this.connections[connection].close(callback))()));
        return super._onProcessExit.call(this);
      }
      _refreshTypeParser(dataType) {
        parserStore.refresh(dataType);
      }
      _clearTypeParser() {
        parserStore.clear();
      }
      async getConnection(options) {
        options = options || {};
        options.uuid = options.uuid || "default";
        if (!!this.sequelize.options.storage !== null && this.sequelize.options.storage !== void 0) {
          options.storage = this.sequelize.options.storage;
        } else {
          options.storage = this.sequelize.options.host || ":memory:";
        }
        options.inMemory = options.storage === ":memory:" ? 1 : 0;
        const dialectOptions = this.sequelize.options.dialectOptions;
        const defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;
        options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;
        if (this.connections[options.inMemory || options.uuid]) {
          return this.connections[options.inMemory || options.uuid];
        }
        if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {
          fs.mkdirSync(path.dirname(options.storage), { recursive: true });
        }
        const connection = await new Promise((resolve, reject) => {
          this.connections[options.inMemory || options.uuid] = new this.lib.Database(options.storage, options.readWriteMode, (err) => {
            if (err)
              return reject(new sequelizeErrors.ConnectionError(err));
            debug(`connection acquired ${options.uuid}`);
            resolve(this.connections[options.inMemory || options.uuid]);
          });
        });
        if (this.sequelize.config.password) {
          connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);
        }
        if (this.sequelize.options.foreignKeys !== false) {
          connection.run("PRAGMA FOREIGN_KEYS=ON");
        }
        return connection;
      }
      releaseConnection(connection, force) {
        if (connection.filename === ":memory:" && force !== true)
          return;
        if (connection.uuid) {
          connection.close();
          debug(`connection released ${connection.uuid}`);
          delete this.connections[connection.uuid];
        }
      }
    };
    module.exports = ConnectionManager;
    module.exports.ConnectionManager = ConnectionManager;
    module.exports.default = ConnectionManager;
  }
});

// node_modules/sequelize/lib/dialects/sqlite/query.js
var require_query6 = __commonJS({
  "node_modules/sequelize/lib/dialects/sqlite/query.js"(exports, module) {
    "use strict";
    var _ = require_lodash();
    var Utils2 = require_utils();
    var AbstractQuery = require_query();
    var QueryTypes2 = require_query_types();
    var sequelizeErrors = require_errors();
    var parserStore = require_parserStore()("sqlite");
    var { logger } = require_logger();
    var debug = logger.debugContext("sql:sqlite");
    var Query = class extends AbstractQuery {
      getInsertIdField() {
        return "lastID";
      }
      static formatBindParameters(sql, values, dialect) {
        let bindParam;
        if (Array.isArray(values)) {
          bindParam = {};
          values.forEach((v, i) => {
            bindParam[`$${i + 1}`] = v;
          });
          sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];
        } else {
          bindParam = {};
          if (typeof values === "object") {
            for (const k of Object.keys(values)) {
              bindParam[`$${k}`] = values[k];
            }
          }
          sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];
        }
        return [sql, bindParam];
      }
      _collectModels(include, prefix) {
        const ret = {};
        if (include) {
          for (const _include of include) {
            let key;
            if (!prefix) {
              key = _include.as;
            } else {
              key = `${prefix}.${_include.as}`;
            }
            ret[key] = _include.model;
            if (_include.include) {
              _.merge(ret, this._collectModels(_include.include, key));
            }
          }
        }
        return ret;
      }
      _handleQueryResponse(metaData, columnTypes, err, results, errStack) {
        if (err) {
          err.sql = this.sql;
          throw this.formatError(err, errStack);
        }
        let result = this.instance;
        if (this.isInsertQuery(results, metaData) || this.isUpsertQuery()) {
          this.handleInsertQuery(results, metaData);
          if (!this.instance) {
            if (metaData.constructor.name === "Statement" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {
              const startId = metaData[this.getInsertIdField()] - metaData.changes + 1;
              result = [];
              for (let i = startId; i < startId + metaData.changes; i++) {
                result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });
              }
            } else {
              result = metaData[this.getInsertIdField()];
            }
          }
        }
        if (this.isShowTablesQuery()) {
          return results.map((row) => row.name);
        }
        if (this.isShowConstraintsQuery()) {
          result = results;
          if (results && results[0] && results[0].sql) {
            result = this.parseConstraintsFromSql(results[0].sql);
          }
          return result;
        }
        if (this.isSelectQuery()) {
          if (this.options.raw) {
            return this.handleSelectQuery(results);
          }
          const prefixes = this._collectModels(this.options.include);
          results = results.map((result2) => {
            return _.mapValues(result2, (value, name) => {
              let model;
              if (name.includes(".")) {
                const lastind = name.lastIndexOf(".");
                model = prefixes[name.substr(0, lastind)];
                name = name.substr(lastind + 1);
              } else {
                model = this.options.model;
              }
              const tableName = model.getTableName().toString().replace(/`/g, "");
              const tableTypes = columnTypes[tableName] || {};
              if (tableTypes && !(name in tableTypes)) {
                _.forOwn(model.rawAttributes, (attribute, key) => {
                  if (name === key && attribute.field) {
                    name = attribute.field;
                    return false;
                  }
                });
              }
              return Object.prototype.hasOwnProperty.call(tableTypes, name) ? this.applyParsers(tableTypes[name], value) : value;
            });
          });
          return this.handleSelectQuery(results);
        }
        if (this.isShowOrDescribeQuery()) {
          return results;
        }
        if (this.sql.includes("PRAGMA INDEX_LIST")) {
          return this.handleShowIndexesQuery(results);
        }
        if (this.sql.includes("PRAGMA INDEX_INFO")) {
          return results;
        }
        if (this.sql.includes("PRAGMA TABLE_INFO")) {
          result = {};
          let defaultValue;
          for (const _result of results) {
            if (_result.dflt_value === null) {
              defaultValue = void 0;
            } else if (_result.dflt_value === "NULL") {
              defaultValue = null;
            } else {
              defaultValue = _result.dflt_value;
            }
            result[_result.name] = {
              type: _result.type,
              allowNull: _result.notnull === 0,
              defaultValue,
              primaryKey: _result.pk !== 0
            };
            if (result[_result.name].type === "TINYINT(1)") {
              result[_result.name].defaultValue = { "0": false, "1": true }[result[_result.name].defaultValue];
            }
            if (typeof result[_result.name].defaultValue === "string") {
              result[_result.name].defaultValue = result[_result.name].defaultValue.replace(/'/g, "");
            }
          }
          return result;
        }
        if (this.sql.includes("PRAGMA foreign_keys;")) {
          return results[0];
        }
        if (this.sql.includes("PRAGMA foreign_keys")) {
          return results;
        }
        if (this.sql.includes("PRAGMA foreign_key_list")) {
          return results;
        }
        if ([QueryTypes2.BULKUPDATE, QueryTypes2.BULKDELETE].includes(this.options.type)) {
          return metaData.changes;
        }
        if (this.options.type === QueryTypes2.VERSION) {
          return results[0].version;
        }
        if (this.options.type === QueryTypes2.RAW) {
          return [results, metaData];
        }
        if (this.isUpsertQuery()) {
          return [result, null];
        }
        if (this.isUpdateQuery() || this.isInsertQuery()) {
          return [result, metaData.changes];
        }
        return result;
      }
      async run(sql, parameters) {
        const conn = this.connection;
        this.sql = sql;
        const method = this.getDatabaseMethod();
        const complete = this._logQuery(sql, debug, parameters);
        return new Promise((resolve, reject) => conn.serialize(async () => {
          const columnTypes = {};
          const errForStack = new Error();
          const executeSql = () => {
            if (sql.startsWith("-- ")) {
              return resolve();
            }
            const query = this;
            function afterExecute(executionError, results) {
              try {
                complete();
                resolve(query._handleQueryResponse(this, columnTypes, executionError, results, errForStack.stack));
                return;
              } catch (error) {
                reject(error);
              }
            }
            if (!parameters)
              parameters = [];
            conn[method](sql, parameters, afterExecute);
            return null;
          };
          if (this.getDatabaseMethod() === "all") {
            let tableNames = [];
            if (this.options && this.options.tableNames) {
              tableNames = this.options.tableNames;
            } else if (/FROM `(.*?)`/i.exec(this.sql)) {
              tableNames.push(/FROM `(.*?)`/i.exec(this.sql)[1]);
            }
            tableNames = tableNames.filter((tableName) => !(tableName in columnTypes) && tableName !== "sqlite_master");
            if (!tableNames.length) {
              return executeSql();
            }
            await Promise.all(tableNames.map((tableName) => new Promise((resolve2) => {
              tableName = tableName.replace(/`/g, "");
              columnTypes[tableName] = {};
              conn.all(`PRAGMA table_info(\`${tableName}\`)`, (err, results) => {
                if (!err) {
                  for (const result of results) {
                    columnTypes[tableName][result.name] = result.type;
                  }
                }
                resolve2();
              });
            })));
          }
          return executeSql();
        }));
      }
      parseConstraintsFromSql(sql) {
        let constraints = sql.split("CONSTRAINT ");
        let referenceTableName, referenceTableKeys, updateAction, deleteAction;
        constraints.splice(0, 1);
        constraints = constraints.map((constraintSql) => {
          if (constraintSql.includes("REFERENCES")) {
            updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);
            deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);
            if (updateAction) {
              updateAction = updateAction[1];
            }
            if (deleteAction) {
              deleteAction = deleteAction[1];
            }
            const referencesRegex = /REFERENCES.+\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\)/;
            const referenceConditions = constraintSql.match(referencesRegex)[0].split(" ");
            referenceTableName = Utils2.removeTicks(referenceConditions[1]);
            let columnNames = referenceConditions[2];
            columnNames = columnNames.replace(/\(|\)/g, "").split(", ");
            referenceTableKeys = columnNames.map((column) => Utils2.removeTicks(column));
          }
          const constraintCondition = constraintSql.match(/\((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*\)/)[0];
          constraintSql = constraintSql.replace(/\(.+\)/, "");
          const constraint = constraintSql.split(" ");
          if (["PRIMARY", "FOREIGN"].includes(constraint[1])) {
            constraint[1] += " KEY";
          }
          return {
            constraintName: Utils2.removeTicks(constraint[0]),
            constraintType: constraint[1],
            updateAction,
            deleteAction,
            sql: sql.replace(/"/g, "`"),
            constraintCondition,
            referenceTableName,
            referenceTableKeys
          };
        });
        return constraints;
      }
      applyParsers(type, value) {
        if (type.includes("(")) {
          type = type.substr(0, type.indexOf("("));
        }
        type = type.replace("UNSIGNED", "").replace("ZEROFILL", "");
        type = type.trim().toUpperCase();
        const parse = parserStore.get(type);
        if (value !== null && parse) {
          return parse(value, { timezone: this.sequelize.options.timezone });
        }
        return value;
      }
      formatError(err, errStack) {
        switch (err.code) {
          case "SQLITE_CONSTRAINT_UNIQUE":
          case "SQLITE_CONSTRAINT_PRIMARYKEY":
          case "SQLITE_CONSTRAINT_TRIGGER":
          case "SQLITE_CONSTRAINT_FOREIGNKEY":
          case "SQLITE_CONSTRAINT": {
            if (err.message.includes("FOREIGN KEY constraint failed")) {
              return new sequelizeErrors.ForeignKeyConstraintError({
                parent: err,
                stack: errStack
              });
            }
            let fields = [];
            let match = err.message.match(/columns (.*?) are/);
            if (match !== null && match.length >= 2) {
              fields = match[1].split(", ");
            } else {
              match = err.message.match(/UNIQUE constraint failed: (.*)/);
              if (match !== null && match.length >= 2) {
                fields = match[1].split(", ").map((columnWithTable) => columnWithTable.split(".")[1]);
              }
            }
            const errors = [];
            let message = "Validation error";
            for (const field of fields) {
              errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), "unique violation", field, this.instance && this.instance[field], this.instance, "not_unique"));
            }
            if (this.model) {
              _.forOwn(this.model.uniqueKeys, (constraint) => {
                if (_.isEqual(constraint.fields, fields) && !!constraint.msg) {
                  message = constraint.msg;
                  return false;
                }
              });
            }
            return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });
          }
          case "SQLITE_BUSY":
            return new sequelizeErrors.TimeoutError(err, { stack: errStack });
          default:
            return new sequelizeErrors.DatabaseError(err, { stack: errStack });
        }
      }
      async handleShowIndexesQuery(data) {
        return Promise.all(data.reverse().map(async (item) => {
          item.fields = [];
          item.primary = false;
          item.unique = !!item.unique;
          item.constraintName = item.name;
          const columns = await this.run(`PRAGMA INDEX_INFO(\`${item.name}\`)`);
          for (const column of columns) {
            item.fields[column.seqno] = {
              attribute: column.name,
              length: void 0,
              order: void 0
            };
          }
          return item;
        }));
      }
      getDatabaseMethod() {
        if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().includes("CREATE TEMPORARY TABLE".toLowerCase()) || this.options.type === QueryTypes2.BULKDELETE) {
          return "run";
        }
        return "all";
      }
    };
    module.exports = Query;
    module.exports.Query = Query;
    module.exports.default = Query;
  }
});

// node_modules/sequelize/lib/dialects/sqlite/query-generator.js
var require_query_generator6 = __commonJS({
  "node_modules/sequelize/lib/dialects/sqlite/query-generator.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var Utils2 = require_utils();
    var Transaction2 = require_transaction();
    var _ = require_lodash();
    var MySqlQueryGenerator = require_query_generator2();
    var AbstractQueryGenerator = require_query_generator();
    var SQLiteQueryGenerator = class extends MySqlQueryGenerator {
      createSchema() {
        return "SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';";
      }
      showSchemasQuery() {
        return "SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';";
      }
      versionQuery() {
        return "SELECT sqlite_version() as `version`";
      }
      createTableQuery(tableName, attributes, options) {
        options = options || {};
        const primaryKeys = [];
        const needsMultiplePrimaryKeys = Object.values(attributes).filter((definition) => definition.includes("PRIMARY KEY")).length > 1;
        const attrArray = [];
        for (const attr in attributes) {
          if (Object.prototype.hasOwnProperty.call(attributes, attr)) {
            const dataType = attributes[attr];
            const containsAutoIncrement = dataType.includes("AUTOINCREMENT");
            let dataTypeString = dataType;
            if (dataType.includes("PRIMARY KEY")) {
              if (dataType.includes("INT")) {
                dataTypeString = containsAutoIncrement ? "INTEGER PRIMARY KEY AUTOINCREMENT" : "INTEGER PRIMARY KEY";
                if (dataType.includes(" REFERENCES")) {
                  dataTypeString += dataType.substr(dataType.indexOf(" REFERENCES"));
                }
              }
              if (needsMultiplePrimaryKeys) {
                primaryKeys.push(attr);
                if (dataType.includes("NOT NULL")) {
                  dataTypeString = dataType.replace(" PRIMARY KEY", "");
                } else {
                  dataTypeString = dataType.replace("PRIMARY KEY", "NOT NULL");
                }
              }
            }
            attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);
          }
        }
        const table = this.quoteTable(tableName);
        let attrStr = attrArray.join(", ");
        const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(", ");
        if (options.uniqueKeys) {
          _.each(options.uniqueKeys, (columns) => {
            if (columns.customIndex) {
              attrStr += `, UNIQUE (${columns.fields.map((field) => this.quoteIdentifier(field)).join(", ")})`;
            }
          });
        }
        if (pkString.length > 0) {
          attrStr += `, PRIMARY KEY (${pkString})`;
        }
        const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;
        return this.replaceBooleanDefaults(sql);
      }
      booleanValue(value) {
        return value ? 1 : 0;
      }
      _checkValidJsonStatement(stmt) {
        if (typeof stmt !== "string") {
          return false;
        }
        const jsonFunctionRegex = /^\s*(json(?:_[a-z]+){0,2})\([^)]*\)/i;
        const tokenCaptureRegex = /^\s*((?:([`"'])(?:(?!\2).|\2{2})*\2)|[\w\d\s]+|[().,;+-])/i;
        let currentIndex = 0;
        let openingBrackets = 0;
        let closingBrackets = 0;
        let hasJsonFunction = false;
        let hasInvalidToken = false;
        while (currentIndex < stmt.length) {
          const string = stmt.substr(currentIndex);
          const functionMatches = jsonFunctionRegex.exec(string);
          if (functionMatches) {
            currentIndex += functionMatches[0].indexOf("(");
            hasJsonFunction = true;
            continue;
          }
          const tokenMatches = tokenCaptureRegex.exec(string);
          if (tokenMatches) {
            const capturedToken = tokenMatches[1];
            if (capturedToken === "(") {
              openingBrackets++;
            } else if (capturedToken === ")") {
              closingBrackets++;
            } else if (capturedToken === ";") {
              hasInvalidToken = true;
              break;
            }
            currentIndex += tokenMatches[0].length;
            continue;
          }
          break;
        }
        hasInvalidToken |= openingBrackets !== closingBrackets;
        if (hasJsonFunction && hasInvalidToken) {
          throw new Error(`Invalid json statement: ${stmt}`);
        }
        return hasJsonFunction;
      }
      _toJSONValue(value) {
        if (value instanceof Date) {
          return value.toISOString();
        }
        if (Array.isArray(value) && value[0] instanceof Date) {
          return value.map((val) => val.toISOString());
        }
        return value;
      }
      handleSequelizeMethod(smth, tableName, factory, options, prepend) {
        if (smth instanceof Utils2.Json) {
          return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);
        }
        if (smth instanceof Utils2.Cast) {
          if (/timestamp/i.test(smth.type)) {
            smth.type = "datetime";
          }
        }
        return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);
      }
      addColumnQuery(table, key, dataType) {
        const attributes = {};
        attributes[key] = dataType;
        const fields = this.attributesToSQL(attributes, { context: "addColumn" });
        const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;
        const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;
        return this.replaceBooleanDefaults(sql);
      }
      showTablesQuery() {
        return "SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';";
      }
      updateQuery(tableName, attrValueHash, where2, options, attributes) {
        options = options || {};
        _.defaults(options, this.options);
        attrValueHash = Utils2.removeNullValuesFromHash(attrValueHash, options.omitNull, options);
        const modelAttributeMap = {};
        const values = [];
        const bind = [];
        const bindParam = options.bindParam || this.bindParam(bind);
        if (attributes) {
          _.each(attributes, (attribute, key) => {
            modelAttributeMap[key] = attribute;
            if (attribute.field) {
              modelAttributeMap[attribute.field] = attribute;
            }
          });
        }
        for (const key in attrValueHash) {
          const value = attrValueHash[key];
          if (value instanceof Utils2.SequelizeMethod || options.bindParam === false) {
            values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || void 0, { context: "UPDATE" })}`);
          } else {
            values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || void 0, { context: "UPDATE" }, bindParam)}`);
          }
        }
        let query;
        const whereOptions = __spreadProps(__spreadValues({}, options), { bindParam });
        if (options.limit) {
          query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(",")} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where2, whereOptions)} LIMIT ${this.escape(options.limit)})`;
        } else {
          query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(",")} ${this.whereQuery(where2, whereOptions)}`;
        }
        return { query, bind };
      }
      truncateTableQuery(tableName, options = {}) {
        return [
          `DELETE FROM ${this.quoteTable(tableName)}`,
          options.restartIdentity ? `; DELETE FROM ${this.quoteTable("sqlite_sequence")} WHERE ${this.quoteIdentifier("name")} = ${Utils2.addTicks(Utils2.removeTicks(this.quoteTable(tableName), "`"), "'")};` : ""
        ].join("");
      }
      deleteQuery(tableName, where2, options = {}, model) {
        _.defaults(options, this.options);
        let whereClause = this.getWhereConditions(where2, null, model, options);
        if (whereClause) {
          whereClause = `WHERE ${whereClause}`;
        }
        if (options.limit) {
          whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;
        }
        return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;
      }
      attributesToSQL(attributes) {
        const result = {};
        for (const name in attributes) {
          const dataType = attributes[name];
          const fieldName = dataType.field || name;
          if (_.isObject(dataType)) {
            let sql = dataType.type.toString();
            if (Object.prototype.hasOwnProperty.call(dataType, "allowNull") && !dataType.allowNull) {
              sql += " NOT NULL";
            }
            if (Utils2.defaultValueSchemable(dataType.defaultValue)) {
              sql += ` DEFAULT ${this.escape(dataType.defaultValue, dataType)}`;
            }
            if (dataType.unique === true) {
              sql += " UNIQUE";
            }
            if (dataType.primaryKey) {
              sql += " PRIMARY KEY";
              if (dataType.autoIncrement) {
                sql += " AUTOINCREMENT";
              }
            }
            if (dataType.references) {
              const referencesTable = this.quoteTable(dataType.references.model);
              let referencesKey;
              if (dataType.references.key) {
                referencesKey = this.quoteIdentifier(dataType.references.key);
              } else {
                referencesKey = this.quoteIdentifier("id");
              }
              sql += ` REFERENCES ${referencesTable} (${referencesKey})`;
              if (dataType.onDelete) {
                sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;
              }
              if (dataType.onUpdate) {
                sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;
              }
            }
            result[fieldName] = sql;
          } else {
            result[fieldName] = dataType;
          }
        }
        return result;
      }
      showIndexesQuery(tableName) {
        return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;
      }
      showConstraintsQuery(tableName, constraintName) {
        let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;
        if (constraintName) {
          sql += ` AND sql LIKE '%${constraintName}%'`;
        }
        return `${sql};`;
      }
      removeIndexQuery(tableName, indexNameOrAttributes) {
        let indexName = indexNameOrAttributes;
        if (typeof indexName !== "string") {
          indexName = Utils2.underscore(`${tableName}_${indexNameOrAttributes.join("_")}`);
        }
        return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;
      }
      describeTableQuery(tableName, schema, schemaDelimiter) {
        const table = {
          _schema: schema,
          _schemaDelimiter: schemaDelimiter,
          tableName
        };
        return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;
      }
      describeCreateTableQuery(tableName) {
        return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;
      }
      removeColumnQuery(tableName, attributes) {
        attributes = this.attributesToSQL(attributes);
        let backupTableName;
        if (typeof tableName === "object") {
          backupTableName = {
            tableName: `${tableName.tableName}_backup`,
            schema: tableName.schema
          };
        } else {
          backupTableName = `${tableName}_backup`;
        }
        const quotedTableName = this.quoteTable(tableName);
        const quotedBackupTableName = this.quoteTable(backupTableName);
        const attributeNames = Object.keys(attributes).map((attr) => this.quoteIdentifier(attr)).join(", ");
        return `${this.createTableQuery(backupTableName, attributes)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};DROP TABLE ${quotedTableName};${this.createTableQuery(tableName, attributes)}INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};DROP TABLE ${quotedBackupTableName};`;
      }
      _alterConstraintQuery(tableName, attributes, createTableSql) {
        let backupTableName;
        attributes = this.attributesToSQL(attributes);
        if (typeof tableName === "object") {
          backupTableName = {
            tableName: `${tableName.tableName}_backup`,
            schema: tableName.schema
          };
        } else {
          backupTableName = `${tableName}_backup`;
        }
        const quotedTableName = this.quoteTable(tableName);
        const quotedBackupTableName = this.quoteTable(backupTableName);
        const attributeNames = Object.keys(attributes).map((attr) => this.quoteIdentifier(attr)).join(", ");
        return `${createTableSql.replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`).replace(`CREATE TABLE ${quotedTableName.replace(/`/g, '"')}`, `CREATE TABLE ${quotedBackupTableName}`)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};DROP TABLE ${quotedTableName};ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;
      }
      renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {
        let backupTableName;
        attributes = this.attributesToSQL(attributes);
        if (typeof tableName === "object") {
          backupTableName = {
            tableName: `${tableName.tableName}_backup`,
            schema: tableName.schema
          };
        } else {
          backupTableName = `${tableName}_backup`;
        }
        const quotedTableName = this.quoteTable(tableName);
        const quotedBackupTableName = this.quoteTable(backupTableName);
        const attributeNamesImport = Object.keys(attributes).map((attr) => attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)).join(", ");
        const attributeNamesExport = Object.keys(attributes).map((attr) => this.quoteIdentifier(attr)).join(", ");
        return `${this.createTableQuery(backupTableName, attributes)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};DROP TABLE ${quotedTableName};${this.createTableQuery(tableName, attributes)}INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};DROP TABLE ${quotedBackupTableName};`;
      }
      startTransactionQuery(transaction) {
        if (transaction.parent) {
          return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;
        }
        return `BEGIN ${transaction.options.type} TRANSACTION;`;
      }
      setIsolationLevelQuery(value) {
        switch (value) {
          case Transaction2.ISOLATION_LEVELS.REPEATABLE_READ:
            return "-- SQLite is not able to choose the isolation level REPEATABLE READ.";
          case Transaction2.ISOLATION_LEVELS.READ_UNCOMMITTED:
            return "PRAGMA read_uncommitted = ON;";
          case Transaction2.ISOLATION_LEVELS.READ_COMMITTED:
            return "PRAGMA read_uncommitted = OFF;";
          case Transaction2.ISOLATION_LEVELS.SERIALIZABLE:
            return "-- SQLite's default isolation level is SERIALIZABLE. Nothing to do.";
          default:
            throw new Error(`Unknown isolation level: ${value}`);
        }
      }
      replaceBooleanDefaults(sql) {
        return sql.replace(/DEFAULT '?false'?/g, "DEFAULT 0").replace(/DEFAULT '?true'?/g, "DEFAULT 1");
      }
      getForeignKeysQuery(tableName) {
        return `PRAGMA foreign_key_list(${this.quoteTable(this.addSchema(tableName))})`;
      }
      quoteIdentifier(identifier2, force) {
        return Utils2.addTicks(Utils2.removeTicks(identifier2, "`"), "`");
      }
    };
    module.exports = SQLiteQueryGenerator;
  }
});

// node_modules/sequelize/lib/dialects/sqlite/query-interface.js
var require_query_interface5 = __commonJS({
  "node_modules/sequelize/lib/dialects/sqlite/query-interface.js"(exports) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var sequelizeErrors = require_errors();
    var QueryTypes2 = require_query_types();
    var { QueryInterface: QueryInterface2 } = require_query_interface();
    var { cloneDeep } = require_utils();
    var _ = require_lodash();
    var SQLiteQueryInterface = class extends QueryInterface2 {
      async removeColumn(tableName, attributeName, options) {
        options = options || {};
        const fields = await this.describeTable(tableName, options);
        delete fields[attributeName];
        const sql = this.queryGenerator.removeColumnQuery(tableName, fields);
        const subQueries = sql.split(";").filter((q) => q !== "");
        for (const subQuery of subQueries)
          await this.sequelize.query(`${subQuery};`, __spreadValues({ raw: true }, options));
      }
      async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {
        options = options || {};
        const fields = await this.describeTable(tableName, options);
        Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));
        const sql = this.queryGenerator.removeColumnQuery(tableName, fields);
        const subQueries = sql.split(";").filter((q) => q !== "");
        for (const subQuery of subQueries)
          await this.sequelize.query(`${subQuery};`, __spreadValues({ raw: true }, options));
      }
      async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {
        options = options || {};
        const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);
        fields[attrNameAfter] = __spreadValues({}, fields[attrNameBefore]);
        delete fields[attrNameBefore];
        const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);
        const subQueries = sql.split(";").filter((q) => q !== "");
        for (const subQuery of subQueries)
          await this.sequelize.query(`${subQuery};`, __spreadValues({ raw: true }, options));
      }
      async removeConstraint(tableName, constraintName, options) {
        let createTableSql;
        const constraints = await this.showConstraint(tableName, constraintName);
        const constraint = constraints.find((constaint) => constaint.constraintName === constraintName);
        if (!constraint) {
          throw new sequelizeErrors.UnknownConstraintError({
            message: `Constraint ${constraintName} on table ${tableName} does not exist`,
            constraint: constraintName,
            table: tableName
          });
        }
        createTableSql = constraint.sql;
        constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);
        let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;
        if (constraint.constraintType === "FOREIGN KEY") {
          const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);
          constraint.referenceTableKeys = constraint.referenceTableKeys.map((columnName) => this.queryGenerator.quoteIdentifier(columnName));
          const referenceTableKeys = constraint.referenceTableKeys.join(", ");
          constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;
          constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;
          constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;
        }
        createTableSql = createTableSql.replace(constraintSnippet, "");
        createTableSql += ";";
        const fields = await this.describeTable(tableName, options);
        const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);
        const subQueries = sql.split(";").filter((q) => q !== "");
        for (const subQuery of subQueries)
          await this.sequelize.query(`${subQuery};`, __spreadValues({ raw: true }, options));
      }
      async addConstraint(tableName, options) {
        if (!options.fields) {
          throw new Error("Fields must be specified through options.fields");
        }
        if (!options.type) {
          throw new Error("Constraint type must be specified through options.type");
        }
        options = cloneDeep(options);
        const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);
        const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);
        const constraints = await this.sequelize.query(describeCreateTableSql, __spreadProps(__spreadValues({}, options), { type: QueryTypes2.SELECT, raw: true }));
        let sql = constraints[0].sql;
        const index = sql.length - 1;
        const createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;
        const fields = await this.describeTable(tableName, options);
        sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);
        const subQueries = sql.split(";").filter((q) => q !== "");
        for (const subQuery of subQueries)
          await this.sequelize.query(`${subQuery};`, __spreadValues({ raw: true }, options));
      }
      async getForeignKeyReferencesForTable(tableName, options) {
        const database = this.sequelize.config.database;
        const query = this.queryGenerator.getForeignKeysQuery(tableName, database);
        const result = await this.sequelize.query(query, options);
        return result.map((row) => ({
          tableName,
          columnName: row.from,
          referencedTableName: row.table,
          referencedColumnName: row.to,
          tableCatalog: database,
          referencedTableCatalog: database
        }));
      }
      async dropAllTables(options) {
        options = options || {};
        const skip = options.skip || [];
        const tableNames = await this.showAllTables(options);
        await this.sequelize.query("PRAGMA foreign_keys = OFF", options);
        await this._dropAllTables(tableNames, skip, options);
        await this.sequelize.query("PRAGMA foreign_keys = ON", options);
      }
      async describeTable(tableName, options) {
        let schema = null;
        let schemaDelimiter = null;
        if (typeof options === "string") {
          schema = options;
        } else if (typeof options === "object" && options !== null) {
          schema = options.schema || null;
          schemaDelimiter = options.schemaDelimiter || null;
        }
        if (typeof tableName === "object" && tableName !== null) {
          schema = tableName.schema;
          tableName = tableName.tableName;
        }
        const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);
        options = __spreadProps(__spreadValues({}, options), { type: QueryTypes2.DESCRIBE });
        const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);
        try {
          const data = await this.sequelize.query(sql, options);
          if (_.isEmpty(data)) {
            throw new Error(`No description found for "${tableName}" table. Check the table name and schema; remember, they _are_ case sensitive.`);
          }
          const indexes = await this.sequelize.query(sqlIndexes, options);
          for (const prop in data) {
            data[prop].unique = false;
          }
          for (const index of indexes) {
            for (const field of index.fields) {
              if (index.unique !== void 0) {
                data[field.attribute].unique = index.unique;
              }
            }
          }
          const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);
          for (const foreignKey of foreignKeys) {
            data[foreignKey.columnName].references = {
              model: foreignKey.referencedTableName,
              key: foreignKey.referencedColumnName
            };
          }
          return data;
        } catch (e) {
          if (e.original && e.original.code === "ER_NO_SUCH_TABLE") {
            throw new Error(`No description found for "${tableName}" table. Check the table name and schema; remember, they _are_ case sensitive.`);
          }
          throw e;
        }
      }
    };
    exports.SQLiteQueryInterface = SQLiteQueryInterface;
  }
});

// node_modules/sequelize/lib/dialects/sqlite/index.js
var require_sqlite = __commonJS({
  "node_modules/sequelize/lib/dialects/sqlite/index.js"(exports, module) {
    "use strict";
    var _ = require_lodash();
    var AbstractDialect = require_abstract();
    var ConnectionManager = require_connection_manager6();
    var Query = require_query6();
    var QueryGenerator = require_query_generator6();
    var DataTypes2 = require_data_types8().sqlite;
    var { SQLiteQueryInterface } = require_query_interface5();
    var SqliteDialect = class extends AbstractDialect {
      constructor(sequelize) {
        super();
        this.sequelize = sequelize;
        this.connectionManager = new ConnectionManager(this, sequelize);
        this.queryGenerator = new QueryGenerator({
          _dialect: this,
          sequelize
        });
        this.queryInterface = new SQLiteQueryInterface(sequelize, this.queryGenerator);
      }
    };
    SqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {
      DEFAULT: false,
      "DEFAULT VALUES": true,
      "UNION ALL": false,
      "RIGHT JOIN": false,
      inserts: {
        ignoreDuplicates: " OR IGNORE",
        updateOnDuplicate: " ON CONFLICT DO UPDATE SET",
        conflictFields: true
      },
      index: {
        using: false,
        where: true,
        functionBased: true
      },
      transactionOptions: {
        type: true
      },
      constraints: {
        addConstraint: false,
        dropConstraint: false
      },
      groupedLimit: false,
      JSON: true
    });
    SqliteDialect.prototype.defaultVersion = "3.8.0";
    SqliteDialect.prototype.Query = Query;
    SqliteDialect.prototype.DataTypes = DataTypes2;
    SqliteDialect.prototype.name = "sqlite";
    SqliteDialect.prototype.TICK_CHAR = "`";
    SqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;
    SqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;
    module.exports = SqliteDialect;
    module.exports.SqliteDialect = SqliteDialect;
    module.exports.default = SqliteDialect;
  }
});

// node_modules/sequelize/lib/dialects/db2/connection-manager.js
var require_connection_manager7 = __commonJS({
  "node_modules/sequelize/lib/dialects/db2/connection-manager.js"(exports, module) {
    "use strict";
    var AbstractConnectionManager = require_connection_manager();
    var sequelizeErrors = require_errors();
    var { logger } = require_logger();
    var DataTypes2 = require_data_types8().db2;
    var debug = logger.debugContext("connection:db2");
    var parserStore = require_parserStore()("db2");
    var ConnectionManager = class extends AbstractConnectionManager {
      constructor(dialect, sequelize) {
        sequelize.config.port = sequelize.config.port || 3306;
        super(dialect, sequelize);
        this.lib = this._loadDialectModule("ibm_db");
        this.refreshTypeParser(DataTypes2);
      }
      static _typecast(field, next) {
        if (parserStore.get(field.type)) {
          return parserStore.get(field.type)(field, this.sequelize.options, next);
        }
        return next();
      }
      _refreshTypeParser(dataType) {
        parserStore.refresh(dataType);
      }
      _clearTypeParser() {
        parserStore.clear();
      }
      async connect(config) {
        const connectionConfig = {
          database: config.database,
          hostname: config.host,
          port: config.port,
          uid: config.username,
          pwd: config.password
        };
        if (config.ssl) {
          connectionConfig["security"] = config.ssl;
        }
        if (config.sslcertificate) {
          connectionConfig["SSLServerCertificate"] = config.sslcertificate;
        }
        if (config.dialectOptions) {
          for (const key of Object.keys(config.dialectOptions)) {
            connectionConfig[key] = config.dialectOptions[key];
          }
        }
        try {
          const connection = await new Promise((resolve, reject) => {
            const connection2 = new this.lib.Database();
            connection2.lib = this.lib;
            connection2.open(connectionConfig, (error) => {
              if (error) {
                if (error.message && error.message.includes("SQL30081N")) {
                  return reject(new sequelizeErrors.ConnectionRefusedError(error));
                }
                return reject(new sequelizeErrors.ConnectionError(error));
              }
              return resolve(connection2);
            });
          });
          return connection;
        } catch (err) {
          throw new sequelizeErrors.ConnectionError(err);
        }
      }
      disconnect(connection) {
        if (connection.connected) {
          connection.close((error) => {
            if (error) {
              debug(error);
            } else {
              debug("connection closed");
            }
          });
        }
        return Promise.resolve();
      }
      validate(connection) {
        return connection && connection.connected;
      }
      _disconnect(connection) {
        return this.dialect.connectionManager.disconnect(connection);
      }
    };
    module.exports = ConnectionManager;
    module.exports.ConnectionManager = ConnectionManager;
    module.exports.default = ConnectionManager;
  }
});

// node_modules/sequelize/lib/dialects/db2/query.js
var require_query7 = __commonJS({
  "node_modules/sequelize/lib/dialects/db2/query.js"(exports, module) {
    "use strict";
    var AbstractQuery = require_query();
    var sequelizeErrors = require_errors();
    var parserStore = require_parserStore()("db2");
    var _ = require_lodash();
    var { logger } = require_logger();
    var moment = require_moment();
    var debug = logger.debugContext("sql:db2");
    var Query = class extends AbstractQuery {
      getInsertIdField() {
        return "id";
      }
      getSQLTypeFromJsType(value) {
        const param = { ParamType: "INPUT", Data: value };
        if (Buffer.isBuffer(value)) {
          param.DataType = "BLOB";
          return param;
        }
        return value;
      }
      async _run(connection, sql, parameters) {
        this.sql = sql;
        const benchmark = this.sequelize.options.benchmark || this.options.benchmark;
        let queryBegin;
        if (benchmark) {
          queryBegin = Date.now();
        } else {
          this.sequelize.log(`Executing (${this.connection.uuid || "default"}): ${this.sql}`, this.options);
        }
        const errStack = new Error().stack;
        return new Promise((resolve, reject) => {
          if (_.startsWith(this.sql, "BEGIN TRANSACTION")) {
            connection.beginTransaction((err) => {
              if (err) {
                reject(this.formatError(err, errStack));
              } else {
                resolve(this.formatResults());
              }
            });
          } else if (_.startsWith(this.sql, "COMMIT TRANSACTION")) {
            connection.commitTransaction((err) => {
              if (err) {
                reject(this.formatError(err, errStack));
              } else {
                resolve(this.formatResults());
              }
            });
          } else if (_.startsWith(this.sql, "ROLLBACK TRANSACTION")) {
            connection.rollbackTransaction((err) => {
              if (err) {
                reject(this.formatError(err, errStack));
              } else {
                resolve(this.formatResults());
              }
            });
          } else if (_.startsWith(this.sql, "SAVE TRANSACTION")) {
            connection.commitTransaction((err) => {
              if (err) {
                reject(this.formatError(err, errStack));
              } else {
                connection.beginTransaction((err2) => {
                  if (err2) {
                    reject(this.formatError(err2, errStack));
                  } else {
                    resolve(this.formatResults());
                  }
                });
              }
            }, this.options.transaction.name);
          } else {
            const params = [];
            if (parameters) {
              _.forOwn(parameters, (value, key) => {
                const param = this.getSQLTypeFromJsType(value, key);
                params.push(param);
              });
            }
            const SQL = this.sql.toUpperCase();
            let newSql = this.sql;
            if ((this.isSelectQuery() || _.startsWith(SQL, "SELECT ")) && SQL.indexOf(" FROM ", 8) === -1) {
              if (this.sql.charAt(this.sql.length - 1) === ";") {
                newSql = this.sql.slice(0, this.sql.length - 1);
              }
              newSql += " FROM SYSIBM.SYSDUMMY1;";
            }
            connection.prepare(newSql, (err, stmt) => {
              if (err) {
                reject(this.formatError(err, errStack));
              }
              stmt.execute(params, (err2, result, outparams) => {
                debug(`executed(${this.connection.uuid || "default"}):${newSql} ${parameters ? JSON.stringify(parameters) : ""}`);
                if (benchmark) {
                  this.sequelize.log(`Executed (${this.connection.uuid || "default"}): ${newSql} ${parameters ? JSON.stringify(parameters) : ""}`, Date.now() - queryBegin, this.options);
                }
                if (err2 && err2.message) {
                  err2 = this.filterSQLError(err2, this.sql, connection);
                  if (err2 === null) {
                    stmt.closeSync();
                    resolve(this.formatResults([], 0));
                  }
                }
                if (err2) {
                  err2.sql = sql;
                  stmt.closeSync();
                  reject(this.formatError(err2, errStack, connection, parameters));
                } else {
                  let data = [];
                  let metadata = [];
                  let affectedRows = 0;
                  if (typeof result === "object") {
                    if (_.startsWith(this.sql, "DELETE FROM ")) {
                      affectedRows = result.getAffectedRowsSync();
                    } else {
                      data = result.fetchAllSync();
                      metadata = result.getColumnMetadataSync();
                    }
                    result.closeSync();
                  }
                  stmt.closeSync();
                  const datalen = data.length;
                  if (datalen > 0) {
                    const coltypes = {};
                    for (let i = 0; i < metadata.length; i++) {
                      coltypes[metadata[i].SQL_DESC_NAME] = metadata[i].SQL_DESC_TYPE_NAME;
                    }
                    for (let i = 0; i < datalen; i++) {
                      for (const column in data[i]) {
                        const parse = parserStore.get(coltypes[column]);
                        const value = data[i][column];
                        if (value !== null) {
                          if (parse) {
                            data[i][column] = parse(value);
                          } else if (coltypes[column] === "TIMESTAMP") {
                            data[i][column] = new Date(moment.utc(value));
                          } else if (coltypes[column] === "BLOB") {
                            data[i][column] = new Buffer.from(value);
                          } else if (coltypes[column].indexOf("FOR BIT DATA") > 0) {
                            data[i][column] = new Buffer.from(value, "hex");
                          }
                        }
                      }
                    }
                    if (outparams && outparams.length) {
                      data.unshift(outparams);
                    }
                    resolve(this.formatResults(data, datalen, metadata, connection));
                  } else {
                    resolve(this.formatResults(data, affectedRows));
                  }
                }
              });
            });
          }
        });
      }
      async run(sql, parameters) {
        return await this._run(this.connection, sql, parameters);
      }
      static formatBindParameters(sql, values, dialect) {
        let bindParam = {};
        const replacementFunc = (match, key, values2) => {
          if (values2[key] !== void 0) {
            bindParam[key] = values2[key];
            return "?";
          }
          return void 0;
        };
        sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];
        if (Array.isArray(values) && typeof values[0] === "object") {
          bindParam = values;
        }
        return [sql, bindParam];
      }
      filterSQLError(err, sql, connection) {
        if (err.message.search("SQL0204N") != -1 && _.startsWith(sql, "DROP ")) {
          err = null;
        } else if (err.message.search("SQL0443N") != -1) {
          if (this.isDropSchemaQuery()) {
            connection.querySync("DROP TABLE ERRORSCHEMA.ERRORTABLE;");
            connection.querySync(this.sql);
          }
          err = null;
        } else if (err.message.search("SQL0601N") != -1) {
          const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name "(.*)" of type "(.*)"./);
          if (match && match.length > 1 && match[2] === "TABLE") {
            let table;
            const mtarray = match[1].split(".");
            if (mtarray[1]) {
              table = `"${mtarray[0]}"."${mtarray[1]}"`;
            } else {
              table = `"${mtarray[0]}"`;
            }
            if (connection.dropTable !== false) {
              connection.querySync(`DROP TABLE ${table}`);
              err = connection.querySync(sql);
            } else {
              err = null;
            }
          } else {
            err = null;
          }
        } else if (err.message.search("SQL0911N") != -1) {
          if (err.message.search('Reason code "2"') != -1) {
            err = null;
          }
        } else if (err.message.search("SQL0605W") != -1) {
          err = null;
        } else if (err.message.search("SQL0668N") != -1 && _.startsWith(sql, "ALTER TABLE ")) {
          connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(" ")[0]}')`);
          err = connection.querySync(sql);
        }
        if (err && err.length === 0) {
          err = null;
        }
        return err;
      }
      formatResults(data, rowCount, metadata, conn) {
        let result = this.instance;
        if (this.isInsertQuery(data, metadata)) {
          this.handleInsertQuery(data, metadata);
          if (!this.instance) {
            if (this.options.plain) {
              const record = data[0];
              result = record[Object.keys(record)[0]];
            } else {
              result = data;
            }
          }
        }
        if (this.isShowTablesQuery()) {
          result = data;
        } else if (this.isDescribeQuery()) {
          result = {};
          for (const _result of data) {
            if (_result.Default) {
              _result.Default = _result.Default.replace("('", "").replace("')", "").replace(/'/g, "");
            }
            result[_result.Name] = {
              type: _result.Type.toUpperCase(),
              allowNull: _result.IsNull === "Y" ? true : false,
              defaultValue: _result.Default,
              primaryKey: _result.KeySeq > 0,
              autoIncrement: _result.IsIdentity === "Y" ? true : false,
              comment: _result.Comment
            };
          }
        } else if (this.isShowIndexesQuery()) {
          result = this.handleShowIndexesQuery(data);
        } else if (this.isSelectQuery()) {
          result = this.handleSelectQuery(data);
        } else if (this.isUpsertQuery()) {
          result = data;
        } else if (this.isDropSchemaQuery()) {
          result = data[0];
          if (conn) {
            const query = "DROP TABLE ERRORSCHEMA.ERRORTABLE";
            conn.querySync(query);
          }
        } else if (this.isCallQuery()) {
          result = data;
        } else if (this.isBulkUpdateQuery()) {
          result = data.length;
        } else if (this.isBulkDeleteQuery()) {
          result = rowCount;
        } else if (this.isVersionQuery()) {
          result = data[0].VERSION;
        } else if (this.isForeignKeysQuery()) {
          result = data;
        } else if (this.isInsertQuery() || this.isUpdateQuery()) {
          result = [result, rowCount];
        } else if (this.isShowConstraintsQuery()) {
          result = this.handleShowConstraintsQuery(data);
        } else if (this.isRawQuery()) {
          result = [data, metadata];
        } else {
          result = data;
        }
        return result;
      }
      handleShowTablesQuery(results) {
        return results.map((resultSet) => {
          return {
            tableName: resultSet.TABLE_NAME,
            schema: resultSet.TABLE_SCHEMA
          };
        });
      }
      handleShowConstraintsQuery(data) {
        return _.remove(data, (constraint) => {
          return !_.startsWith(constraint.constraintName, "SQL");
        });
      }
      formatError(err, errStack, conn, parameters) {
        let match;
        if (!(err && err.message)) {
          err["message"] = "No error message found.";
        }
        match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by "(\d)+" constrains table "(.*)\.(.*)" from having duplicate values for the index key./);
        if (match && match.length > 0) {
          let uniqueIndexName = "";
          let uniqueKey = "";
          const fields = {};
          let message = err.message;
          const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;
          if (!!conn && match.length > 3) {
            uniqueIndexName = conn.querySync(query);
            uniqueIndexName = uniqueIndexName[0]["INDNAME"];
          }
          if (this.model && !!uniqueIndexName) {
            uniqueKey = this.model.uniqueKeys[uniqueIndexName];
          }
          if (!uniqueKey && this.options.fields) {
            uniqueKey = this.options.fields[match[1] - 1];
          }
          if (uniqueKey) {
            if (this.options.where && this.options.where[uniqueKey.column] !== void 0) {
              fields[uniqueKey.column] = this.options.where[uniqueKey.column];
            } else if (this.options.instance && this.options.instance.dataValues && this.options.instance.dataValues[uniqueKey.column]) {
              fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];
            } else if (parameters) {
              fields[uniqueKey.column] = parameters["0"];
            }
          }
          if (uniqueKey && !!uniqueKey.msg) {
            message = uniqueKey.msg;
          }
          const errors = [];
          _.forOwn(fields, (value, field) => {
            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), "unique violation", field, value, this.instance, "not_unique"));
          });
          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });
        }
        match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship "(.*)" restricts the deletion/) || err.message.match(/SQL0530N/) || err.message.match(/SQL0531N/);
        if (match && match.length > 0) {
          return new sequelizeErrors.ForeignKeyConstraintError({
            fields: null,
            index: match[1],
            parent: err,
            stack: errStack
          });
        }
        match = err.message.match(/SQL0204N {2}"(.*)" is an undefined name./);
        if (match && match.length > 1) {
          const constraint = match[1];
          let table = err.sql.match(/table "(.+?)"/i);
          table = table ? table[1] : void 0;
          return new sequelizeErrors.UnknownConstraintError({
            message: match[0],
            constraint,
            table,
            parent: err,
            stack: errStack
          });
        }
        return new sequelizeErrors.DatabaseError(err, { stack: errStack });
      }
      isDropSchemaQuery() {
        let result = false;
        if (_.startsWith(this.sql, "CALL SYSPROC.ADMIN_DROP_SCHEMA")) {
          result = true;
        }
        return result;
      }
      isShowOrDescribeQuery() {
        let result = false;
        result = result || this.sql.toLowerCase().startsWith("select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'");
        result = result || this.sql.toLowerCase().startsWith("select tablename = t.name, name = ind.name,");
        result = result || this.sql.toLowerCase().startsWith("exec sys.sp_helpindex @objname");
        return result;
      }
      isShowIndexesQuery() {
        let result = false;
        result = result || this.sql.toLowerCase().startsWith("exec sys.sp_helpindex @objname");
        result = result || this.sql.startsWith('SELECT NAME AS "name", TBNAME AS "tableName", UNIQUERULE AS "keyType", COLNAMES, INDEXTYPE AS "type" FROM SYSIBM.SYSINDEXES');
        return result;
      }
      handleShowIndexesQuery(data) {
        let currItem;
        const result = [];
        data.forEach((item) => {
          if (!currItem || currItem.name !== item.Key_name) {
            currItem = {
              primary: item.keyType === "P",
              fields: [],
              name: item.name,
              tableName: item.tableName,
              unique: item.keyType === "U",
              type: item.type
            };
            _.forEach(item.COLNAMES.replace(/\+|-/g, (x) => {
              return ` ${x}`;
            }).split(" "), (column) => {
              let columnName = column.trim();
              if (columnName) {
                columnName = columnName.replace(/\+|-/, "");
                currItem.fields.push({
                  attribute: columnName,
                  length: void 0,
                  order: column.indexOf("-") === -1 ? "ASC" : "DESC",
                  collate: void 0
                });
              }
            });
            result.push(currItem);
          }
        });
        return result;
      }
      handleInsertQuery(results, metaData) {
        if (this.instance) {
          const autoIncrementAttribute = this.model.autoIncrementAttribute;
          let id = null;
          let autoIncrementAttributeAlias = null;
          if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0)
            autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;
          id = id || results && results[0][this.getInsertIdField()];
          id = id || metaData && metaData[this.getInsertIdField()];
          id = id || results && results[0][autoIncrementAttribute];
          id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];
          this.instance[autoIncrementAttribute] = id;
        }
      }
    };
    module.exports = Query;
    module.exports.Query = Query;
    module.exports.default = Query;
  }
});

// node_modules/sequelize/lib/dialects/db2/query-generator.js
var require_query_generator7 = __commonJS({
  "node_modules/sequelize/lib/dialects/db2/query-generator.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var _ = require_lodash();
    var Utils2 = require_utils();
    var DataTypes2 = require_data_types8();
    var AbstractQueryGenerator = require_query_generator();
    var randomBytes = __require("crypto").randomBytes;
    var Op2 = require_operators();
    var throwMethodUndefined = function(methodName) {
      throw new Error(`The method "${methodName}" is not defined! Please add it to your sql dialect.`);
    };
    var Db2QueryGenerator = class extends AbstractQueryGenerator {
      constructor(options) {
        super(options);
        this.OperatorMap = __spreadProps(__spreadValues({}, this.OperatorMap), {
          [Op2.regexp]: "REGEXP_LIKE",
          [Op2.notRegexp]: "NOT REGEXP_LIKE"
        });
        this.autoGenValue = 1;
      }
      createSchema(schema) {
        return [
          "CREATE SCHEMA",
          this.quoteIdentifier(schema),
          ";"
        ].join(" ");
      }
      dropSchema(schema) {
        const query = `CALL SYSPROC.ADMIN_DROP_SCHEMA(${wrapSingleQuote(schema.trim())}, NULL, ? , ?)`;
        const sql = { query };
        sql.bind = [
          { ParamType: "INOUT", Data: "ERRORSCHEMA" },
          { ParamType: "INOUT", Data: "ERRORTABLE" }
        ];
        return sql;
      }
      showSchemasQuery() {
        return `SELECT SCHEMANAME AS "schema_name" FROM SYSCAT.SCHEMATA WHERE (SCHEMANAME NOT LIKE 'SYS%') AND SCHEMANAME NOT IN ('NULLID', 'SQLJ', 'ERRORSCHEMA')`;
      }
      versionQuery() {
        return "select service_level as VERSION from TABLE (sysproc.env_get_inst_info()) as A";
      }
      createTableQuery(tableName, attributes, options) {
        const query = "CREATE TABLE <%= table %> (<%= attributes %>)", primaryKeys = [], foreignKeys = {}, attrStr = [], commentTemplate = " -- <%= comment %>, TableName = <%= table %>, ColumnName = <%= column %>;";
        let commentStr = "";
        for (const attr in attributes) {
          if (Object.prototype.hasOwnProperty.call(attributes, attr)) {
            let dataType = attributes[attr];
            let match;
            if (dataType.includes("COMMENT ")) {
              const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);
              if (commentMatch && commentMatch.length > 2) {
                const commentText = commentMatch[2].replace(/COMMENT/, "").trim();
                commentStr += _.template(commentTemplate, this._templateSettings)({
                  table: this.quoteIdentifier(tableName),
                  comment: this.escape(commentText),
                  column: this.quoteIdentifier(attr)
                });
                dataType = commentMatch[1];
              }
            }
            if (_.includes(dataType, "PRIMARY KEY")) {
              primaryKeys.push(attr);
              if (_.includes(dataType, "REFERENCES")) {
                match = dataType.match(/^(.+) (REFERENCES.*)$/);
                attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace(/PRIMARY KEY/, "")}`);
                foreignKeys[attr] = match[2];
              } else {
                attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace(/PRIMARY KEY/, "")}`);
              }
            } else if (_.includes(dataType, "REFERENCES")) {
              match = dataType.match(/^(.+) (REFERENCES.*)$/);
              attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);
              foreignKeys[attr] = match[2];
            } else {
              if (options && options.uniqueKeys) {
                for (const ukey in options.uniqueKeys) {
                  if (options.uniqueKeys[ukey].fields.includes(attr) && !_.includes(dataType, "NOT NULL")) {
                    dataType += " NOT NULL";
                    break;
                  }
                }
              }
              attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);
            }
          }
        }
        const values = {
          table: this.quoteTable(tableName),
          attributes: attrStr.join(", ")
        }, pkString = primaryKeys.map((pk) => {
          return this.quoteIdentifier(pk);
        }).join(", ");
        if (options && options.uniqueKeys) {
          _.each(options.uniqueKeys, (columns, indexName) => {
            if (columns.customIndex) {
              if (!_.isString(indexName)) {
                indexName = `uniq_${tableName}_${columns.fields.join("_")}`;
              }
              values.attributes += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map((field) => this.quoteIdentifier(field)).join(", ")})`;
            }
          });
        }
        if (pkString.length > 0) {
          values.attributes += `, PRIMARY KEY (${pkString})`;
        }
        for (const fkey in foreignKeys) {
          if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {
            values.attributes += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;
          }
        }
        return `${_.template(query, this._templateSettings)(values).trim()};${commentStr}`;
      }
      describeTableQuery(tableName, schema) {
        let sql = [
          'SELECT NAME AS "Name", TBNAME AS "Table", TBCREATOR AS "Schema",',
          'TRIM(COLTYPE) AS "Type", LENGTH AS "Length", SCALE AS "Scale",',
          'NULLS AS "IsNull", DEFAULT AS "Default", COLNO AS "Colno",',
          'IDENTITY AS "IsIdentity", KEYSEQ AS "KeySeq", REMARKS AS "Comment"',
          "FROM",
          "SYSIBM.SYSCOLUMNS",
          "WHERE TBNAME =",
          wrapSingleQuote(tableName)
        ].join(" ");
        if (schema) {
          sql += ` AND TBCREATOR =${wrapSingleQuote(schema)}`;
        } else {
          sql += " AND TBCREATOR = USER";
        }
        return `${sql};`;
      }
      renameTableQuery(before, after) {
        const query = "RENAME TABLE <%= before %> TO <%= after %>;";
        return _.template(query, this._templateSettings)({
          before: this.quoteTable(before),
          after: this.quoteTable(after)
        });
      }
      showTablesQuery() {
        return `SELECT TABNAME AS "tableName", TRIM(TABSCHEMA) AS "tableSchema" FROM SYSCAT.TABLES WHERE TABSCHEMA = USER AND TYPE = 'T' ORDER BY TABSCHEMA, TABNAME`;
      }
      dropTableQuery(tableName) {
        const query = "DROP TABLE <%= table %>";
        const values = {
          table: this.quoteTable(tableName)
        };
        return `${_.template(query, this._templateSettings)(values).trim()};`;
      }
      addColumnQuery(table, key, dataType) {
        dataType.field = key;
        const query = "ALTER TABLE <%= table %> ADD <%= attribute %>;", attribute = _.template("<%= key %> <%= definition %>", this._templateSettings)({
          key: this.quoteIdentifier(key),
          definition: this.attributeToSQL(dataType, {
            context: "addColumn"
          })
        });
        return _.template(query, this._templateSettings)({
          table: this.quoteTable(table),
          attribute
        });
      }
      removeColumnQuery(tableName, attributeName) {
        const query = "ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;";
        return _.template(query, this._templateSettings)({
          tableName: this.quoteTable(tableName),
          attributeName: this.quoteIdentifier(attributeName)
        });
      }
      changeColumnQuery(tableName, attributes) {
        const query = "ALTER TABLE <%= tableName %> <%= query %>;";
        const attrString = [], constraintString = [];
        for (const attributeName in attributes) {
          const attrValue = attributes[attributeName];
          let defs = [attrValue];
          if (Array.isArray(attrValue)) {
            defs = attrValue;
          }
          for (let i = 0; i < defs.length; i++) {
            const definition = defs[i];
            if (definition.match(/REFERENCES/)) {
              constraintString.push(_.template("<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>", this._templateSettings)({
                fkName: this.quoteIdentifier(`${attributeName}_foreign_idx`),
                attrName: this.quoteIdentifier(attributeName),
                definition: definition.replace(/.+?(?=REFERENCES)/, "")
              }));
            } else if (_.startsWith(definition, "DROP ")) {
              attrString.push(_.template("<%= attrName %> <%= definition %>", this._templateSettings)({
                attrName: this.quoteIdentifier(attributeName),
                definition
              }));
            } else {
              attrString.push(_.template("<%= attrName %> SET <%= definition %>", this._templateSettings)({
                attrName: this.quoteIdentifier(attributeName),
                definition
              }));
            }
          }
        }
        let finalQuery = "";
        if (attrString.length) {
          finalQuery += `ALTER COLUMN ${attrString.join(" ALTER COLUMN ")}`;
          finalQuery += constraintString.length ? " " : "";
        }
        if (constraintString.length) {
          finalQuery += `ADD CONSTRAINT ${constraintString.join(" ADD CONSTRAINT ")}`;
        }
        return _.template(query, this._templateSettings)({
          tableName: this.quoteTable(tableName),
          query: finalQuery
        });
      }
      renameColumnQuery(tableName, attrBefore, attributes) {
        const query = "ALTER TABLE <%= tableName %> RENAME COLUMN <%= before %> TO <%= after %>;", newName = Object.keys(attributes)[0];
        return _.template(query, this._templateSettings)({
          tableName: this.quoteTable(tableName),
          before: this.quoteIdentifier(attrBefore),
          after: this.quoteIdentifier(newName)
        });
      }
      addConstraintQuery(tableName, options) {
        options = options || {};
        if (options.onUpdate && options.onUpdate.toUpperCase() === "CASCADE") {
          delete options.onUpdate;
        }
        const constraintSnippet = this.getConstraintSnippet(tableName, options);
        if (typeof tableName === "string") {
          tableName = this.quoteIdentifiers(tableName);
        } else {
          tableName = this.quoteTable(tableName);
        }
        return `ALTER TABLE ${tableName} ADD ${constraintSnippet};`;
      }
      bulkInsertQuery(tableName, attrValueHashes, options, attributes) {
        options = options || {};
        attributes = attributes || {};
        let query = "INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;";
        if (options.returning) {
          query = "SELECT * FROM FINAL TABLE( INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>);";
        }
        const emptyQuery = "INSERT INTO <%= table %>", tuples = [], allAttributes = [], allQueries = [];
        let outputFragment;
        const valuesForEmptyQuery = [];
        if (options.returning) {
          outputFragment = "";
        }
        _.forEach(attrValueHashes, (attrValueHash) => {
          const fields = Object.keys(attrValueHash);
          const firstAttr = attributes[fields[0]];
          if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {
            valuesForEmptyQuery.push(`(${this.autoGenValue++})`);
            return;
          }
          _.forOwn(attrValueHash, (value, key) => {
            if (allAttributes.indexOf(key) === -1) {
              if (value === null && attributes[key] && attributes[key].autoIncrement)
                return;
              allAttributes.push(key);
            }
          });
        });
        if (valuesForEmptyQuery.length > 0) {
          allQueries.push(`${emptyQuery} VALUES ${valuesForEmptyQuery.join(",")}`);
        }
        if (allAttributes.length > 0) {
          _.forEach(attrValueHashes, (attrValueHash) => {
            tuples.push(`(${allAttributes.map((key) => this.escape(attrValueHash[key]), void 0, { context: "INSERT" }).join(",")})`);
          });
          allQueries.push(query);
        }
        const replacements = {
          table: this.quoteTable(tableName),
          attributes: allAttributes.map((attr) => this.quoteIdentifier(attr)).join(","),
          tuples,
          output: outputFragment
        };
        const generatedQuery = _.template(allQueries.join(";"), this._templateSettings)(replacements);
        return generatedQuery;
      }
      updateQuery(tableName, attrValueHash, where2, options, attributes) {
        const sql = super.updateQuery(tableName, attrValueHash, where2, options, attributes);
        options = options || {};
        _.defaults(options, this.options);
        if (!options.limit) {
          sql.query = `SELECT * FROM FINAL TABLE (${sql.query});`;
          return sql;
        }
        attrValueHash = Utils2.removeNullValuesFromHash(attrValueHash, options.omitNull, options);
        const modelAttributeMap = {};
        const values = [];
        const bind = [];
        const bindParam = options.bindParam || this.bindParam(bind);
        if (attributes) {
          _.each(attributes, (attribute, key) => {
            modelAttributeMap[key] = attribute;
            if (attribute.field) {
              modelAttributeMap[attribute.field] = attribute;
            }
          });
        }
        for (const key in attrValueHash) {
          const value = attrValueHash[key];
          if (value instanceof Utils2.SequelizeMethod || options.bindParam === false) {
            values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || void 0, { context: "UPDATE" })}`);
          } else {
            values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || void 0, { context: "UPDATE" }, bindParam)}`);
          }
        }
        let query;
        const whereOptions = _.defaults({ bindParam }, options);
        query = `UPDATE (SELECT * FROM ${this.quoteTable(tableName)} ${this.whereQuery(where2, whereOptions)} FETCH NEXT ${this.escape(options.limit)} ROWS ONLY) SET ${values.join(",")}`;
        query = `SELECT * FROM FINAL TABLE (${query});`;
        return { query, bind };
      }
      upsertQuery(tableName, insertValues, updateValues, where2, model) {
        const targetTableAlias = this.quoteTable(`${tableName}_target`);
        const sourceTableAlias = this.quoteTable(`${tableName}_source`);
        const primaryKeysAttrs = [];
        const identityAttrs = [];
        const uniqueAttrs = [];
        const tableNameQuoted = this.quoteTable(tableName);
        for (const key in model.rawAttributes) {
          if (model.rawAttributes[key].primaryKey) {
            primaryKeysAttrs.push(model.rawAttributes[key].field || key);
          }
          if (model.rawAttributes[key].unique) {
            uniqueAttrs.push(model.rawAttributes[key].field || key);
          }
          if (model.rawAttributes[key].autoIncrement) {
            identityAttrs.push(model.rawAttributes[key].field || key);
          }
        }
        for (const index of model._indexes) {
          if (index.unique && index.fields) {
            for (const field of index.fields) {
              const fieldName = typeof field === "string" ? field : field.name || field.attribute;
              if (uniqueAttrs.indexOf(fieldName) === -1 && model.rawAttributes[fieldName]) {
                uniqueAttrs.push(fieldName);
              }
            }
          }
        }
        const updateKeys = Object.keys(updateValues);
        const insertKeys = Object.keys(insertValues);
        const insertKeysQuoted = insertKeys.map((key) => this.quoteIdentifier(key)).join(", ");
        const insertValuesEscaped = insertKeys.map((key) => this.escape(insertValues[key])).join(", ");
        const sourceTableQuery = `VALUES(${insertValuesEscaped})`;
        let joinCondition;
        const clauses = where2[Op2.or].filter((clause) => {
          let valid = true;
          for (const key in clause) {
            if (!clause[key]) {
              valid = false;
              break;
            }
          }
          return valid;
        });
        const getJoinSnippet = (array) => {
          return array.map((key) => {
            key = this.quoteIdentifier(key);
            return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;
          });
        };
        if (clauses.length === 0) {
          throw new Error("Primary Key or Unique key should be passed to upsert query");
        } else {
          for (const key in clauses) {
            const keys = Object.keys(clauses[key]);
            if (primaryKeysAttrs.indexOf(keys[0]) !== -1) {
              joinCondition = getJoinSnippet(primaryKeysAttrs).join(" AND ");
              break;
            }
          }
          if (!joinCondition) {
            joinCondition = getJoinSnippet(uniqueAttrs).join(" AND ");
          }
        }
        const filteredUpdateClauses = updateKeys.filter((key) => {
          if (identityAttrs.indexOf(key) === -1) {
            return true;
          }
          return false;
        }).map((key) => {
          const value = this.escape(updateValues[key]);
          key = this.quoteIdentifier(key);
          return `${targetTableAlias}.${key} = ${value}`;
        }).join(", ");
        const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses}` : "";
        const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;
        let query = `MERGE INTO ${tableNameQuoted} AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;
        query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet};`;
        return query;
      }
      truncateTableQuery(tableName) {
        return `TRUNCATE TABLE ${this.quoteTable(tableName)} IMMEDIATE`;
      }
      deleteQuery(tableName, where2, options = {}, model) {
        const table = this.quoteTable(tableName);
        const query = "DELETE FROM <%= table %><%= where %><%= limit %>";
        where2 = this.getWhereConditions(where2, null, model, options);
        let limit = "";
        if (options.offset > 0) {
          limit = ` OFFSET ${this.escape(options.offset)} ROWS`;
        }
        if (options.limit) {
          limit += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;
        }
        const replacements = {
          limit,
          table,
          where: where2
        };
        if (replacements.where) {
          replacements.where = ` WHERE ${replacements.where}`;
        }
        return _.template(query, this._templateSettings)(replacements);
      }
      showIndexesQuery(tableName) {
        let sql = 'SELECT NAME AS "name", TBNAME AS "tableName", UNIQUERULE AS "keyType", COLNAMES, INDEXTYPE AS "type" FROM SYSIBM.SYSINDEXES WHERE TBNAME = <%= tableName %>';
        let schema = void 0;
        if (_.isObject(tableName)) {
          schema = tableName.schema;
          tableName = tableName.tableName;
        }
        if (schema) {
          sql = `${sql} AND TBCREATOR = <%= schemaName %>`;
        }
        sql = `${sql} ORDER BY NAME;`;
        return _.template(sql, this._templateSettings)({
          tableName: wrapSingleQuote(tableName),
          schemaName: wrapSingleQuote(schema)
        });
      }
      showConstraintsQuery(tableName, constraintName) {
        let sql = `SELECT CONSTNAME AS "constraintName", TRIM(TABSCHEMA) AS "schemaName", TABNAME AS "tableName" FROM SYSCAT.TABCONST WHERE TABNAME = '${tableName}'`;
        if (constraintName) {
          sql += ` AND CONSTNAME LIKE '%${constraintName}%'`;
        }
        return `${sql} ORDER BY CONSTNAME;`;
      }
      removeIndexQuery(tableName, indexNameOrAttributes) {
        const sql = "DROP INDEX <%= indexName %>";
        let indexName = indexNameOrAttributes;
        if (typeof indexName !== "string") {
          indexName = Utils2.underscore(`${tableName}_${indexNameOrAttributes.join("_")}`);
        }
        const values = {
          tableName: this.quoteIdentifiers(tableName),
          indexName: this.quoteIdentifiers(indexName)
        };
        return _.template(sql, this._templateSettings)(values);
      }
      attributeToSQL(attribute, options) {
        if (!_.isPlainObject(attribute)) {
          attribute = {
            type: attribute
          };
        }
        let template;
        let changeNull = 1;
        if (attribute.type instanceof DataTypes2.ENUM) {
          if (attribute.type.values && !attribute.values)
            attribute.values = attribute.type.values;
          template = attribute.type.toSql();
          template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map((value) => {
            return this.escape(value);
          }).join(", ")}))`;
        } else {
          template = attribute.type.toString();
        }
        if (options && options.context === "changeColumn" && attribute.type) {
          template = `DATA TYPE ${template}`;
        } else if (attribute.allowNull === false || attribute.primaryKey === true || attribute.unique) {
          template += " NOT NULL";
          changeNull = 0;
        }
        if (attribute.autoIncrement) {
          let initialValue = 1;
          if (attribute.initialAutoIncrement) {
            initialValue = attribute.initialAutoIncrement;
          }
          template += ` GENERATED BY DEFAULT AS IDENTITY(START WITH ${initialValue}, INCREMENT BY 1)`;
        }
        if (attribute.type !== "TEXT" && attribute.type._binary !== true && Utils2.defaultValueSchemable(attribute.defaultValue)) {
          template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;
        }
        if (attribute.unique === true) {
          template += " UNIQUE";
        }
        if (attribute.primaryKey) {
          template += " PRIMARY KEY";
        }
        if (attribute.references) {
          if (options && options.context === "addColumn" && options.foreignKey) {
            const attrName = this.quoteIdentifier(options.foreignKey);
            const fkName = `${options.tableName}_${attrName}_fidx`;
            template += `, CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;
          }
          template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;
          if (attribute.references.key) {
            template += ` (${this.quoteIdentifier(attribute.references.key)})`;
          } else {
            template += ` (${this.quoteIdentifier("id")})`;
          }
          if (attribute.onDelete) {
            template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;
          }
          if (attribute.onUpdate && attribute.onUpdate.toUpperCase() != "CASCADE") {
            template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;
          }
        }
        if (options && options.context === "changeColumn" && changeNull === 1 && attribute.allowNull !== void 0) {
          template = [template];
          if (attribute.allowNull) {
            template.push("DROP NOT NULL");
          } else {
            template.push("NOT NULL");
          }
        }
        if (attribute.comment && typeof attribute.comment === "string") {
          template += ` COMMENT ${attribute.comment}`;
        }
        return template;
      }
      attributesToSQL(attributes, options) {
        const result = {}, existingConstraints = [];
        let key, attribute;
        for (key in attributes) {
          attribute = attributes[key];
          if (attribute.references) {
            if (existingConstraints.indexOf(attribute.references.model.toString()) !== -1) {
              attribute.onDelete = "";
              attribute.onUpdate = "";
            } else if (attribute.unique && attribute.unique === true) {
              attribute.onDelete = "";
              attribute.onUpdate = "";
            } else {
              existingConstraints.push(attribute.references.model.toString());
            }
          }
          if (key && !attribute.field && typeof attribute === "object")
            attribute.field = key;
          result[attribute.field || key] = this.attributeToSQL(attribute, options);
        }
        return result;
      }
      createTrigger() {
        throwMethodUndefined("createTrigger");
      }
      dropTrigger() {
        throwMethodUndefined("dropTrigger");
      }
      renameTrigger() {
        throwMethodUndefined("renameTrigger");
      }
      createFunction() {
        throwMethodUndefined("createFunction");
      }
      dropFunction() {
        throwMethodUndefined("dropFunction");
      }
      renameFunction() {
        throwMethodUndefined("renameFunction");
      }
      _getForeignKeysQuerySQL(condition) {
        return `SELECT R.CONSTNAME AS "constraintName", TRIM(R.TABSCHEMA) AS "constraintSchema", R.TABNAME AS "tableName", TRIM(R.TABSCHEMA) AS "tableSchema", LISTAGG(C.COLNAME,', ') WITHIN GROUP (ORDER BY C.COLNAME) AS "columnName", TRIM(R.REFTABSCHEMA) AS "referencedTableSchema", R.REFTABNAME AS "referencedTableName", TRIM(R.PK_COLNAMES) AS "referencedColumnName" FROM SYSCAT.REFERENCES R, SYSCAT.KEYCOLUSE C WHERE R.CONSTNAME = C.CONSTNAME AND R.TABSCHEMA = C.TABSCHEMA AND R.TABNAME = C.TABNAME${condition} GROUP BY R.REFTABSCHEMA, R.REFTABNAME, R.TABSCHEMA, R.TABNAME, R.CONSTNAME, R.PK_COLNAMES`;
      }
      getForeignKeysQuery(table, schemaName) {
        const tableName = table.tableName || table;
        schemaName = table.schema || schemaName;
        let sql = "";
        if (tableName) {
          sql = ` AND R.TABNAME = ${wrapSingleQuote(tableName)}`;
        }
        if (schemaName) {
          sql += ` AND R.TABSCHEMA = ${wrapSingleQuote(schemaName)}`;
        }
        return this._getForeignKeysQuerySQL(sql);
      }
      getForeignKeyQuery(table, columnName) {
        const tableName = table.tableName || table;
        const schemaName = table.schema;
        let sql = "";
        if (tableName) {
          sql = ` AND R.TABNAME = ${wrapSingleQuote(tableName)}`;
        }
        if (schemaName) {
          sql += ` AND R.TABSCHEMA = ${wrapSingleQuote(schemaName)}`;
        }
        if (columnName) {
          sql += ` AND C.COLNAME = ${wrapSingleQuote(columnName)}`;
        }
        return this._getForeignKeysQuerySQL(sql);
      }
      getPrimaryKeyConstraintQuery(table, attributeName) {
        const tableName = wrapSingleQuote(table.tableName || table);
        return [
          'SELECT TABNAME AS "tableName",',
          'COLNAME AS "columnName",',
          'CONSTNAME AS "constraintName"',
          "FROM SYSCAT.KEYCOLUSE WHERE CONSTNAME LIKE 'PK_%'",
          `AND COLNAME = ${wrapSingleQuote(attributeName)}`,
          `AND TABNAME = ${tableName};`
        ].join(" ");
      }
      dropForeignKeyQuery(tableName, foreignKey) {
        return _.template("ALTER TABLE <%= table %> DROP <%= key %>", this._templateSettings)({
          table: this.quoteTable(tableName),
          key: this.quoteIdentifier(foreignKey)
        });
      }
      dropConstraintQuery(tableName, constraintName) {
        const sql = "ALTER TABLE <%= table %> DROP CONSTRAINT <%= constraint %>;";
        return _.template(sql, this._templateSettings)({
          table: this.quoteTable(tableName),
          constraint: this.quoteIdentifier(constraintName)
        });
      }
      setAutocommitQuery() {
        return "";
      }
      setIsolationLevelQuery() {
      }
      generateTransactionId() {
        return randomBytes(10).toString("hex");
      }
      startTransactionQuery(transaction) {
        if (transaction.parent) {
          return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;
        }
        return "BEGIN TRANSACTION;";
      }
      commitTransactionQuery(transaction) {
        if (transaction.parent) {
          return;
        }
        return "COMMIT TRANSACTION;";
      }
      rollbackTransactionQuery(transaction) {
        if (transaction.parent) {
          return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;
        }
        return "ROLLBACK TRANSACTION;";
      }
      addLimitAndOffset(options) {
        const offset = options.offset || 0;
        let fragment = "";
        if (offset > 0) {
          fragment += ` OFFSET ${this.escape(offset)} ROWS`;
        }
        if (options.limit) {
          fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;
        }
        return fragment;
      }
      booleanValue(value) {
        return value ? 1 : 0;
      }
      addUniqueFields(dataValues, rawAttributes, uniqno) {
        uniqno = uniqno === void 0 ? 1 : uniqno;
        for (const key in rawAttributes) {
          if (rawAttributes[key].unique && dataValues[key] === void 0) {
            if (rawAttributes[key].type instanceof DataTypes2.DATE) {
              dataValues[key] = Utils2.now("db2");
            } else if (rawAttributes[key].type instanceof DataTypes2.STRING) {
              dataValues[key] = `unique${uniqno++}`;
            } else if (rawAttributes[key].type instanceof DataTypes2.INTEGER) {
              dataValues[key] = uniqno++;
            } else if (rawAttributes[key].type instanceof DataTypes2.BOOLEAN) {
              dataValues[key] = new DataTypes2.BOOLEAN(false);
            }
          }
        }
        return uniqno;
      }
      quoteIdentifier(identifier2, force) {
        return Utils2.addTicks(Utils2.removeTicks(identifier2, '"'), '"');
      }
    };
    function wrapSingleQuote(identifier2) {
      if (identifier2) {
        return `'${identifier2}'`;
      }
      return "";
    }
    module.exports = Db2QueryGenerator;
  }
});

// node_modules/sequelize/lib/dialects/db2/query-interface.js
var require_query_interface6 = __commonJS({
  "node_modules/sequelize/lib/dialects/db2/query-interface.js"(exports) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var _ = require_lodash();
    var Utils2 = require_utils();
    var Op2 = require_operators();
    var { QueryInterface: QueryInterface2 } = require_query_interface();
    var QueryTypes2 = require_query_types();
    var Db2QueryInterface = class extends QueryInterface2 {
      async getForeignKeyReferencesForTable(tableName, options) {
        const queryOptions = __spreadProps(__spreadValues({}, options), {
          type: QueryTypes2.FOREIGNKEYS
        });
        const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.username.toUpperCase());
        return this.sequelize.query(query, queryOptions);
      }
      async upsert(tableName, insertValues, updateValues, where2, options) {
        options = __spreadValues({}, options);
        const model = options.model;
        const wheres = [];
        const attributes = Object.keys(insertValues);
        let indexes = [];
        let indexFields;
        options = _.clone(options);
        if (!Utils2.isWhereEmpty(where2)) {
          wheres.push(where2);
        }
        indexes = _.map(model.uniqueKeys, (value) => {
          return value.fields;
        });
        model._indexes.forEach((value) => {
          if (value.unique) {
            indexFields = value.fields.map((field) => {
              if (_.isPlainObject(field)) {
                return field.attribute;
              }
              return field;
            });
            indexes.push(indexFields);
          }
        });
        for (const index of indexes) {
          if (_.intersection(attributes, index).length === index.length) {
            where2 = {};
            for (const field of index) {
              where2[field] = insertValues[field];
            }
            wheres.push(where2);
          }
        }
        where2 = { [Op2.or]: wheres };
        options.type = QueryTypes2.UPSERT;
        options.raw = true;
        const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where2, model, options);
        const result = await this.sequelize.query(sql, options);
        return [result, void 0];
      }
      async createTable(tableName, attributes, options, model) {
        let sql = "";
        options = __spreadValues({}, options);
        if (options && options.uniqueKeys) {
          _.forOwn(options.uniqueKeys, (uniqueKey) => {
            if (uniqueKey.customIndex === void 0) {
              uniqueKey.customIndex = true;
            }
          });
        }
        if (model) {
          options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;
        }
        attributes = _.mapValues(attributes, (attribute) => this.sequelize.normalizeAttribute(attribute));
        if (options.indexes) {
          options.indexes.forEach((fields) => {
            const fieldArr = fields.fields;
            if (fieldArr.length === 1) {
              fieldArr.forEach((field) => {
                for (const property in attributes) {
                  if (field === attributes[property].field) {
                    attributes[property].unique = true;
                  }
                }
              });
            }
          });
        }
        if (options.alter) {
          if (options.indexes) {
            options.indexes.forEach((fields) => {
              const fieldArr = fields.fields;
              if (fieldArr.length === 1) {
                fieldArr.forEach((field) => {
                  for (const property in attributes) {
                    if (field === attributes[property].field && attributes[property].unique) {
                      attributes[property].unique = false;
                    }
                  }
                });
              }
            });
          }
        }
        if (!tableName.schema && (options.schema || !!model && model._schema)) {
          tableName = this.queryGenerator.addSchema({
            tableName,
            _schema: !!model && model._schema || options.schema
          });
        }
        attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: "createTable" });
        sql = this.queryGenerator.createTableQuery(tableName, attributes, options);
        return await this.sequelize.query(sql, options);
      }
    };
    exports.Db2QueryInterface = Db2QueryInterface;
  }
});

// node_modules/sequelize/lib/dialects/db2/index.js
var require_db2 = __commonJS({
  "node_modules/sequelize/lib/dialects/db2/index.js"(exports, module) {
    "use strict";
    var _ = require_lodash();
    var AbstractDialect = require_abstract();
    var ConnectionManager = require_connection_manager7();
    var Query = require_query7();
    var QueryGenerator = require_query_generator7();
    var DataTypes2 = require_data_types8().db2;
    var { Db2QueryInterface } = require_query_interface6();
    var Db2Dialect = class extends AbstractDialect {
      constructor(sequelize) {
        super();
        this.sequelize = sequelize;
        this.connectionManager = new ConnectionManager(this, sequelize);
        this.queryGenerator = new QueryGenerator({
          _dialect: this,
          sequelize
        });
        this.queryInterface = new Db2QueryInterface(sequelize, this.queryGenerator);
      }
    };
    Db2Dialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {
      "DEFAULT": true,
      "DEFAULT VALUES": false,
      "VALUES ()": false,
      "LIMIT ON UPDATE": false,
      "ORDER NULLS": false,
      lock: false,
      transactions: true,
      migrations: false,
      returnValues: false,
      schemas: true,
      finalTable: true,
      autoIncrement: {
        identityInsert: false,
        defaultValue: false,
        update: true
      },
      constraints: {
        restrict: true,
        default: false
      },
      index: {
        collate: false,
        length: false,
        parser: false,
        type: false,
        using: false,
        where: true
      },
      NUMERIC: true,
      tmpTableTrigger: true
    });
    Db2Dialect.prototype.defaultVersion = "1.0.0";
    Db2Dialect.prototype.Query = Query;
    Db2Dialect.prototype.name = "db2";
    Db2Dialect.prototype.TICK_CHAR = '"';
    Db2Dialect.prototype.TICK_CHAR_LEFT = '"';
    Db2Dialect.prototype.TICK_CHAR_RIGHT = '"';
    Db2Dialect.prototype.DataTypes = DataTypes2;
    module.exports = Db2Dialect;
  }
});

// node_modules/sequelize/lib/dialects/snowflake/connection-manager.js
var require_connection_manager8 = __commonJS({
  "node_modules/sequelize/lib/dialects/snowflake/connection-manager.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var AbstractConnectionManager = require_connection_manager();
    var SequelizeErrors = require_errors();
    var { logger } = require_logger();
    var DataTypes2 = require_data_types8().snowflake;
    var debug = logger.debugContext("connection:snowflake");
    var parserStore = require_parserStore()("snowflake");
    var ConnectionManager = class extends AbstractConnectionManager {
      constructor(dialect, sequelize) {
        sequelize.config.port = sequelize.config.port || 3306;
        super(dialect, sequelize);
        this.lib = this._loadDialectModule("snowflake-sdk");
        this.refreshTypeParser(DataTypes2);
      }
      _refreshTypeParser(dataType) {
        parserStore.refresh(dataType);
      }
      _clearTypeParser() {
        parserStore.clear();
      }
      static _typecast(field, next) {
        if (parserStore.get(field.type)) {
          return parserStore.get(field.type)(field, this.sequelize.options, next);
        }
        return next();
      }
      async connect(config) {
        const connectionConfig = __spreadValues({
          account: config.host,
          username: config.username,
          password: config.password,
          database: config.database,
          warehouse: config.warehouse,
          role: config.role
        }, config.dialectOptions);
        try {
          const connection = await new Promise((resolve, reject) => {
            this.lib.createConnection(connectionConfig).connect((err, conn) => {
              if (err) {
                console.log(err);
                reject(err);
              } else {
                resolve(conn);
              }
            });
          });
          debug("connection acquired");
          if (!this.sequelize.config.keepDefaultTimezone) {
            const tzOffset = this.sequelize.options.timezone === "+00:00" ? "Etc/UTC" : this.sequelize.options.timezone;
            const isNamedTzOffset = /\//.test(tzOffset);
            if (isNamedTzOffset) {
              await new Promise((resolve, reject) => {
                connection.execute({
                  sqlText: `ALTER SESSION SET timezone = '${tzOffset}'`,
                  complete(err) {
                    if (err) {
                      console.log(err);
                      reject(err);
                    } else {
                      resolve();
                    }
                  }
                });
              });
            } else {
              throw Error("only support time zone name for snowflake!");
            }
          }
          return connection;
        } catch (err) {
          switch (err.code) {
            case "ECONNREFUSED":
              throw new SequelizeErrors.ConnectionRefusedError(err);
            case "ER_ACCESS_DENIED_ERROR":
              throw new SequelizeErrors.AccessDeniedError(err);
            case "ENOTFOUND":
              throw new SequelizeErrors.HostNotFoundError(err);
            case "EHOSTUNREACH":
              throw new SequelizeErrors.HostNotReachableError(err);
            case "EINVAL":
              throw new SequelizeErrors.InvalidConnectionError(err);
            default:
              throw new SequelizeErrors.ConnectionError(err);
          }
        }
      }
      async disconnect(connection) {
        if (!connection.isUp()) {
          debug("connection tried to disconnect but was already at CLOSED state");
          return;
        }
        return new Promise((resolve, reject) => {
          connection.destroy((err) => {
            if (err) {
              console.error(`Unable to disconnect: ${err.message}`);
              reject(err);
            } else {
              console.log(`Disconnected connection with id: ${connection.getId()}`);
              resolve(connection.getId());
            }
          });
        });
      }
      validate(connection) {
        return connection.isUp();
      }
    };
    module.exports = ConnectionManager;
    module.exports.ConnectionManager = ConnectionManager;
    module.exports.default = ConnectionManager;
  }
});

// node_modules/sequelize/lib/dialects/snowflake/query.js
var require_query8 = __commonJS({
  "node_modules/sequelize/lib/dialects/snowflake/query.js"(exports, module) {
    "use strict";
    var AbstractQuery = require_query();
    var sequelizeErrors = require_errors();
    var _ = require_lodash();
    var { logger } = require_logger();
    var ER_DUP_ENTRY = 1062;
    var ER_DEADLOCK = 1213;
    var ER_ROW_IS_REFERENCED = 1451;
    var ER_NO_REFERENCED_ROW = 1452;
    var debug = logger.debugContext("sql:snowflake");
    var Query = class extends AbstractQuery {
      static formatBindParameters(sql, values, dialect) {
        const bindParam = [];
        const replacementFunc = (_match, key, values_) => {
          if (values_[key] !== void 0) {
            bindParam.push(values_[key]);
            return "?";
          }
          return void 0;
        };
        sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];
        return [sql, bindParam.length > 0 ? bindParam : void 0];
      }
      async run(sql, parameters) {
        this.sql = sql;
        const { connection, options } = this;
        const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;
        const complete = this._logQuery(sql, debug, parameters);
        if (parameters) {
          debug("parameters(%j)", parameters);
        }
        let results;
        try {
          results = await new Promise((resolve, reject) => {
            connection.execute({
              sqlText: sql,
              binds: parameters,
              complete(err, _stmt, rows) {
                if (err) {
                  reject(err);
                } else {
                  resolve(rows);
                }
              }
            });
          });
        } catch (error) {
          if (options.transaction && error.errno === ER_DEADLOCK) {
            try {
              await options.transaction.rollback();
            } catch (error_) {
            }
            options.transaction.finished = "rollback";
          }
          error.sql = sql;
          error.parameters = parameters;
          throw this.formatError(error);
        } finally {
          complete();
        }
        if (showWarnings && results && results.warningStatus > 0) {
          await this.logWarnings(results);
        }
        return this.formatResults(results);
      }
      formatResults(data) {
        let result = this.instance;
        if (this.isInsertQuery(data)) {
          this.handleInsertQuery(data);
          if (!this.instance) {
            if (data.constructor.name === "ResultSetHeader" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {
              const startId = data[this.getInsertIdField()];
              result = [];
              for (let i = startId; i < startId + data.affectedRows; i++) {
                result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });
              }
            } else {
              result = data[this.getInsertIdField()];
            }
          }
        }
        if (this.isSelectQuery()) {
          if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {
            const sfAttrMap = _.reduce(this.model.rawAttributes, (m, v, k) => {
              m[k.toUpperCase()] = k;
              return m;
            }, {});
            data = data.map((data2) => _.reduce(data2, (prev, value, key) => {
              if (value !== void 0 && sfAttrMap[key]) {
                prev[sfAttrMap[key]] = value;
                delete prev[key];
              }
              return prev;
            }, data2));
          }
          this.options.fieldMap = _.mapKeys(this.options.fieldMap, (v, k) => {
            return k.toUpperCase();
          });
          return this.handleSelectQuery(data);
        }
        if (this.isShowTablesQuery()) {
          return this.handleShowTablesQuery(data);
        }
        if (this.isDescribeQuery()) {
          result = {};
          for (const _result of data) {
            result[_result.Field] = {
              type: _result.Type.toUpperCase(),
              allowNull: _result.Null === "YES",
              defaultValue: _result.Default,
              primaryKey: _result.Key === "PRI",
              autoIncrement: Object.prototype.hasOwnProperty.call(_result, "Extra") && _result.Extra.toLowerCase() === "auto_increment",
              comment: _result.Comment ? _result.Comment : null
            };
          }
          return result;
        }
        if (this.isShowIndexesQuery()) {
          return this.handleShowIndexesQuery(data);
        }
        if (this.isCallQuery()) {
          return data[0];
        }
        if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {
          return data[0]["number of rows updated"];
        }
        if (this.isVersionQuery()) {
          return data[0].version;
        }
        if (this.isForeignKeysQuery()) {
          return data;
        }
        if (this.isUpsertQuery()) {
          return [result, data.affectedRows === 1];
        }
        if (this.isInsertQuery() || this.isUpdateQuery()) {
          return [result, data.affectedRows];
        }
        if (this.isShowConstraintsQuery()) {
          return data;
        }
        if (this.isRawQuery()) {
          return [data, data];
        }
        return result;
      }
      async logWarnings(results) {
        const warningResults = await this.run("SHOW WARNINGS");
        const warningMessage = `Snowflake Warnings (${this.connection.uuid || "default"}): `;
        const messages = [];
        for (const _warningRow of warningResults) {
          if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== "function") {
            continue;
          }
          for (const _warningResult of _warningRow) {
            if (Object.prototype.hasOwnProperty.call(_warningResult, "Message")) {
              messages.push(_warningResult.Message);
            } else {
              for (const _objectKey of _warningResult.keys()) {
                messages.push([_objectKey, _warningResult[_objectKey]].join(": "));
              }
            }
          }
        }
        this.sequelize.log(warningMessage + messages.join("; "), this.options);
        return results;
      }
      formatError(err) {
        const errCode = err.errno || err.code;
        switch (errCode) {
          case ER_DUP_ENTRY: {
            const match = err.message.match(/Duplicate entry '([\s\S]*)' for key '?((.|\s)*?)'?$/);
            let fields = {};
            let message = "Validation error";
            const values = match ? match[1].split("-") : void 0;
            const fieldKey = match ? match[2] : void 0;
            const fieldVal = match ? match[1] : void 0;
            const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];
            if (uniqueKey) {
              if (uniqueKey.msg)
                message = uniqueKey.msg;
              fields = _.zipObject(uniqueKey.fields, values);
            } else {
              fields[fieldKey] = fieldVal;
            }
            const errors = [];
            _.forOwn(fields, (value, field) => {
              errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), "unique violation", field, value, this.instance, "not_unique"));
            });
            return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });
          }
          case ER_ROW_IS_REFERENCED:
          case ER_NO_REFERENCED_ROW: {
            const match = err.message.match(/CONSTRAINT ([`"])(.*)\1 FOREIGN KEY \(\1(.*)\1\) REFERENCES \1(.*)\1 \(\1(.*)\1\)/);
            const quoteChar = match ? match[1] : "`";
            const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;
            return new sequelizeErrors.ForeignKeyConstraintError({
              reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? "parent" : "child",
              table: match ? match[4] : void 0,
              fields,
              value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,
              index: match ? match[2] : void 0,
              parent: err
            });
          }
          default:
            return new sequelizeErrors.DatabaseError(err);
        }
      }
      handleShowIndexesQuery(data) {
        data = data.reduce((acc, item) => {
          if (!(item.Key_name in acc)) {
            acc[item.Key_name] = item;
            item.fields = [];
          }
          acc[item.Key_name].fields[item.Seq_in_index - 1] = {
            attribute: item.Column_name,
            length: item.Sub_part || void 0,
            order: item.Collation === "A" ? "ASC" : void 0
          };
          delete item.column_name;
          return acc;
        }, {});
        return _.map(data, (item) => ({
          primary: item.Key_name === "PRIMARY",
          fields: item.fields,
          name: item.Key_name,
          tableName: item.Table,
          unique: item.Non_unique !== 1,
          type: item.Index_type
        }));
      }
    };
    module.exports = Query;
    module.exports.Query = Query;
    module.exports.default = Query;
  }
});

// node_modules/sequelize/lib/dialects/snowflake/query-generator.js
var require_query_generator8 = __commonJS({
  "node_modules/sequelize/lib/dialects/snowflake/query-generator.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var _ = require_lodash();
    var Utils2 = require_utils();
    var AbstractQueryGenerator = require_query_generator();
    var util = __require("util");
    var Op2 = require_operators();
    var JSON_FUNCTION_REGEX = /^\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\([^)]*\)/i;
    var JSON_OPERATOR_REGEX = /^\s*(->>?|@>|<@|\?[|&]?|\|{2}|#-)/i;
    var TOKEN_CAPTURE_REGEX = /^\s*((?:([`"'])(?:(?!\2).|\2{2})*\2)|[\w\d\s]+|[().,;+-])/i;
    var FOREIGN_KEY_FIELDS = [
      "CONSTRAINT_NAME as constraint_name",
      "CONSTRAINT_NAME as constraintName",
      "CONSTRAINT_SCHEMA as constraintSchema",
      "CONSTRAINT_SCHEMA as constraintCatalog",
      "TABLE_NAME as tableName",
      "TABLE_SCHEMA as tableSchema",
      "TABLE_SCHEMA as tableCatalog",
      "COLUMN_NAME as columnName",
      "REFERENCED_TABLE_SCHEMA as referencedTableSchema",
      "REFERENCED_TABLE_SCHEMA as referencedTableCatalog",
      "REFERENCED_TABLE_NAME as referencedTableName",
      "REFERENCED_COLUMN_NAME as referencedColumnName"
    ].join(",");
    var SNOWFLAKE_RESERVED_WORDS = "account,all,alter,and,any,as,between,by,case,cast,check,column,connect,connections,constraint,create,cross,current,current_date,current_time,current_timestamp,current_user,database,delete,distinct,drop,else,exists,false,following,for,from,full,grant,group,gscluster,having,ilike,in,increment,inner,insert,intersect,into,is,issue,join,lateral,left,like,localtime,localtimestamp,minus,natural,not,null,of,on,or,order,organization,qualify,regexp,revoke,right,rlike,row,rows,sample,schema,select,set,some,start,table,tablesample,then,to,trigger,true,try_cast,union,unique,update,using,values,view,when,whenever,where,with".split(",");
    var typeWithoutDefault = /* @__PURE__ */ new Set(["BLOB", "TEXT", "GEOMETRY", "JSON"]);
    var SnowflakeQueryGenerator = class extends AbstractQueryGenerator {
      constructor(options) {
        super(options);
        this.OperatorMap = __spreadProps(__spreadValues({}, this.OperatorMap), {
          [Op2.regexp]: "REGEXP",
          [Op2.notRegexp]: "NOT REGEXP"
        });
      }
      createDatabaseQuery(databaseName, options) {
        options = __spreadValues({
          charset: null,
          collate: null
        }, options);
        return Utils2.joinSQLFragments([
          "CREATE DATABASE IF NOT EXISTS",
          this.quoteIdentifier(databaseName),
          options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,
          options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,
          ";"
        ]);
      }
      dropDatabaseQuery(databaseName) {
        return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;
      }
      createSchema() {
        return "SHOW TABLES";
      }
      showSchemasQuery() {
        return "SHOW TABLES";
      }
      versionQuery() {
        return "SELECT CURRENT_VERSION()";
      }
      createTableQuery(tableName, attributes, options) {
        options = __spreadValues({
          charset: null,
          rowFormat: null
        }, options);
        const primaryKeys = [];
        const foreignKeys = {};
        const attrStr = [];
        for (const attr in attributes) {
          if (!Object.prototype.hasOwnProperty.call(attributes, attr))
            continue;
          const dataType = attributes[attr];
          let match;
          if (dataType.includes("PRIMARY KEY")) {
            primaryKeys.push(attr);
            if (dataType.includes("REFERENCES")) {
              match = dataType.match(/^(.+) (REFERENCES.*)$/);
              attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace("PRIMARY KEY", "")}`);
              foreignKeys[attr] = match[2];
            } else {
              attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace("PRIMARY KEY", "")}`);
            }
          } else if (dataType.includes("REFERENCES")) {
            match = dataType.match(/^(.+) (REFERENCES.*)$/);
            attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);
            foreignKeys[attr] = match[2];
          } else {
            attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);
          }
        }
        const table = this.quoteTable(tableName);
        let attributesClause = attrStr.join(", ");
        const pkString = primaryKeys.map((pk) => this.quoteIdentifier(pk)).join(", ");
        if (options.uniqueKeys) {
          _.each(options.uniqueKeys, (columns, indexName) => {
            if (columns.customIndex) {
              if (typeof indexName !== "string") {
                indexName = `uniq_${tableName}_${columns.fields.join("_")}`;
              }
              attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map((field) => this.quoteIdentifier(field)).join(", ")})`;
            }
          });
        }
        if (pkString.length > 0) {
          attributesClause += `, PRIMARY KEY (${pkString})`;
        }
        for (const fkey in foreignKeys) {
          if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {
            attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;
          }
        }
        return Utils2.joinSQLFragments([
          "CREATE TABLE IF NOT EXISTS",
          table,
          `(${attributesClause})`,
          options.comment && typeof options.comment === "string" && `COMMENT ${this.escape(options.comment)}`,
          options.charset && `DEFAULT CHARSET=${options.charset}`,
          options.collate && `COLLATE ${options.collate}`,
          options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,
          ";"
        ]);
      }
      describeTableQuery(tableName, schema, schemaDelimiter) {
        const table = this.quoteTable(this.addSchema({
          tableName,
          _schema: schema,
          _schemaDelimiter: schemaDelimiter
        }));
        return `SHOW FULL COLUMNS FROM ${table};`;
      }
      showTablesQuery(database) {
        return Utils2.joinSQLFragments([
          "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'",
          database ? `AND TABLE_SCHEMA = ${this.escape(database)}` : "AND TABLE_SCHEMA NOT IN ( 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'SYS')",
          ";"
        ]);
      }
      addColumnQuery(table, key, dataType) {
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(table),
          "ADD",
          this.quoteIdentifier(key),
          this.attributeToSQL(dataType, {
            context: "addColumn",
            tableName: table,
            foreignKey: key
          }),
          ";"
        ]);
      }
      removeColumnQuery(tableName, attributeName) {
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(tableName),
          "DROP",
          this.quoteIdentifier(attributeName),
          ";"
        ]);
      }
      changeColumnQuery(tableName, attributes) {
        const query = (...subQuerys) => Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(tableName),
          "ALTER COLUMN",
          ...subQuerys,
          ";"
        ]);
        const sql = [];
        for (const attributeName in attributes) {
          let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);
          const attrSql = [];
          if (definition.includes("NOT NULL")) {
            attrSql.push(query(this.quoteIdentifier(attributeName), "SET NOT NULL"));
            definition = definition.replace("NOT NULL", "").trim();
          } else if (!definition.includes("REFERENCES")) {
            attrSql.push(query(this.quoteIdentifier(attributeName), "DROP NOT NULL"));
          }
          if (definition.includes("DEFAULT")) {
            attrSql.push(query(this.quoteIdentifier(attributeName), "SET DEFAULT", definition.match(/DEFAULT ([^;]+)/)[1]));
            definition = definition.replace(/(DEFAULT[^;]+)/, "").trim();
          } else if (!definition.includes("REFERENCES")) {
            attrSql.push(query(this.quoteIdentifier(attributeName), "DROP DEFAULT"));
          }
          if (definition.match(/UNIQUE;*$/)) {
            definition = definition.replace(/UNIQUE;*$/, "");
            attrSql.push(query("ADD UNIQUE (", this.quoteIdentifier(attributeName), ")").replace("ALTER COLUMN", ""));
          }
          if (definition.includes("REFERENCES")) {
            definition = definition.replace(/.+?(?=REFERENCES)/, "");
            attrSql.push(query("ADD FOREIGN KEY (", this.quoteIdentifier(attributeName), ")", definition).replace("ALTER COLUMN", ""));
          } else {
            attrSql.push(query(this.quoteIdentifier(attributeName), "TYPE", definition));
          }
          sql.push(attrSql.join(""));
        }
        return sql.join("");
      }
      renameColumnQuery(tableName, attrBefore, attributes) {
        const attrString = [];
        for (const attrName in attributes) {
          const definition = attributes[attrName];
          attrString.push(`'${attrBefore}' '${attrName}' ${definition}`);
        }
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(tableName),
          "RENAME COLUMN",
          attrString.join(" to "),
          ";"
        ]);
      }
      handleSequelizeMethod(attr, tableName, factory, options, prepend) {
        if (attr instanceof Utils2.Json) {
          if (attr.conditions) {
            const conditions = this.parseConditionObject(attr.conditions).map((condition) => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);
            return conditions.join(" AND ");
          }
          if (attr.path) {
            let str;
            if (this._checkValidJsonStatement(attr.path)) {
              str = attr.path;
            } else {
              const paths = _.toPath(attr.path);
              const column = paths.shift();
              str = this.jsonPathExtractionQuery(column, paths);
            }
            if (attr.value) {
              str += util.format(" = %s", this.escape(attr.value));
            }
            return str;
          }
        } else if (attr instanceof Utils2.Cast) {
          if (/timestamp/i.test(attr.type)) {
            attr.type = "datetime";
          } else if (attr.json && /boolean/i.test(attr.type)) {
            attr.type = "char";
          } else if (/double precision/i.test(attr.type) || /boolean/i.test(attr.type) || /integer/i.test(attr.type)) {
            attr.type = "decimal";
          } else if (/text/i.test(attr.type)) {
            attr.type = "char";
          }
        }
        return super.handleSequelizeMethod(attr, tableName, factory, options, prepend);
      }
      truncateTableQuery(tableName) {
        return Utils2.joinSQLFragments([
          "TRUNCATE",
          this.quoteTable(tableName)
        ]);
      }
      deleteQuery(tableName, where2, options = {}, model) {
        const table = this.quoteTable(tableName);
        let whereClause = this.getWhereConditions(where2, null, model, options);
        const limit = options.limit && ` LIMIT ${this.escape(options.limit)}`;
        let primaryKeys = "";
        let primaryKeysSelection = "";
        if (whereClause) {
          whereClause = `WHERE ${whereClause}`;
        }
        if (limit) {
          if (!model) {
            throw new Error("Cannot LIMIT delete without a model.");
          }
          const pks = Object.values(model.primaryKeys).map((pk) => this.quoteIdentifier(pk.field)).join(",");
          primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;
          primaryKeysSelection = pks;
          return Utils2.joinSQLFragments([
            "DELETE FROM",
            table,
            "WHERE",
            primaryKeys,
            "IN (SELECT",
            primaryKeysSelection,
            "FROM",
            table,
            whereClause,
            limit,
            ")",
            ";"
          ]);
        }
        return Utils2.joinSQLFragments([
          "DELETE FROM",
          table,
          whereClause,
          ";"
        ]);
      }
      showIndexesQuery() {
        return "SELECT '' FROM DUAL";
      }
      showConstraintsQuery(table, constraintName) {
        const tableName = table.tableName || table;
        const schemaName = table.schema;
        return Utils2.joinSQLFragments([
          "SELECT CONSTRAINT_CATALOG AS constraintCatalog,",
          "CONSTRAINT_NAME AS constraintName,",
          "CONSTRAINT_SCHEMA AS constraintSchema,",
          "CONSTRAINT_TYPE AS constraintType,",
          "TABLE_NAME AS tableName,",
          "TABLE_SCHEMA AS tableSchema",
          "from INFORMATION_SCHEMA.TABLE_CONSTRAINTS",
          `WHERE table_name='${tableName}'`,
          constraintName && `AND constraint_name = '${constraintName}'`,
          schemaName && `AND TABLE_SCHEMA = '${schemaName}'`,
          ";"
        ]);
      }
      removeIndexQuery(tableName, indexNameOrAttributes) {
        let indexName = indexNameOrAttributes;
        if (typeof indexName !== "string") {
          indexName = Utils2.underscore(`${tableName}_${indexNameOrAttributes.join("_")}`);
        }
        return Utils2.joinSQLFragments([
          "DROP INDEX",
          this.quoteIdentifier(indexName),
          "ON",
          this.quoteTable(tableName),
          ";"
        ]);
      }
      attributeToSQL(attribute, options) {
        if (!_.isPlainObject(attribute)) {
          attribute = {
            type: attribute
          };
        }
        const attributeString = attribute.type.toString({ escape: this.escape.bind(this) });
        let template = attributeString;
        if (attribute.allowNull === false) {
          template += " NOT NULL";
        }
        if (attribute.autoIncrement) {
          template += " AUTOINCREMENT";
        }
        if (!typeWithoutDefault.has(attributeString) && attribute.type._binary !== true && Utils2.defaultValueSchemable(attribute.defaultValue)) {
          template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;
        }
        if (attribute.unique === true) {
          template += " UNIQUE";
        }
        if (attribute.primaryKey) {
          template += " PRIMARY KEY";
        }
        if (attribute.comment) {
          template += ` COMMENT ${this.escape(attribute.comment)}`;
        }
        if (attribute.first) {
          template += " FIRST";
        }
        if (attribute.after) {
          template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;
        }
        if (attribute.references) {
          if (options && options.context === "addColumn" && options.foreignKey) {
            const attrName = this.quoteIdentifier(options.foreignKey);
            const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);
            template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;
          }
          template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;
          if (attribute.references.key) {
            template += ` (${this.quoteIdentifier(attribute.references.key)})`;
          } else {
            template += ` (${this.quoteIdentifier("id")})`;
          }
          if (attribute.onDelete) {
            template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;
          }
          if (attribute.onUpdate) {
            template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;
          }
        }
        return template;
      }
      attributesToSQL(attributes, options) {
        const result = {};
        for (const key in attributes) {
          const attribute = attributes[key];
          result[attribute.field || key] = this.attributeToSQL(attribute, options);
        }
        return result;
      }
      _checkValidJsonStatement(stmt) {
        if (typeof stmt !== "string") {
          return false;
        }
        let currentIndex = 0;
        let openingBrackets = 0;
        let closingBrackets = 0;
        let hasJsonFunction = false;
        let hasInvalidToken = false;
        while (currentIndex < stmt.length) {
          const string = stmt.substr(currentIndex);
          const functionMatches = JSON_FUNCTION_REGEX.exec(string);
          if (functionMatches) {
            currentIndex += functionMatches[0].indexOf("(");
            hasJsonFunction = true;
            continue;
          }
          const operatorMatches = JSON_OPERATOR_REGEX.exec(string);
          if (operatorMatches) {
            currentIndex += operatorMatches[0].length;
            hasJsonFunction = true;
            continue;
          }
          const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);
          if (tokenMatches) {
            const capturedToken = tokenMatches[1];
            if (capturedToken === "(") {
              openingBrackets++;
            } else if (capturedToken === ")") {
              closingBrackets++;
            } else if (capturedToken === ";") {
              hasInvalidToken = true;
              break;
            }
            currentIndex += tokenMatches[0].length;
            continue;
          }
          break;
        }
        if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {
          throw new Error(`Invalid json statement: ${stmt}`);
        }
        return hasJsonFunction;
      }
      dataTypeMapping(tableName, attr, dataType) {
        if (dataType.includes("PRIMARY KEY")) {
          dataType = dataType.replace("PRIMARY KEY", "");
        }
        if (dataType.includes("SERIAL")) {
          if (dataType.includes("BIGINT")) {
            dataType = dataType.replace("SERIAL", "BIGSERIAL");
            dataType = dataType.replace("BIGINT", "");
          } else if (dataType.includes("SMALLINT")) {
            dataType = dataType.replace("SERIAL", "SMALLSERIAL");
            dataType = dataType.replace("SMALLINT", "");
          } else {
            dataType = dataType.replace("INTEGER", "");
          }
          dataType = dataType.replace("NOT NULL", "");
        }
        return dataType;
      }
      getForeignKeysQuery(table, schemaName) {
        const tableName = table.tableName || table;
        return Utils2.joinSQLFragments([
          "SELECT",
          FOREIGN_KEY_FIELDS,
          `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`,
          `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`,
          "AND REFERENCED_TABLE_NAME IS NOT NULL",
          ";"
        ]);
      }
      getForeignKeyQuery(table, columnName) {
        const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : "";
        const quotedTableName = wrapSingleQuote(table.tableName || table);
        const quotedColumnName = wrapSingleQuote(columnName);
        return Utils2.joinSQLFragments([
          "SELECT",
          FOREIGN_KEY_FIELDS,
          "FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE",
          "WHERE (",
          [
            `REFERENCED_TABLE_NAME = ${quotedTableName}`,
            table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`,
            `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`
          ],
          ") OR (",
          [
            `TABLE_NAME = ${quotedTableName}`,
            table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`,
            `AND COLUMN_NAME = ${quotedColumnName}`,
            "AND REFERENCED_TABLE_NAME IS NOT NULL"
          ],
          ")"
        ]);
      }
      dropForeignKeyQuery(tableName, foreignKey) {
        return Utils2.joinSQLFragments([
          "ALTER TABLE",
          this.quoteTable(tableName),
          "DROP FOREIGN KEY",
          this.quoteIdentifier(foreignKey),
          ";"
        ]);
      }
      addLimitAndOffset(options) {
        let fragment = [];
        if (options.offset !== null && options.offset !== void 0 && options.offset !== 0) {
          fragment = fragment.concat([" LIMIT ", this.escape(options.limit), " OFFSET ", this.escape(options.offset)]);
        } else if (options.limit !== null && options.limit !== void 0) {
          fragment = [" LIMIT ", this.escape(options.limit)];
        }
        return fragment.join("");
      }
      quoteIdentifier(identifier2, force) {
        const optForceQuote = force || false;
        const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;
        const rawIdentifier = Utils2.removeTicks(identifier2, '"');
        if (optForceQuote === true || optQuoteIdentifiers !== false || identifier2.includes(".") || identifier2.includes("->") || SNOWFLAKE_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())) {
          return Utils2.addTicks(rawIdentifier, '"');
        }
        return rawIdentifier;
      }
    };
    function wrapSingleQuote(identifier2) {
      return Utils2.addTicks(identifier2, "'");
    }
    module.exports = SnowflakeQueryGenerator;
  }
});

// node_modules/sequelize/lib/dialects/snowflake/query-interface.js
var require_query_interface7 = __commonJS({
  "node_modules/sequelize/lib/dialects/snowflake/query-interface.js"(exports) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var sequelizeErrors = require_errors();
    var { QueryInterface: QueryInterface2 } = require_query_interface();
    var QueryTypes2 = require_query_types();
    var SnowflakeQueryInterface = class extends QueryInterface2 {
      async removeColumn(tableName, columnName, options) {
        options = options || {};
        const [results] = await this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {
          tableName,
          schema: this.sequelize.config.database
        }, columnName), __spreadValues({ raw: true }, options));
        if (results.length && results[0].constraint_name !== "PRIMARY") {
          await Promise.all(results.map((constraint) => this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), __spreadValues({ raw: true }, options))));
        }
        return await this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), __spreadValues({ raw: true }, options));
      }
      async upsert(tableName, insertValues, updateValues, where2, options) {
        options = __spreadValues({}, options);
        options.type = QueryTypes2.UPSERT;
        options.updateOnDuplicate = Object.keys(updateValues);
        const model = options.model;
        const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);
        return await this.sequelize.query(sql, options);
      }
      async removeConstraint(tableName, constraintName, options) {
        const sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {
          tableName,
          schema: this.sequelize.config.database
        }, constraintName);
        const constraints = await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {
          type: this.sequelize.QueryTypes.SHOWCONSTRAINTS
        }));
        const constraint = constraints[0];
        let query;
        if (!constraint || !constraint.constraintType) {
          throw new sequelizeErrors.UnknownConstraintError({
            message: `Constraint ${constraintName} on table ${tableName} does not exist`,
            constraint: constraintName,
            table: tableName
          });
        }
        if (constraint.constraintType === "FOREIGN KEY") {
          query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);
        } else {
          query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);
        }
        return await this.sequelize.query(query, options);
      }
    };
    exports.SnowflakeQueryInterface = SnowflakeQueryInterface;
  }
});

// node_modules/sequelize/lib/dialects/snowflake/index.js
var require_snowflake = __commonJS({
  "node_modules/sequelize/lib/dialects/snowflake/index.js"(exports, module) {
    "use strict";
    var _ = require_lodash();
    var AbstractDialect = require_abstract();
    var ConnectionManager = require_connection_manager8();
    var Query = require_query8();
    var QueryGenerator = require_query_generator8();
    var DataTypes2 = require_data_types8().snowflake;
    var { SnowflakeQueryInterface } = require_query_interface7();
    var SnowflakeDialect = class extends AbstractDialect {
      constructor(sequelize) {
        super();
        this.sequelize = sequelize;
        this.connectionManager = new ConnectionManager(this, sequelize);
        this.queryGenerator = new QueryGenerator({
          _dialect: this,
          sequelize
        });
        this.queryInterface = new SnowflakeQueryInterface(sequelize, this.queryGenerator);
      }
    };
    SnowflakeDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {
      "VALUES ()": true,
      "LIMIT ON UPDATE": true,
      lock: true,
      forShare: "LOCK IN SHARE MODE",
      settingIsolationLevelDuringTransaction: false,
      inserts: {
        ignoreDuplicates: " IGNORE",
        updateOnDuplicate: false
      },
      index: {
        collate: false,
        length: true,
        parser: true,
        type: true,
        using: 1
      },
      constraints: {
        dropConstraint: false,
        check: false
      },
      indexViaAlter: true,
      indexHints: true,
      NUMERIC: true,
      GEOMETRY: false,
      JSON: false,
      REGEXP: true,
      schemas: true
    });
    SnowflakeDialect.prototype.defaultVersion = "5.7.0";
    SnowflakeDialect.prototype.Query = Query;
    SnowflakeDialect.prototype.QueryGenerator = QueryGenerator;
    SnowflakeDialect.prototype.DataTypes = DataTypes2;
    SnowflakeDialect.prototype.name = "snowflake";
    SnowflakeDialect.prototype.TICK_CHAR = '"';
    SnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;
    SnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;
    module.exports = SnowflakeDialect;
  }
});

// node_modules/sequelize/package.json
var require_package = __commonJS({
  "node_modules/sequelize/package.json"(exports, module) {
    module.exports = {
      name: "sequelize",
      description: "Sequelize is a promise-based Node.js ORM tool for Postgres, MySQL, MariaDB, SQLite, Microsoft SQL Server, Amazon Redshift and Snowflake\u2019s Data Cloud. It features solid transaction support, relations, eager and lazy loading, read replication and more.",
      version: "6.17.0",
      funding: [
        {
          type: "opencollective",
          url: "https://opencollective.com/sequelize"
        }
      ],
      repository: {
        type: "git",
        url: "https://github.com/sequelize/sequelize.git"
      },
      bugs: {
        url: "https://github.com/sequelize/sequelize/issues"
      },
      homepage: "https://sequelize.org/",
      main: "./lib/index.js",
      types: "./types",
      type: "commonjs",
      exports: {
        ".": {
          import: "./lib/index.mjs",
          require: "./lib/index.js"
        },
        "./lib/*": "./lib/*.js",
        "./lib/errors": "./lib/errors/index.js",
        "./*": "./*"
      },
      engines: {
        node: ">=10.0.0"
      },
      files: [
        "lib",
        "types",
        "index.js"
      ],
      license: "MIT",
      dependencies: {
        "@types/debug": "^4.1.7",
        "@types/validator": "^13.7.1",
        debug: "^4.3.3",
        dottie: "^2.0.2",
        inflection: "^1.13.2",
        lodash: "^4.17.21",
        moment: "^2.29.1",
        "moment-timezone": "^0.5.34",
        "pg-connection-string": "^2.5.0",
        "retry-as-promised": "^5.0.0",
        semver: "^7.3.5",
        "sequelize-pool": "^7.1.0",
        "toposort-class": "^1.0.1",
        uuid: "^8.3.2",
        validator: "^13.7.0",
        wkx: "^0.5.0"
      },
      devDependencies: {
        "@commitlint/cli": "^15.0.0",
        "@commitlint/config-angular": "^15.0.0",
        "@octokit/rest": "^18.12.0",
        "@octokit/types": "^6.34.0",
        "@types/chai": "^4.3.0",
        "@types/mocha": "^9.0.0",
        "@types/node": "^16.11.17",
        "@types/sinon": "^10.0.6",
        "@typescript-eslint/eslint-plugin": "^5.8.1",
        "@typescript-eslint/parser": "^5.8.1",
        acorn: "^8.7.0",
        chai: "^4.3.4",
        "chai-as-promised": "^7.1.1",
        "chai-datetime": "^1.8.0",
        cheerio: "^1.0.0-rc.10",
        "cls-hooked": "^4.2.2",
        copyfiles: "^2.4.1",
        "cross-env": "^7.0.3",
        delay: "^5.0.0",
        esbuild: "0.14.3",
        esdoc: "^1.1.0",
        "esdoc-ecmascript-proposal-plugin": "^1.0.0",
        "esdoc-inject-style-plugin": "^1.0.0",
        "esdoc-standard-plugin": "^1.0.0",
        eslint: "^8.5.0",
        "eslint-plugin-jsdoc": "^37.4.0",
        "eslint-plugin-mocha": "^9.0.0",
        "expect-type": "^0.12.0",
        "fast-glob": "^3.2.7",
        "fs-jetpack": "^4.3.0",
        husky: "^7.0.4",
        ibm_db: "^2.8.1",
        "js-combinatorics": "^0.6.1",
        "lcov-result-merger": "^3.1.0",
        "lint-staged": "^12.1.4",
        mariadb: "^2.5.5",
        "markdownlint-cli": "^0.30.0",
        mocha: "^7.2.0",
        "module-alias": "^2.2.2",
        mysql2: "^2.3.3",
        "node-hook": "^1.0.0",
        nyc: "^15.1.0",
        "p-map": "^4.0.0",
        "p-props": "^4.0.0",
        "p-settle": "^4.1.1",
        "p-timeout": "^4.0.0",
        pg: "^8.7.1",
        "pg-hstore": "^2.3.4",
        rimraf: "^3.0.2",
        "semantic-release": "^18.0.1",
        "semantic-release-fail-on-major-bump": "^1.0.0",
        sinon: "^12.0.1",
        "sinon-chai": "^3.7.0",
        "snowflake-sdk": "^1.6.6",
        "source-map-support": "^0.5.21",
        sqlite3: "npm:@vscode/sqlite3@^5.0.7",
        tedious: "8.3.0",
        typescript: "^4.5.4"
      },
      peerDependenciesMeta: {
        pg: {
          optional: true
        },
        "pg-hstore": {
          optional: true
        },
        mysql2: {
          optional: true
        },
        ibm_db: {
          optional: true
        },
        "snowflake-sdk": {
          optional: true
        },
        mariadb: {
          optional: true
        },
        sqlite3: {
          optional: true
        },
        tedious: {
          optional: true
        }
      },
      keywords: [
        "mysql",
        "mariadb",
        "sqlite",
        "postgresql",
        "postgres",
        "pg",
        "mssql",
        "db2",
        "ibm_db",
        "sql",
        "sqlserver",
        "snowflake",
        "orm",
        "nodejs",
        "object relational mapper",
        "database",
        "db"
      ],
      commitlint: {
        extends: [
          "@commitlint/config-angular"
        ],
        rules: {
          "type-enum": [
            2,
            "always",
            [
              "build",
              "ci",
              "docs",
              "feat",
              "fix",
              "perf",
              "refactor",
              "revert",
              "style",
              "test",
              "meta"
            ]
          ]
        }
      },
      "lint-staged": {
        "*!(d).[tj]s": "eslint"
      },
      release: {
        plugins: [
          "@semantic-release/commit-analyzer",
          "semantic-release-fail-on-major-bump",
          "@semantic-release/release-notes-generator",
          "@semantic-release/npm",
          "@semantic-release/github"
        ],
        branches: [
          "v6",
          {
            name: "v6-beta",
            prerelease: "beta"
          }
        ]
      },
      publishConfig: {
        tag: "latest"
      },
      scripts: {
        "----------------------------------------- static analysis -----------------------------------------": "",
        lint: "eslint src test --quiet --fix",
        "lint-docs": "markdownlint docs",
        "test-typings": "tsc --noEmit --emitDeclarationOnly false && tsc -b test/tsconfig.json",
        "----------------------------------------- documentation -------------------------------------------": "",
        docs: "rimraf esdoc && esdoc -c docs/esdoc-config.js && cp docs/favicon.ico esdoc/favicon.ico && cp docs/ROUTER.txt esdoc/ROUTER && node docs/run-docs-transforms.js && node docs/redirects/create-redirects.js && rimraf esdoc/file esdoc/source.html",
        "----------------------------------------- tests ---------------------------------------------------": "",
        mocha: "mocha -r ./test/registerEsbuild",
        "test-unit": 'yarn mocha "test/unit/**/*.test.[tj]s"',
        "test-integration": 'yarn mocha "test/integration/**/*.test.[tj]s"',
        teaser: "node test/teaser.js",
        test: "npm run prepare && npm run test-typings && npm run teaser && npm run test-unit && npm run test-integration",
        "----------------------------------------- coverage ------------------------------------------------": "",
        cover: "rimraf coverage && npm run teaser && npm run cover-integration && npm run cover-unit && npm run merge-coverage",
        "cover-integration": `cross-env COVERAGE=true nyc --reporter=lcovonly yarn mocha "test/integration/**/*.test.[tj]s" && node -e "require('fs').renameSync('coverage/lcov.info', 'coverage/integration.info')"`,
        "cover-unit": `cross-env COVERAGE=true nyc --reporter=lcovonly yarn mocha "test/unit/**/*.test.[tj]s" && node -e "require('fs').renameSync('coverage/lcov.info', 'coverage/unit.info')"`,
        "merge-coverage": 'lcov-result-merger "coverage/*.info" "coverage/lcov.info"',
        "----------------------------------------- local test dbs ------------------------------------------": "",
        "start-mariadb": "bash dev/mariadb/10.3/start.sh",
        "start-mysql": "bash dev/mysql/5.7/start.sh",
        "start-mysql-8": "bash dev/mysql/8.0/start.sh",
        "start-postgres": "bash dev/postgres/10/start.sh",
        "start-mssql": "bash dev/mssql/2019/start.sh",
        "start-db2": "bash dev/db2/11.5/start.sh",
        "stop-mariadb": "bash dev/mariadb/10.3/stop.sh",
        "stop-mysql": "bash dev/mysql/5.7/stop.sh",
        "stop-mysql-8": "bash dev/mysql/8.0/stop.sh",
        "stop-postgres": "bash dev/postgres/10/stop.sh",
        "stop-mssql": "bash dev/mssql/2019/stop.sh",
        "stop-db2": "bash dev/db2/11.5/stop.sh",
        "restart-mariadb": "npm run start-mariadb",
        "restart-mysql": "npm run start-mysql",
        "restart-postgres": "npm run start-postgres",
        "restart-mssql": "npm run start-mssql",
        "restart-db2": "npm run start-db2",
        "----------------------------------------- local tests ---------------------------------------------": "",
        "test-unit-mariadb": "cross-env DIALECT=mariadb npm run test-unit",
        "test-unit-mysql": "cross-env DIALECT=mysql npm run test-unit",
        "test-unit-postgres": "cross-env DIALECT=postgres npm run test-unit",
        "test-unit-postgres-native": "cross-env DIALECT=postgres-native npm run test-unit",
        "test-unit-sqlite": "cross-env DIALECT=sqlite npm run test-unit",
        "test-unit-mssql": "cross-env DIALECT=mssql npm run test-unit",
        "test-unit-db2": "cross-env DIALECT=db2 npm run test-unit",
        "test-unit-snowflake": "cross-env DIALECT=snowflake npm run test-unit",
        "test-unit-all": "npm run test-unit-mariadb && npm run test-unit-mysql && npm run test-unit-postgres && npm run test-unit-postgres-native && npm run test-unit-mssql && npm run test-unit-sqlite && npm run test-unit-snowflake && npm run test-unit-db2",
        "test-integration-mariadb": "cross-env DIALECT=mariadb npm run test-integration",
        "test-integration-mysql": "cross-env DIALECT=mysql npm run test-integration",
        "test-integration-postgres": "cross-env DIALECT=postgres npm run test-integration",
        "test-integration-postgres-native": "cross-env DIALECT=postgres-native npm run test-integration",
        "test-integration-sqlite": "cross-env DIALECT=sqlite npm run test-integration",
        "test-integration-mssql": "cross-env DIALECT=mssql npm run test-integration",
        "test-integration-db2": "cross-env DIALECT=db2 npm run test-integration",
        "test-integration-snowflake": "cross-env DIALECT=snowflake npm run test-integration",
        "test-mariadb": "cross-env DIALECT=mariadb npm test",
        "test-mysql": "cross-env DIALECT=mysql npm test",
        "test-sqlite": "cross-env DIALECT=sqlite npm test",
        "test-postgres": "cross-env DIALECT=postgres npm test",
        "test-postgres-native": "cross-env DIALECT=postgres-native npm test",
        "test-mssql": "cross-env DIALECT=mssql npm test",
        "test-db2": "cross-env DIALECT=db2 npm test",
        "----------------------------------------- development ---------------------------------------------": "",
        sscce: "node sscce.js",
        "sscce-mariadb": "cross-env DIALECT=mariadb node sscce.js",
        "sscce-mysql": "cross-env DIALECT=mysql node sscce.js",
        "sscce-postgres": "cross-env DIALECT=postgres node sscce.js",
        "sscce-postgres-native": "cross-env DIALECT=postgres-native node sscce.js",
        "sscce-sqlite": "cross-env DIALECT=sqlite node sscce.js",
        "sscce-mssql": "cross-env DIALECT=mssql node sscce.js",
        "sscce-db2": "cross-env DIALECT=db2 node sscce.js",
        prepare: "npm run build && husky install",
        build: "node ./build.js",
        "---------------------------------------------------------------------------------------------------": ""
      },
      support: true
    };
  }
});

// node_modules/sequelize/lib/sequelize.js
var require_sequelize = __commonJS({
  "node_modules/sequelize/lib/sequelize.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var url = __require("url");
    var path = __require("path");
    var pgConnectionString = require_pg_connection_string();
    var retry = require_retry_as_promised();
    var _ = require_lodash();
    var Utils2 = require_utils();
    var Model3 = require_model();
    var DataTypes2 = require_data_types8();
    var Deferrable2 = require_deferrable();
    var ModelManager = require_model_manager();
    var Transaction2 = require_transaction();
    var QueryTypes2 = require_query_types();
    var TableHints2 = require_table_hints();
    var IndexHints2 = require_index_hints();
    var sequelizeErrors = require_errors();
    var Hooks = require_hooks();
    var Association2 = require_associations();
    var Validator2 = require_validator_extras().validator;
    var Op2 = require_operators();
    var deprecations = require_deprecations();
    var { QueryInterface: QueryInterface2 } = require_query_interface();
    var { BelongsTo: BelongsTo2 } = require_belongs_to();
    var HasOne2 = require_has_one();
    var { BelongsToMany: BelongsToMany2 } = require_belongs_to_many();
    var { HasMany: HasMany2 } = require_has_many();
    var Sequelize2 = class {
      constructor(database, username, password, options) {
        let config;
        if (arguments.length === 1 && typeof database === "object") {
          options = database;
          config = _.pick(options, "host", "port", "database", "username", "password");
        } else if (arguments.length === 1 && typeof database === "string" || arguments.length === 2 && typeof username === "object") {
          config = {};
          options = username || {};
          const urlParts = url.parse(arguments[0], true);
          options.dialect = urlParts.protocol.replace(/:$/, "");
          options.host = urlParts.hostname;
          if (options.dialect === "sqlite" && urlParts.pathname && !urlParts.pathname.startsWith("/:memory")) {
            const storagePath = path.join(options.host, urlParts.pathname);
            options.storage = path.resolve(options.storage || storagePath);
          }
          if (urlParts.pathname) {
            config.database = urlParts.pathname.replace(/^\//, "");
          }
          if (urlParts.port) {
            options.port = urlParts.port;
          }
          if (urlParts.auth) {
            const authParts = urlParts.auth.split(":");
            config.username = authParts[0];
            if (authParts.length > 1)
              config.password = authParts.slice(1).join(":");
          }
          if (urlParts.query) {
            if (urlParts.query.host) {
              options.host = urlParts.query.host;
            }
            if (options.dialectOptions) {
              Object.assign(options.dialectOptions, urlParts.query);
            } else {
              options.dialectOptions = urlParts.query;
              if (urlParts.query.options) {
                try {
                  const o = JSON.parse(urlParts.query.options);
                  options.dialectOptions.options = o;
                } catch (e) {
                }
              }
            }
          }
          if (["postgres", "postgresql"].includes(options.dialect)) {
            Object.assign(options.dialectOptions, pgConnectionString.parse(arguments[0]));
          }
        } else {
          options = options || {};
          config = { database, username, password };
        }
        Sequelize2.runHooks("beforeInit", config, options);
        this.options = __spreadValues({
          dialect: null,
          dialectModule: null,
          dialectModulePath: null,
          host: "localhost",
          protocol: "tcp",
          define: {},
          query: {},
          sync: {},
          timezone: "+00:00",
          standardConformingStrings: true,
          logging: console.log,
          omitNull: false,
          native: false,
          replication: false,
          ssl: void 0,
          pool: {},
          quoteIdentifiers: true,
          hooks: {},
          retry: {
            max: 5,
            match: [
              "SQLITE_BUSY: database is locked"
            ]
          },
          transactionType: Transaction2.TYPES.DEFERRED,
          isolationLevel: null,
          databaseVersion: 0,
          typeValidation: false,
          benchmark: false,
          minifyAliases: false,
          logQueryParameters: false
        }, options);
        if (!this.options.dialect) {
          throw new Error("Dialect needs to be explicitly supplied as of v4.0.0");
        }
        if (this.options.dialect === "postgresql") {
          this.options.dialect = "postgres";
        }
        if (this.options.dialect === "sqlite" && this.options.timezone !== "+00:00") {
          throw new Error("Setting a custom timezone is not supported by SQLite, dates are always returned as UTC. Please remove the custom timezone parameter.");
        }
        if (this.options.logging === true) {
          deprecations.noTrueLogging();
          this.options.logging = console.log;
        }
        this._setupHooks(options.hooks);
        this.config = {
          database: config.database || this.options.database,
          username: config.username || this.options.username,
          password: config.password || this.options.password || null,
          host: config.host || this.options.host,
          port: config.port || this.options.port,
          pool: this.options.pool,
          protocol: this.options.protocol,
          native: this.options.native,
          ssl: this.options.ssl,
          replication: this.options.replication,
          dialectModule: this.options.dialectModule,
          dialectModulePath: this.options.dialectModulePath,
          keepDefaultTimezone: this.options.keepDefaultTimezone,
          dialectOptions: this.options.dialectOptions
        };
        let Dialect;
        switch (this.getDialect()) {
          case "mariadb":
            Dialect = require_mariadb();
            break;
          case "mssql":
            Dialect = require_mssql();
            break;
          case "mysql":
            Dialect = require_mysql();
            break;
          case "postgres":
            Dialect = require_postgres();
            break;
          case "sqlite":
            Dialect = require_sqlite();
            break;
          case "db2":
            Dialect = require_db2();
            break;
          case "snowflake":
            Dialect = require_snowflake();
            break;
          default:
            throw new Error(`The dialect ${this.getDialect()} is not supported. Supported dialects: mssql, mariadb, mysql, postgres, db2 and sqlite.`);
        }
        this.dialect = new Dialect(this);
        this.dialect.queryGenerator.typeValidation = options.typeValidation;
        if (_.isPlainObject(this.options.operatorsAliases)) {
          deprecations.noStringOperators();
          this.dialect.queryGenerator.setOperatorsAliases(this.options.operatorsAliases);
        } else if (typeof this.options.operatorsAliases === "boolean") {
          deprecations.noBoolOperatorAliases();
        }
        this.queryInterface = this.dialect.queryInterface;
        this.models = {};
        this.modelManager = new ModelManager(this);
        this.connectionManager = this.dialect.connectionManager;
        Sequelize2.runHooks("afterInit", this);
      }
      refreshTypes() {
        this.connectionManager.refreshTypeParser(DataTypes2);
      }
      getDialect() {
        return this.options.dialect;
      }
      getDatabaseName() {
        return this.config.database;
      }
      getQueryInterface() {
        return this.queryInterface;
      }
      define(modelName, attributes, options = {}) {
        options.modelName = modelName;
        options.sequelize = this;
        const model = class extends Model3 {
        };
        model.init(attributes, options);
        return model;
      }
      model(modelName) {
        if (!this.isDefined(modelName)) {
          throw new Error(`${modelName} has not been defined`);
        }
        return this.modelManager.getModel(modelName);
      }
      isDefined(modelName) {
        return !!this.modelManager.models.find((model) => model.name === modelName);
      }
      async query(sql, options) {
        options = __spreadValues(__spreadValues({}, this.options.query), options);
        if (options.instance && !options.model) {
          options.model = options.instance.constructor;
        }
        if (!options.instance && !options.model) {
          options.raw = true;
        }
        if (options.mapToModel) {
          options.fieldMap = _.get(options, "model.fieldAttributeMap", {});
        }
        options = _.defaults(options, {
          logging: Object.prototype.hasOwnProperty.call(this.options, "logging") ? this.options.logging : console.log,
          searchPath: Object.prototype.hasOwnProperty.call(this.options, "searchPath") ? this.options.searchPath : "DEFAULT"
        });
        if (!options.type) {
          if (options.model || options.nest || options.plain) {
            options.type = QueryTypes2.SELECT;
          } else {
            options.type = QueryTypes2.RAW;
          }
        }
        if (!this.dialect.supports.searchPath || !this.options.dialectOptions || !this.options.dialectOptions.prependSearchPath || options.supportsSearchPath === false) {
          delete options.searchPath;
        } else if (!options.searchPath) {
          options.searchPath = "DEFAULT";
        }
        if (typeof sql === "object") {
          if (sql.values !== void 0) {
            if (options.replacements !== void 0) {
              throw new Error("Both `sql.values` and `options.replacements` cannot be set at the same time");
            }
            options.replacements = sql.values;
          }
          if (sql.bind !== void 0) {
            if (options.bind !== void 0) {
              throw new Error("Both `sql.bind` and `options.bind` cannot be set at the same time");
            }
            options.bind = sql.bind;
          }
          if (sql.query !== void 0) {
            sql = sql.query;
          }
        }
        sql = sql.trim();
        if (options.replacements && options.bind) {
          throw new Error("Both `replacements` and `bind` cannot be set at the same time");
        }
        if (options.replacements) {
          if (Array.isArray(options.replacements)) {
            sql = Utils2.format([sql].concat(options.replacements), this.options.dialect);
          } else {
            sql = Utils2.formatNamedParameters(sql, options.replacements, this.options.dialect);
          }
        }
        let bindParameters;
        if (options.bind) {
          [sql, bindParameters] = this.dialect.Query.formatBindParameters(sql, options.bind, this.options.dialect);
        }
        const checkTransaction = () => {
          if (options.transaction && options.transaction.finished && !options.completesTransaction) {
            const error = new Error(`${options.transaction.finished} has been called on this transaction(${options.transaction.id}), you can no longer use it. (The rejected query is attached as the 'sql' property of this error)`);
            error.sql = sql;
            throw error;
          }
        };
        const retryOptions = __spreadValues(__spreadValues({}, this.options.retry), options.retry);
        return retry(async () => {
          if (options.transaction === void 0 && Sequelize2._cls) {
            options.transaction = Sequelize2._cls.get("transaction");
          }
          checkTransaction();
          const connection = await (options.transaction ? options.transaction.connection : this.connectionManager.getConnection(options));
          if (this.options.dialect === "db2" && options.alter) {
            if (options.alter.drop === false) {
              connection.dropTable = false;
            }
          }
          const query = new this.dialect.Query(connection, this, options);
          try {
            await this.runHooks("beforeQuery", options, query);
            checkTransaction();
            return await query.run(sql, bindParameters);
          } finally {
            await this.runHooks("afterQuery", options, query);
            if (!options.transaction) {
              await this.connectionManager.releaseConnection(connection);
            }
          }
        }, retryOptions);
      }
      async set(variables, options) {
        options = __spreadValues(__spreadValues({}, this.options.set), typeof options === "object" && options);
        if (!["mysql", "mariadb"].includes(this.options.dialect)) {
          throw new Error("sequelize.set is only supported for mysql or mariadb");
        }
        if (!options.transaction || !(options.transaction instanceof Transaction2)) {
          throw new TypeError("options.transaction is required");
        }
        options.raw = true;
        options.plain = true;
        options.type = "SET";
        const query = `SET ${_.map(variables, (v, k) => `@${k} := ${typeof v === "string" ? `"${v}"` : v}`).join(", ")}`;
        return await this.query(query, options);
      }
      escape(value) {
        return this.dialect.queryGenerator.escape(value);
      }
      async createSchema(schema, options) {
        return await this.getQueryInterface().createSchema(schema, options);
      }
      async showAllSchemas(options) {
        return await this.getQueryInterface().showAllSchemas(options);
      }
      async dropSchema(schema, options) {
        return await this.getQueryInterface().dropSchema(schema, options);
      }
      async dropAllSchemas(options) {
        return await this.getQueryInterface().dropAllSchemas(options);
      }
      async sync(options) {
        options = __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, this.options), this.options.sync), options), {
          hooks: options ? options.hooks !== false : true
        });
        if (options.match) {
          if (!options.match.test(this.config.database)) {
            throw new Error(`Database "${this.config.database}" does not match sync match parameter "${options.match}"`);
          }
        }
        if (options.hooks) {
          await this.runHooks("beforeBulkSync", options);
        }
        if (options.force) {
          await this.drop(options);
        }
        const models = [];
        this.modelManager.forEachModel((model) => {
          if (model) {
            models.push(model);
          } else {
          }
        });
        if (!models.length) {
          await this.authenticate(options);
        } else {
          for (const model of models)
            await model.sync(options);
        }
        if (options.hooks) {
          await this.runHooks("afterBulkSync", options);
        }
        return this;
      }
      async truncate(options) {
        const models = [];
        this.modelManager.forEachModel((model) => {
          if (model) {
            models.push(model);
          }
        }, { reverse: false });
        if (options && options.cascade) {
          for (const model of models)
            await model.truncate(options);
        } else {
          await Promise.all(models.map((model) => model.truncate(options)));
        }
      }
      async drop(options) {
        const models = [];
        this.modelManager.forEachModel((model) => {
          if (model) {
            models.push(model);
          }
        }, { reverse: false });
        for (const model of models)
          await model.drop(options);
      }
      async authenticate(options) {
        options = __spreadValues({
          raw: true,
          plain: true,
          type: QueryTypes2.SELECT
        }, options);
        await this.query("SELECT 1+1 AS result", options);
        return;
      }
      async databaseVersion(options) {
        return await this.getQueryInterface().databaseVersion(options);
      }
      random() {
        if (["postgres", "sqlite", "snowflake"].includes(this.getDialect())) {
          return this.fn("RANDOM");
        }
        return this.fn("RAND");
      }
      static fn(fn2, ...args) {
        return new Utils2.Fn(fn2, args);
      }
      static col(col2) {
        return new Utils2.Col(col2);
      }
      static cast(val, type) {
        return new Utils2.Cast(val, type);
      }
      static literal(val) {
        return new Utils2.Literal(val);
      }
      static and(...args) {
        return { [Op2.and]: args };
      }
      static or(...args) {
        return { [Op2.or]: args };
      }
      static json(conditionsOrPath, value) {
        return new Utils2.Json(conditionsOrPath, value);
      }
      static where(attr, comparator, logic) {
        return new Utils2.Where(attr, comparator, logic);
      }
      async transaction(options, autoCallback) {
        if (typeof options === "function") {
          autoCallback = options;
          options = void 0;
        }
        const transaction = new Transaction2(this, options);
        if (!autoCallback) {
          await transaction.prepareEnvironment(false);
          return transaction;
        }
        return Sequelize2._clsRun(async () => {
          try {
            await transaction.prepareEnvironment();
            const result = await autoCallback(transaction);
            await transaction.commit();
            return await result;
          } catch (err) {
            try {
              if (!transaction.finished) {
                await transaction.rollback();
              } else {
                await transaction.cleanup();
              }
            } catch (err0) {
            }
            throw err;
          }
        });
      }
      static useCLS(ns) {
        if (!ns || typeof ns !== "object" || typeof ns.bind !== "function" || typeof ns.run !== "function")
          throw new Error("Must provide CLS namespace");
        Sequelize2._cls = ns;
        return this;
      }
      static _clsRun(fn2) {
        const ns = Sequelize2._cls;
        if (!ns)
          return fn2();
        let res;
        ns.run((context) => res = fn2(context));
        return res;
      }
      log(...args) {
        let options;
        const last = _.last(args);
        if (last && _.isPlainObject(last) && Object.prototype.hasOwnProperty.call(last, "logging")) {
          options = last;
          if (options.logging === console.log) {
            args.splice(args.length - 1, 1);
          }
        } else {
          options = this.options;
        }
        if (options.logging) {
          if (options.logging === true) {
            deprecations.noTrueLogging();
            options.logging = console.log;
          }
          if ((this.options.benchmark || options.benchmark) && options.logging === console.log) {
            args = [`${args[0]} Elapsed time: ${args[1]}ms`];
          }
          options.logging(...args);
        }
      }
      close() {
        return this.connectionManager.close();
      }
      normalizeDataType(Type) {
        let type = typeof Type === "function" ? new Type() : Type;
        const dialectTypes = this.dialect.DataTypes || {};
        if (dialectTypes[type.key]) {
          type = dialectTypes[type.key].extend(type);
        }
        if (type instanceof DataTypes2.ARRAY) {
          if (!type.type) {
            throw new Error("ARRAY is missing type definition for its values.");
          }
          if (dialectTypes[type.type.key]) {
            type.type = dialectTypes[type.type.key].extend(type.type);
          }
        }
        return type;
      }
      normalizeAttribute(attribute) {
        if (!_.isPlainObject(attribute)) {
          attribute = { type: attribute };
        }
        if (!attribute.type)
          return attribute;
        attribute.type = this.normalizeDataType(attribute.type);
        if (Object.prototype.hasOwnProperty.call(attribute, "defaultValue")) {
          if (typeof attribute.defaultValue === "function" && [DataTypes2.NOW, DataTypes2.UUIDV1, DataTypes2.UUIDV4].includes(attribute.defaultValue)) {
            attribute.defaultValue = new attribute.defaultValue();
          }
        }
        if (attribute.type instanceof DataTypes2.ENUM) {
          if (attribute.values) {
            attribute.type.values = attribute.type.options.values = attribute.values;
          } else {
            attribute.values = attribute.type.values;
          }
          if (!attribute.values.length) {
            throw new Error("Values for ENUM have not been defined.");
          }
        }
        return attribute;
      }
    };
    Sequelize2.prototype.fn = Sequelize2.fn;
    Sequelize2.prototype.col = Sequelize2.col;
    Sequelize2.prototype.cast = Sequelize2.cast;
    Sequelize2.prototype.literal = Sequelize2.literal;
    Sequelize2.prototype.and = Sequelize2.and;
    Sequelize2.prototype.or = Sequelize2.or;
    Sequelize2.prototype.json = Sequelize2.json;
    Sequelize2.prototype.where = Sequelize2.where;
    Sequelize2.prototype.validate = Sequelize2.prototype.authenticate;
    Object.defineProperty(Sequelize2, "version", {
      enumerable: true,
      get() {
        return require_package().version;
      }
    });
    Sequelize2.options = { hooks: {} };
    Sequelize2.Utils = Utils2;
    Sequelize2.Op = Op2;
    Sequelize2.TableHints = TableHints2;
    Sequelize2.IndexHints = IndexHints2;
    Sequelize2.Transaction = Transaction2;
    Sequelize2.prototype.Sequelize = Sequelize2;
    Sequelize2.prototype.QueryTypes = Sequelize2.QueryTypes = QueryTypes2;
    Sequelize2.prototype.Validator = Sequelize2.Validator = Validator2;
    Sequelize2.Model = Model3;
    Sequelize2.QueryInterface = QueryInterface2;
    Sequelize2.BelongsTo = BelongsTo2;
    Sequelize2.HasOne = HasOne2;
    Sequelize2.HasMany = HasMany2;
    Sequelize2.BelongsToMany = BelongsToMany2;
    Sequelize2.DataTypes = DataTypes2;
    for (const dataType in DataTypes2) {
      Sequelize2[dataType] = DataTypes2[dataType];
    }
    Sequelize2.Deferrable = Deferrable2;
    Sequelize2.prototype.Association = Sequelize2.Association = Association2;
    Sequelize2.useInflection = Utils2.useInflection;
    Hooks.applyTo(Sequelize2);
    Hooks.applyTo(Sequelize2.prototype);
    Sequelize2.Error = sequelizeErrors.BaseError;
    for (const error of Object.keys(sequelizeErrors)) {
      Sequelize2[error] = sequelizeErrors[error];
    }
    module.exports = Sequelize2;
    module.exports.Sequelize = Sequelize2;
    module.exports.default = Sequelize2;
  }
});

// node_modules/sequelize/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/sequelize/lib/index.js"(exports, module) {
    "use strict";
    module.exports = require_sequelize();
  }
});

// node_modules/pluralize/pluralize.js
var require_pluralize = __commonJS({
  "node_modules/pluralize/pluralize.js"(exports, module) {
    (function(root, pluralize) {
      if (typeof __require === "function" && typeof exports === "object" && typeof module === "object") {
        module.exports = pluralize();
      } else if (typeof define === "function" && define.amd) {
        define(function() {
          return pluralize();
        });
      } else {
        root.pluralize = pluralize();
      }
    })(exports, function() {
      var pluralRules = [];
      var singularRules = [];
      var uncountables = {};
      var irregularPlurals = {};
      var irregularSingles = {};
      function sanitizeRule(rule) {
        if (typeof rule === "string") {
          return new RegExp("^" + rule + "$", "i");
        }
        return rule;
      }
      function restoreCase(word, token) {
        if (word === token)
          return token;
        if (word === word.toLowerCase())
          return token.toLowerCase();
        if (word === word.toUpperCase())
          return token.toUpperCase();
        if (word[0] === word[0].toUpperCase()) {
          return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();
        }
        return token.toLowerCase();
      }
      function interpolate(str, args) {
        return str.replace(/\$(\d{1,2})/g, function(match, index) {
          return args[index] || "";
        });
      }
      function replace(word, rule) {
        return word.replace(rule[0], function(match, index) {
          var result = interpolate(rule[1], arguments);
          if (match === "") {
            return restoreCase(word[index - 1], result);
          }
          return restoreCase(match, result);
        });
      }
      function sanitizeWord(token, word, rules) {
        if (!token.length || uncountables.hasOwnProperty(token)) {
          return word;
        }
        var len = rules.length;
        while (len--) {
          var rule = rules[len];
          if (rule[0].test(word))
            return replace(word, rule);
        }
        return word;
      }
      function replaceWord(replaceMap, keepMap, rules) {
        return function(word) {
          var token = word.toLowerCase();
          if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
          }
          if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
          }
          return sanitizeWord(token, word, rules);
        };
      }
      function checkWord(replaceMap, keepMap, rules, bool) {
        return function(word) {
          var token = word.toLowerCase();
          if (keepMap.hasOwnProperty(token))
            return true;
          if (replaceMap.hasOwnProperty(token))
            return false;
          return sanitizeWord(token, token, rules) === token;
        };
      }
      function pluralize(word, count, inclusive) {
        var pluralized = count === 1 ? pluralize.singular(word) : pluralize.plural(word);
        return (inclusive ? count + " " : "") + pluralized;
      }
      pluralize.plural = replaceWord(irregularSingles, irregularPlurals, pluralRules);
      pluralize.isPlural = checkWord(irregularSingles, irregularPlurals, pluralRules);
      pluralize.singular = replaceWord(irregularPlurals, irregularSingles, singularRules);
      pluralize.isSingular = checkWord(irregularPlurals, irregularSingles, singularRules);
      pluralize.addPluralRule = function(rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
      };
      pluralize.addSingularRule = function(rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
      };
      pluralize.addUncountableRule = function(word) {
        if (typeof word === "string") {
          uncountables[word.toLowerCase()] = true;
          return;
        }
        pluralize.addPluralRule(word, "$0");
        pluralize.addSingularRule(word, "$0");
      };
      pluralize.addIrregularRule = function(single, plural) {
        plural = plural.toLowerCase();
        single = single.toLowerCase();
        irregularSingles[single] = plural;
        irregularPlurals[plural] = single;
      };
      [
        ["I", "we"],
        ["me", "us"],
        ["he", "they"],
        ["she", "they"],
        ["them", "them"],
        ["myself", "ourselves"],
        ["yourself", "yourselves"],
        ["itself", "themselves"],
        ["herself", "themselves"],
        ["himself", "themselves"],
        ["themself", "themselves"],
        ["is", "are"],
        ["was", "were"],
        ["has", "have"],
        ["this", "these"],
        ["that", "those"],
        ["echo", "echoes"],
        ["dingo", "dingoes"],
        ["volcano", "volcanoes"],
        ["tornado", "tornadoes"],
        ["torpedo", "torpedoes"],
        ["genus", "genera"],
        ["viscus", "viscera"],
        ["stigma", "stigmata"],
        ["stoma", "stomata"],
        ["dogma", "dogmata"],
        ["lemma", "lemmata"],
        ["schema", "schemata"],
        ["anathema", "anathemata"],
        ["ox", "oxen"],
        ["axe", "axes"],
        ["die", "dice"],
        ["yes", "yeses"],
        ["foot", "feet"],
        ["eave", "eaves"],
        ["goose", "geese"],
        ["tooth", "teeth"],
        ["quiz", "quizzes"],
        ["human", "humans"],
        ["proof", "proofs"],
        ["carve", "carves"],
        ["valve", "valves"],
        ["looey", "looies"],
        ["thief", "thieves"],
        ["groove", "grooves"],
        ["pickaxe", "pickaxes"],
        ["passerby", "passersby"]
      ].forEach(function(rule) {
        return pluralize.addIrregularRule(rule[0], rule[1]);
      });
      [
        [/s?$/i, "s"],
        [/[^\u0000-\u007F]$/i, "$0"],
        [/([^aeiou]ese)$/i, "$1"],
        [/(ax|test)is$/i, "$1es"],
        [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, "$1es"],
        [/(e[mn]u)s?$/i, "$1s"],
        [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, "$1"],
        [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1i"],
        [/(alumn|alg|vertebr)(?:a|ae)$/i, "$1ae"],
        [/(seraph|cherub)(?:im)?$/i, "$1im"],
        [/(her|at|gr)o$/i, "$1oes"],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, "$1a"],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, "$1a"],
        [/sis$/i, "ses"],
        [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, "$1$2ves"],
        [/([^aeiouy]|qu)y$/i, "$1ies"],
        [/([^ch][ieo][ln])ey$/i, "$1ies"],
        [/(x|ch|ss|sh|zz)$/i, "$1es"],
        [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, "$1ices"],
        [/\b((?:tit)?m|l)(?:ice|ouse)$/i, "$1ice"],
        [/(pe)(?:rson|ople)$/i, "$1ople"],
        [/(child)(?:ren)?$/i, "$1ren"],
        [/eaux$/i, "$0"],
        [/m[ae]n$/i, "men"],
        ["thou", "you"]
      ].forEach(function(rule) {
        return pluralize.addPluralRule(rule[0], rule[1]);
      });
      [
        [/s$/i, ""],
        [/(ss)$/i, "$1"],
        [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, "$1fe"],
        [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, "$1f"],
        [/ies$/i, "y"],
        [/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, "$1ie"],
        [/\b(mon|smil)ies$/i, "$1ey"],
        [/\b((?:tit)?m|l)ice$/i, "$1ouse"],
        [/(seraph|cherub)im$/i, "$1"],
        [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, "$1"],
        [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, "$1sis"],
        [/(movie|twelve|abuse|e[mn]u)s$/i, "$1"],
        [/(test)(?:is|es)$/i, "$1is"],
        [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1us"],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, "$1um"],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, "$1on"],
        [/(alumn|alg|vertebr)ae$/i, "$1a"],
        [/(cod|mur|sil|vert|ind)ices$/i, "$1ex"],
        [/(matr|append)ices$/i, "$1ix"],
        [/(pe)(rson|ople)$/i, "$1rson"],
        [/(child)ren$/i, "$1"],
        [/(eau)x?$/i, "$1"],
        [/men$/i, "man"]
      ].forEach(function(rule) {
        return pluralize.addSingularRule(rule[0], rule[1]);
      });
      [
        "adulthood",
        "advice",
        "agenda",
        "aid",
        "aircraft",
        "alcohol",
        "ammo",
        "analytics",
        "anime",
        "athletics",
        "audio",
        "bison",
        "blood",
        "bream",
        "buffalo",
        "butter",
        "carp",
        "cash",
        "chassis",
        "chess",
        "clothing",
        "cod",
        "commerce",
        "cooperation",
        "corps",
        "debris",
        "diabetes",
        "digestion",
        "elk",
        "energy",
        "equipment",
        "excretion",
        "expertise",
        "firmware",
        "flounder",
        "fun",
        "gallows",
        "garbage",
        "graffiti",
        "hardware",
        "headquarters",
        "health",
        "herpes",
        "highjinks",
        "homework",
        "housework",
        "information",
        "jeans",
        "justice",
        "kudos",
        "labour",
        "literature",
        "machinery",
        "mackerel",
        "mail",
        "media",
        "mews",
        "moose",
        "music",
        "mud",
        "manga",
        "news",
        "only",
        "personnel",
        "pike",
        "plankton",
        "pliers",
        "police",
        "pollution",
        "premises",
        "rain",
        "research",
        "rice",
        "salmon",
        "scissors",
        "series",
        "sewage",
        "shambles",
        "shrimp",
        "software",
        "species",
        "staff",
        "swine",
        "tennis",
        "traffic",
        "transportation",
        "trout",
        "tuna",
        "wealth",
        "welfare",
        "whiting",
        "wildebeest",
        "wildlife",
        "you",
        /pok[eé]mon$/i,
        /[^aeiou]ese$/i,
        /deer$/i,
        /fish$/i,
        /measles$/i,
        /o[iu]s$/i,
        /pox$/i,
        /sheep$/i
      ].forEach(pluralize.addUncountableRule);
      return pluralize;
    });
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/lower-case/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/lower-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lowerCase = exports.localeLowerCase = void 0;
    var SUPPORTED_LOCALE = {
      tr: {
        regexp: /\u0130|\u0049|\u0049\u0307/g,
        map: {
          \u0130: "i",
          I: "\u0131",
          I\u0307: "i"
        }
      },
      az: {
        regexp: /\u0130/g,
        map: {
          \u0130: "i",
          I: "\u0131",
          I\u0307: "i"
        }
      },
      lt: {
        regexp: /\u0049|\u004A|\u012E|\u00CC|\u00CD|\u0128/g,
        map: {
          I: "i\u0307",
          J: "j\u0307",
          \u012E: "\u012F\u0307",
          \u00CC: "i\u0307\u0300",
          \u00CD: "i\u0307\u0301",
          \u0128: "i\u0307\u0303"
        }
      }
    };
    function localeLowerCase(str, locale) {
      var lang = SUPPORTED_LOCALE[locale.toLowerCase()];
      if (lang)
        return lowerCase(str.replace(lang.regexp, function(m) {
          return lang.map[m];
        }));
      return lowerCase(str);
    }
    exports.localeLowerCase = localeLowerCase;
    function lowerCase(str) {
      return str.toLowerCase();
    }
    exports.lowerCase = lowerCase;
  }
});

// node_modules/no-case/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/no-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.noCase = void 0;
    var lower_case_1 = require_dist2();
    var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
    var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
    function noCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lower_case_1.lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? " " : _d;
      var result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
      var start = 0;
      var end = result.length;
      while (result.charAt(start) === "\0")
        start++;
      while (result.charAt(end - 1) === "\0")
        end--;
      return result.slice(start, end).split("\0").map(transform).join(delimiter);
    }
    exports.noCase = noCase;
    function replace(input, re, value) {
      if (re instanceof RegExp)
        return input.replace(re, value);
      return re.reduce(function(input2, re2) {
        return input2.replace(re2, value);
      }, input);
    }
  }
});

// node_modules/pascal-case/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/pascal-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pascalCase = exports.pascalCaseTransformMerge = exports.pascalCaseTransform = void 0;
    var tslib_1 = require_tslib();
    var no_case_1 = require_dist3();
    function pascalCaseTransform(input, index) {
      var firstChar = input.charAt(0);
      var lowerChars = input.substr(1).toLowerCase();
      if (index > 0 && firstChar >= "0" && firstChar <= "9") {
        return "_" + firstChar + lowerChars;
      }
      return "" + firstChar.toUpperCase() + lowerChars;
    }
    exports.pascalCaseTransform = pascalCaseTransform;
    function pascalCaseTransformMerge(input) {
      return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();
    }
    exports.pascalCaseTransformMerge = pascalCaseTransformMerge;
    function pascalCase2(input, options) {
      if (options === void 0) {
        options = {};
      }
      return no_case_1.noCase(input, tslib_1.__assign({ delimiter: "", transform: pascalCaseTransform }, options));
    }
    exports.pascalCase = pascalCase2;
  }
});

// node_modules/camel-case/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/camel-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.camelCase = exports.camelCaseTransformMerge = exports.camelCaseTransform = void 0;
    var tslib_1 = require_tslib();
    var pascal_case_1 = require_dist4();
    function camelCaseTransform(input, index) {
      if (index === 0)
        return input.toLowerCase();
      return pascal_case_1.pascalCaseTransform(input, index);
    }
    exports.camelCaseTransform = camelCaseTransform;
    function camelCaseTransformMerge(input, index) {
      if (index === 0)
        return input.toLowerCase();
      return pascal_case_1.pascalCaseTransformMerge(input);
    }
    exports.camelCaseTransformMerge = camelCaseTransformMerge;
    function camelCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return pascal_case_1.pascalCase(input, tslib_1.__assign({ transform: camelCaseTransform }, options));
    }
    exports.camelCase = camelCase;
  }
});

// node_modules/upper-case-first/dist/index.js
var require_dist6 = __commonJS({
  "node_modules/upper-case-first/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.upperCaseFirst = void 0;
    function upperCaseFirst(input) {
      return input.charAt(0).toUpperCase() + input.substr(1);
    }
    exports.upperCaseFirst = upperCaseFirst;
  }
});

// node_modules/capital-case/dist/index.js
var require_dist7 = __commonJS({
  "node_modules/capital-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.capitalCase = exports.capitalCaseTransform = void 0;
    var tslib_1 = require_tslib();
    var no_case_1 = require_dist3();
    var upper_case_first_1 = require_dist6();
    function capitalCaseTransform(input) {
      return upper_case_first_1.upperCaseFirst(input.toLowerCase());
    }
    exports.capitalCaseTransform = capitalCaseTransform;
    function capitalCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return no_case_1.noCase(input, tslib_1.__assign({ delimiter: " ", transform: capitalCaseTransform }, options));
    }
    exports.capitalCase = capitalCase;
  }
});

// node_modules/upper-case/dist/index.js
var require_dist8 = __commonJS({
  "node_modules/upper-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.upperCase = exports.localeUpperCase = void 0;
    var SUPPORTED_LOCALE = {
      tr: {
        regexp: /[\u0069]/g,
        map: {
          i: "\u0130"
        }
      },
      az: {
        regexp: /[\u0069]/g,
        map: {
          i: "\u0130"
        }
      },
      lt: {
        regexp: /[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,
        map: {
          i\u0307: "I",
          j\u0307: "J",
          \u012F\u0307: "\u012E",
          i\u0307\u0300: "\xCC",
          i\u0307\u0301: "\xCD",
          i\u0307\u0303: "\u0128"
        }
      }
    };
    function localeUpperCase(str, locale) {
      var lang = SUPPORTED_LOCALE[locale.toLowerCase()];
      if (lang)
        return upperCase(str.replace(lang.regexp, function(m) {
          return lang.map[m];
        }));
      return upperCase(str);
    }
    exports.localeUpperCase = localeUpperCase;
    function upperCase(str) {
      return str.toUpperCase();
    }
    exports.upperCase = upperCase;
  }
});

// node_modules/constant-case/dist/index.js
var require_dist9 = __commonJS({
  "node_modules/constant-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.constantCase = void 0;
    var tslib_1 = require_tslib();
    var no_case_1 = require_dist3();
    var upper_case_1 = require_dist8();
    function constantCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return no_case_1.noCase(input, tslib_1.__assign({ delimiter: "_", transform: upper_case_1.upperCase }, options));
    }
    exports.constantCase = constantCase;
  }
});

// node_modules/dot-case/dist/index.js
var require_dist10 = __commonJS({
  "node_modules/dot-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dotCase = void 0;
    var tslib_1 = require_tslib();
    var no_case_1 = require_dist3();
    function dotCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return no_case_1.noCase(input, tslib_1.__assign({ delimiter: "." }, options));
    }
    exports.dotCase = dotCase;
  }
});

// node_modules/header-case/dist/index.js
var require_dist11 = __commonJS({
  "node_modules/header-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.headerCase = void 0;
    var tslib_1 = require_tslib();
    var capital_case_1 = require_dist7();
    function headerCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return capital_case_1.capitalCase(input, tslib_1.__assign({ delimiter: "-" }, options));
    }
    exports.headerCase = headerCase;
  }
});

// node_modules/param-case/dist/index.js
var require_dist12 = __commonJS({
  "node_modules/param-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paramCase = void 0;
    var tslib_1 = require_tslib();
    var dot_case_1 = require_dist10();
    function paramCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return dot_case_1.dotCase(input, tslib_1.__assign({ delimiter: "-" }, options));
    }
    exports.paramCase = paramCase;
  }
});

// node_modules/path-case/dist/index.js
var require_dist13 = __commonJS({
  "node_modules/path-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pathCase = void 0;
    var tslib_1 = require_tslib();
    var dot_case_1 = require_dist10();
    function pathCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return dot_case_1.dotCase(input, tslib_1.__assign({ delimiter: "/" }, options));
    }
    exports.pathCase = pathCase;
  }
});

// node_modules/sentence-case/dist/index.js
var require_dist14 = __commonJS({
  "node_modules/sentence-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sentenceCase = exports.sentenceCaseTransform = void 0;
    var tslib_1 = require_tslib();
    var no_case_1 = require_dist3();
    var upper_case_first_1 = require_dist6();
    function sentenceCaseTransform(input, index) {
      var result = input.toLowerCase();
      if (index === 0)
        return upper_case_first_1.upperCaseFirst(result);
      return result;
    }
    exports.sentenceCaseTransform = sentenceCaseTransform;
    function sentenceCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return no_case_1.noCase(input, tslib_1.__assign({ delimiter: " ", transform: sentenceCaseTransform }, options));
    }
    exports.sentenceCase = sentenceCase;
  }
});

// node_modules/snake-case/dist/index.js
var require_dist15 = __commonJS({
  "node_modules/snake-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.snakeCase = void 0;
    var tslib_1 = require_tslib();
    var dot_case_1 = require_dist10();
    function snakeCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return dot_case_1.dotCase(input, tslib_1.__assign({ delimiter: "_" }, options));
    }
    exports.snakeCase = snakeCase;
  }
});

// node_modules/change-case/dist/index.js
var require_dist16 = __commonJS({
  "node_modules/change-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_dist5(), exports);
    tslib_1.__exportStar(require_dist7(), exports);
    tslib_1.__exportStar(require_dist9(), exports);
    tslib_1.__exportStar(require_dist10(), exports);
    tslib_1.__exportStar(require_dist11(), exports);
    tslib_1.__exportStar(require_dist3(), exports);
    tslib_1.__exportStar(require_dist12(), exports);
    tslib_1.__exportStar(require_dist4(), exports);
    tslib_1.__exportStar(require_dist13(), exports);
    tslib_1.__exportStar(require_dist14(), exports);
    tslib_1.__exportStar(require_dist15(), exports);
  }
});

// node_modules/sequelize/lib/index.mjs
var import_index = __toESM(require_lib3(), 1);
var Sequelize = import_index.default.Sequelize;
var fn = import_index.default.fn;
var col = import_index.default.col;
var cast = import_index.default.cast;
var literal = import_index.default.literal;
var and = import_index.default.and;
var or = import_index.default.or;
var json = import_index.default.json;
var where = import_index.default.where;
var QueryInterface = import_index.default.QueryInterface;
var ABSTRACT = import_index.default.ABSTRACT;
var STRING = import_index.default.STRING;
var CHAR = import_index.default.CHAR;
var TEXT = import_index.default.TEXT;
var NUMBER = import_index.default.NUMBER;
var TINYINT = import_index.default.TINYINT;
var SMALLINT = import_index.default.SMALLINT;
var MEDIUMINT = import_index.default.MEDIUMINT;
var INTEGER = import_index.default.INTEGER;
var BIGINT = import_index.default.BIGINT;
var FLOAT = import_index.default.FLOAT;
var TIME = import_index.default.TIME;
var DATE = import_index.default.DATE;
var DATEONLY = import_index.default.DATEONLY;
var BOOLEAN = import_index.default.BOOLEAN;
var NOW = import_index.default.NOW;
var BLOB = import_index.default.BLOB;
var DECIMAL = import_index.default.DECIMAL;
var NUMERIC = import_index.default.NUMERIC;
var UUID = import_index.default.UUID;
var UUIDV1 = import_index.default.UUIDV1;
var UUIDV4 = import_index.default.UUIDV4;
var HSTORE = import_index.default.HSTORE;
var JSON2 = import_index.default.JSON;
var JSONB = import_index.default.JSONB;
var VIRTUAL = import_index.default.VIRTUAL;
var ARRAY = import_index.default.ARRAY;
var ENUM = import_index.default.ENUM;
var RANGE = import_index.default.RANGE;
var REAL = import_index.default.REAL;
var DOUBLE = import_index.default.DOUBLE;
var GEOMETRY = import_index.default.GEOMETRY;
var GEOGRAPHY = import_index.default.GEOGRAPHY;
var CIDR = import_index.default.CIDR;
var INET = import_index.default.INET;
var MACADDR = import_index.default.MACADDR;
var CITEXT = import_index.default.CITEXT;
var TSVECTOR = import_index.default.TSVECTOR;
var Model = import_index.default.Model;
var Transaction = import_index.default.Transaction;
var Association = import_index.default.Association;
var BelongsTo = import_index.default.BelongsTo;
var HasOne = import_index.default.HasOne;
var HasMany = import_index.default.HasMany;
var BelongsToMany = import_index.default.BelongsToMany;
var BaseError = import_index.default.BaseError;
var AggregateError = import_index.default.AggregateError;
var AsyncQueueError = import_index.default.AsyncQueueError;
var AssociationError = import_index.default.AssociationError;
var BulkRecordError = import_index.default.BulkRecordError;
var ConnectionError = import_index.default.ConnectionError;
var DatabaseError = import_index.default.DatabaseError;
var EagerLoadingError = import_index.default.EagerLoadingError;
var EmptyResultError = import_index.default.EmptyResultError;
var InstanceError = import_index.default.InstanceError;
var OptimisticLockError = import_index.default.OptimisticLockError;
var QueryError = import_index.default.QueryError;
var SequelizeScopeError = import_index.default.SequelizeScopeError;
var ValidationError = import_index.default.ValidationError;
var ValidationErrorItem = import_index.default.ValidationErrorItem;
var AccessDeniedError = import_index.default.AccessDeniedError;
var ConnectionAcquireTimeoutError = import_index.default.ConnectionAcquireTimeoutError;
var ConnectionRefusedError = import_index.default.ConnectionRefusedError;
var ConnectionTimedOutError = import_index.default.ConnectionTimedOutError;
var HostNotFoundError = import_index.default.HostNotFoundError;
var HostNotReachableError = import_index.default.HostNotReachableError;
var InvalidConnectionError = import_index.default.InvalidConnectionError;
var ExclusionConstraintError = import_index.default.ExclusionConstraintError;
var ForeignKeyConstraintError = import_index.default.ForeignKeyConstraintError;
var TimeoutError = import_index.default.TimeoutError;
var UnknownConstraintError = import_index.default.UnknownConstraintError;
var UniqueConstraintError = import_index.default.UniqueConstraintError;
var Error2 = import_index.default.Error;
var useInflection = import_index.default.useInflection;
var Utils = import_index.default.Utils;
var QueryTypes = import_index.default.QueryTypes;
var Op = import_index.default.Op;
var TableHints = import_index.default.TableHints;
var IndexHints = import_index.default.IndexHints;
var DataTypes = import_index.default.DataTypes;
var Deferrable = import_index.default.Deferrable;
var Validator = import_index.default.Validator;
var ValidationErrorItemOrigin = import_index.default.ValidationErrorItemOrigin;
var ValidationErrorItemType = import_index.default.ValidationErrorItemType;

// src/lib/data-client.ts
var import_pluralize = __toESM(require_pluralize(), 1);
var import_change_case = __toESM(require_dist16(), 1);
var DataClient = class {
  db = {};
  cluster;
  connection;
  models;
  client;
  constructor(config) {
    this.connection = config.connection;
    this.models = config.models;
  }
  async getClient() {
    if (!this.connection?.database || !this.connection?.username || !this.connection?.password || !this.connection?.host || !this.connection?.port) {
      return;
    }
    this.client = new Sequelize(this.connection.database, this.connection.username, this.connection.password, {
      dialect: "postgres",
      host: this.connection.host,
      port: this.connection.port,
      ssl: true
    });
    for (const [modelName, model] of Object.entries(this.models)) {
      const cModel = model(this.client, DataTypes);
      this.db[modelName] = cModel;
    }
    for (const [modelName, model] of Object.entries(this.db)) {
      this.db[modelName]?.associate?.(this.db);
    }
    return this.client;
  }
  async connect({
    alter = false,
    force = false
  }) {
    await this.getClient();
    if (this.cluster) {
      if (!this.connection?.bastion?.host) {
        try {
          if (this.client)
            return this.client.sync({ alter, force });
        } catch (err) {
          console.error(err);
        }
      } else {
      }
    }
  }
  async create(model, data) {
    let modelName = "";
    Object.entries(this.db).forEach(([name, m]) => {
      if (name === (0, import_pluralize.singular)((0, import_change_case.pascalCase)(model)))
        modelName = name;
    });
    if (!modelName) {
      return;
    }
    if (Array.isArray(data)) {
      return this.db[modelName]?.bulkCreate(data);
    } else {
      return this.db[modelName]?.create(data);
    }
  }
  async deleteMany(model, ids) {
    let modelName = "";
    Object.entries(this.db).forEach(([name, m]) => {
      if (name === (0, import_pluralize.singular)((0, import_change_case.pascalCase)(model)))
        modelName = name;
    });
    if (!modelName) {
      return;
    }
    const result = await this.db?.[modelName]?.destroy({ where: { id: ids } });
    return result;
  }
  async deleteOne(model, id) {
    let modelName = "";
    Object.entries(this.db).forEach(([name, m]) => {
      if (name === (0, import_pluralize.singular)((0, import_change_case.pascalCase)(model)))
        modelName = name;
    });
    if (!modelName) {
      return;
    }
    if (!id)
      return;
    const result = await this.db?.[modelName]?.destroy({ where: { id } });
    return result;
  }
  async getOne(model, id) {
    let modelName = "";
    Object.entries(this.db).forEach(([name, m]) => {
      if (name === (0, import_pluralize.singular)((0, import_change_case.pascalCase)(model)))
        modelName = name;
    });
    if (!modelName) {
      return;
    }
    return this.db?.[modelName]?.findOne({ where: { id } });
  }
  async getMany(model, props) {
    let modelName = "";
    Object.entries(this.db).forEach(([name, m]) => {
      if (name === (0, import_pluralize.singular)((0, import_change_case.pascalCase)(model)))
        modelName = name;
    });
    if (!modelName) {
      return;
    }
    console.log("filters", props?.filters);
    console.log("limit", props?.limit);
    if (props?.filters) {
      return this.db?.[modelName]?.findAll({ where: props.filters });
    }
    console.log("asdf");
    return this.db?.[modelName]?.findAll();
  }
  async updateMany(model, data) {
    let modelName = "";
    Object.entries(this.db).forEach(([name, m]) => {
      if (name === (0, import_pluralize.singular)((0, import_change_case.pascalCase)(model)))
        modelName = name;
    });
    if (!modelName)
      return;
    const result = await this.db?.[modelName]?.upsert(data);
    return result;
  }
  async updateOne(model, id, data) {
    let modelName = "";
    Object.entries(this.db).forEach(([name, m]) => {
      if (name === (0, import_pluralize.singular)((0, import_change_case.pascalCase)(model)))
        modelName = name;
    });
    if (!modelName)
      return;
    const entity = await this.db?.[modelName]?.findOne({ where: { id } });
    if (!entity)
      return;
    await entity.update(data);
    return entity;
  }
};
export {
  DataClient
};
/*!
 * inflection
 * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>
 * MIT Licensed
 *
 * @fileoverview
 * A port of inflection-js to node.js module.
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
//! Copyright (c) JS Foundation and other contributors
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! github.com/moment/moment-timezone
//! license : MIT
//! moment-timezone.js
//! moment.js
//! momentjs.com
//! version : 0.5.34
//! version : 2.29.1
//# sourceMappingURL=index.js.map
